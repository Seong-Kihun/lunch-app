[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lunch-app"
version = "1.0.0"
description = "Lunch App Backend - 점심 약속 관리 앱"
dependencies = [
    "Flask>=2.3.0",
    "Flask-SQLAlchemy>=3.0.0",
    "Flask-Migrate>=4.0.0",
    "Flask-CORS>=4.0.0",
    "Flask-JWT-Extended>=4.5.0",
    "SQLAlchemy>=2.0.0",
    "Alembic>=1.11.0",
    "psycopg2-binary>=2.9.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "prometheus-client>=0.17.0",
    "structlog>=23.0.0",
    "psutil>=5.9.0",
    "python-dotenv>=1.0.0",
    "bcrypt>=4.0.0",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "import-linter>=1.11.0",
    "pytest-arch>=0.1.0",
    "pre-commit>=3.3.0",
]

# Black 설정
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
  | venv
  | __pycache__
  | .venv
)/
'''

# isort 설정
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["backend"]
skip_glob = ["*/migrations/*"]

# Ruff 설정
[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "B",  # flake8-bugbear
    "S",  # flake8-bandit (보안)
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "S101",  # use of assert detected (테스트에서 허용)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"migrations/*" = ["E501"]  # line too long
"tests/*" = ["S101"]  # use of assert detected

[tool.ruff.exclude]
exclude = [
    ".git",
    "__pycache__",
    "migrations",
    "venv",
    ".venv",
    "htmlcov",
    "*.egg-info"
]

# MyPy 설정
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "flask.*",
    "sqlalchemy.*",
    "alembic.*",
    "prometheus_client.*",
    "structlog.*",
    "psutil.*",
]
ignore_missing_imports = true

# Import-linter 설정 - 아키텍처 계약 정의
[tool.importlinter]
root_package = "backend"

[[tool.importlinter.contracts]]
name = "Core must not depend on outer layers"
type = "forbidden"
source_modules = ["backend.core"]
forbidden_modules = [
    "backend.infrastructure",
    "backend.application", 
    "backend.presentation",
    "flask",
    "sqlalchemy",
    "pydantic"
]

[[tool.importlinter.contracts]]
name = "Application depends on Core, not on Presentation"
type = "layers"
layers = [
    "backend.presentation",
    "backend.application", 
    "backend.core"
]
# Only downward imports allowed

[[tool.importlinter.contracts]]
name = "Infrastructure depends on Core and Application"
type = "layers"
layers = [
    "backend.infrastructure",
    "backend.application",
    "backend.core"
]

# Pytest 설정
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=backend",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=70",
    "--junitxml=test-results.xml",
    "-v"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "architecture: marks tests as architecture contract tests"
]

# Coverage 설정
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/node_modules/*",
    "*/conftest.py",
    "*/setup.py"
]

[tool.coverage.report]
fail_under = 70
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"
title = "Lunch App Coverage Report"

# Pre-commit 설정
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [
            { id = "black", language_version = "python3.12" }
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            { id = "isort", args = ["--profile", "black"] }
        ]
    },
    {
        repo = "https://github.com/charliermarsh/ruff-pre-commit",
        rev = "v0.1.0",
        hooks = [
            { id = "ruff", args = ["--fix", "--exit-non-zero-on-fix"] }
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.5.1",
        hooks = [
            { id = "mypy", additional_dependencies = ["types-all"] }
        ]
    }
]
