"""Initial migration

Revision ID: cdff2b435dac
Revises: 
Create Date: 2025-09-02 21:51:51.241397

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'cdff2b435dac'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: Dropping tables that may not exist - using try/except would be better
    # but for now we'll comment out the problematic drops
    # op.drop_table('personal_schedule')
    # with op.batch_alter_table('user_notification_settings', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('idx_user_notification'))
    # op.drop_table('user_notification_settings')
    # op.drop_table('friend_invites')
    with op.batch_alter_table('dangol_pot', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_dangol_pot_host_id', 'users', ['host_id'], ['employee_id'])

    with op.batch_alter_table('dangol_pot_member', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_dangol_pot_member_employee_id', 'users', ['employee_id'], ['employee_id'])

    with op.batch_alter_table('party', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_party_host_employee_id', 'users', ['host_employee_id'], ['employee_id'])

    with op.batch_alter_table('party_member', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_party_member_employee_id', 'users', ['employee_id'], ['employee_id'])

    with op.batch_alter_table('personal_schedules', schema=None) as batch_op:
        batch_op.alter_column('schedule_date',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=20),
               existing_nullable=True)
        batch_op.create_index(batch_op.f('ix_personal_schedules_schedule_date'), ['schedule_date'], unique=False)
        batch_op.drop_column('original_schedule_id')

    with op.batch_alter_table('restaurant', schema=None) as batch_op:
        batch_op.add_column(sa.Column('rating', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('total_reviews', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=200),
               existing_nullable=False)
        batch_op.alter_column('address',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=500),
               existing_nullable=True)
        batch_op.alter_column('category',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               nullable=True)
        batch_op.drop_column('latitude')
        batch_op.drop_column('longitude')

    with op.batch_alter_table('restaurant_analytics', schema=None) as batch_op:
        batch_op.drop_column('popular_tags')

    with op.batch_alter_table('restaurant_visit', schema=None) as batch_op:
        batch_op.alter_column('visit_time',
               existing_type=sa.TIME(),
               type_=sa.String(length=10),
               existing_nullable=True)

    with op.batch_alter_table('review', schema=None) as batch_op:
        batch_op.alter_column('photo_url',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.drop_column('likes')

    with op.batch_alter_table('user_preference', schema=None) as batch_op:
        batch_op.add_column(sa.Column('food_preferences', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('lunch_style', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('max_distance', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('budget_range', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('preferred_time', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        # batch_op.drop_index(batch_op.f('idx_user_preference'))
        # batch_op.drop_constraint(None, type_='foreignkey')
        # batch_op.drop_column('preference_value')
        # batch_op.drop_column('preference_type')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_preference', schema=None) as batch_op:
        batch_op.add_column(sa.Column('preference_type', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('preference_value', sa.VARCHAR(length=100), nullable=False))
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['employee_id'])
        batch_op.create_index(batch_op.f('idx_user_preference'), ['user_id', 'preference_type'], unique=False)
        batch_op.drop_column('updated_at')
        batch_op.drop_column('preferred_time')
        batch_op.drop_column('budget_range')
        batch_op.drop_column('max_distance')
        batch_op.drop_column('lunch_style')
        batch_op.drop_column('food_preferences')

    with op.batch_alter_table('review', schema=None) as batch_op:
        batch_op.add_column(sa.Column('likes', sa.INTEGER(), nullable=True))
        batch_op.alter_column('photo_url',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)

    with op.batch_alter_table('restaurant_visit', schema=None) as batch_op:
        batch_op.alter_column('visit_time',
               existing_type=sa.String(length=10),
               type_=sa.TIME(),
               existing_nullable=True)

    with op.batch_alter_table('restaurant_analytics', schema=None) as batch_op:
        batch_op.add_column(sa.Column('popular_tags', sa.VARCHAR(length=500), nullable=True))

    with op.batch_alter_table('restaurant', schema=None) as batch_op:
        batch_op.add_column(sa.Column('longitude', sa.FLOAT(), nullable=True))
        batch_op.add_column(sa.Column('latitude', sa.FLOAT(), nullable=True))
        batch_op.alter_column('category',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.alter_column('address',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=200),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.drop_column('created_at')
        batch_op.drop_column('total_reviews')
        batch_op.drop_column('rating')

    with op.batch_alter_table('personal_schedules', schema=None) as batch_op:
        batch_op.add_column(sa.Column('original_schedule_id', sa.INTEGER(), nullable=True))
        batch_op.drop_index(batch_op.f('ix_personal_schedules_schedule_date'))
        batch_op.alter_column('schedule_date',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=10),
               existing_nullable=True)

    with op.batch_alter_table('party_member', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('party', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('dangol_pot_member', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('dangol_pot', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    op.create_table('friend_invites',
    sa.Column('invite_id', sa.VARCHAR(length=32), nullable=False),
    sa.Column('inviter_id', sa.VARCHAR(length=20), nullable=False),
    sa.Column('invite_code', sa.VARCHAR(length=8), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('expires_at', sa.DATETIME(), nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), nullable=True),
    sa.Column('used_by', sa.VARCHAR(length=20), nullable=True),
    sa.Column('used_at', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('invite_id'),
    sa.UniqueConstraint('invite_code')
    )
    op.create_table('user_notification_settings',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=50), nullable=False),
    sa.Column('setting_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('setting_value', sa.BOOLEAN(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.employee_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_notification_settings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_user_notification'), ['user_id', 'setting_type'], unique=False)

    op.create_table('personal_schedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('employee_id', sa.VARCHAR(length=50), nullable=False),
    sa.Column('schedule_date', sa.VARCHAR(length=10), nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('is_recurring', sa.BOOLEAN(), nullable=True),
    sa.Column('recurrence_type', sa.VARCHAR(length=20), nullable=True),
    sa.Column('recurrence_interval', sa.INTEGER(), nullable=True),
    sa.Column('recurrence_end_date', sa.VARCHAR(length=10), nullable=True),
    sa.Column('original_schedule_id', sa.INTEGER(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
