import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Text, View, StyleSheet, FlatList, ActivityIndicator, TouchableOpacity, TextInput, SafeAreaView, Alert, Modal, Pressable, ScrollView, Dimensions, KeyboardAvoidingView, Platform, Switch, Image, RefreshControl } from 'react-native';
import { NavigationContainer, useFocusEffect, useNavigationState } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import Ionicons from 'react-native-vector-icons/Ionicons';
import { Calendar, LocaleConfig } from 'react-native-calendars';
import MapView, { Marker } from 'react-native-maps';
import DateTimePicker from '@react-native-community/datetimepicker';
import io from 'socket.io-client';
import AsyncStorage from '@react-native-async-storage/async-storage';

// 상수와 스타일 import
import { 
    RENDER_SERVER_URL, 
    API_BASE_URL, 
    CURRENT_USER_ID, 
    myEmployeeId, 
    COLORS, 
    DARK_COLORS,
    SCREEN_WIDTH,
    SCREEN_HEIGHT
} from './utils/constants';
import { commonStyles } from './utils/styles';

// 분리된 화면 컴포넌트들 import
import ChatRoomScreen from './screens/ChatRoomScreen';
import IntelligentSchedulingScreen from './screens/IntelligentSchedulingScreen';
import HomeScreen from './screens/HomeScreen';
import RestaurantsScreen from './screens/RestaurantsScreen';
import ChatListScreen from './screens/ChatListScreen';

const myNickname = '홍길동'; // 실제 내 닉네임으로 수정

// --- 유틸 함수 추가 (전역에서 사용 가능) ---
function parseRecipientIds(recipientIds) {
  // 빈 문자열이면 빈 배열 반환
  if (!recipientIds || recipientIds.trim() === '') {
    return [];
  }
  
  // 연속된 쉼표를 하나로 치환하고, 앞뒤 공백 제거
  const cleanedIds = recipientIds.replace(/,,+/g, ',').trim();
  
  // 쉼표로 분리하고 빈 문자열 제거
  const ids = cleanedIds
    .split(',')
    .map(id => id.trim())
    .filter(id => id.length > 0);
  
  // 만약 각 ID가 한 글자씩이라면 (예: "K,O,I,C,A,0,0,2"), 올바른 형태로 조합
  if (ids.length > 0 && ids[0].length === 1) {
    const combinedIds = [];
    let currentId = '';
    
    for (let i = 0; i < ids.length; i++) {
      currentId += ids[i];
      // 8글자가 되면 하나의 ID로 간주 (KOICA002 형태)
      if (currentId.length === 8) {
        combinedIds.push(currentId);
        currentId = '';
      }
    }
    
    // 남은 글자들도 ID로 추가 (8글자가 안 되더라도)
    if (currentId.length > 0) {
      combinedIds.push(currentId);
    }
    
    return combinedIds;
  }
  
  return ids;
}
// 날짜를 YYYY-MM-DD(로컬)로 반환하는 함수
function toLocalDateString(date) {
  const pad = n => n.toString().padStart(2, '0');
  return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;
}
function getGroupKeyFromIds(ids) {
  return [...ids].sort().join(',');
}

// --- 실시간 알림 관리 함수들 ---
const addNotification = (setNotifications, setUnreadCount, type, message, data = {}) => {
    const newNotification = {
        id: Date.now(),
        type,
        message,
        data,
        timestamp: new Date(),
        read: false
    };
    setNotifications(prev => [newNotification, ...prev]);
    setUnreadCount(prev => prev + 1);
};

const markNotificationAsRead = (setNotifications, setUnreadCount, notificationId) => {
    setNotifications(prev => 
        prev.map(notif => 
            notif.id === notificationId ? { ...notif, read: true } : notif
        )
    );
    setUnreadCount(prev => Math.max(0, prev - 1));
};

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();
const TopTab = createMaterialTopTabNavigator();

// --- 기본 스타일 (임시) ---
const basicStyles = StyleSheet.create({
    centeredView: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.6)' },
    modalView: { 
        margin: 20, 
        backgroundColor: 'white', 
        borderRadius: 24, 
        padding: 30, 
        alignItems: 'center', 
        width: '90%', 
        shadowColor: '#000', 
        shadowOffset: { width: 0, height: 8 }, 
        shadowOpacity: 0.3, 
        shadowRadius: 12, 
        elevation: 8 
    },
    modalTitle: { fontSize: 22, fontWeight: 'bold', marginBottom: 24, textAlign: 'center', color: '#3B82F6', letterSpacing: 0.5 },
    button: { 
        borderRadius: 16, 
        padding: 16, 
        elevation: 3, 
        width: '100%', 
        marginTop: 12,
        shadowColor: '#3B82F6',
        shadowOffset: { width: 0, height: 2 }, 
        shadowOpacity: 0.2, 
        shadowRadius: 4
    },
    buttonClose: { backgroundColor: '#E2E8F0' },
    textStyle: { color: 'white', fontWeight: 'bold', textAlign: 'center', fontSize: 16 },
    textStyleBlack: { color: 'black', fontWeight: 'bold', textAlign: 'center', fontSize: 16 },
    optionButton: { padding: 12, marginVertical: 4, borderRadius: 8, backgroundColor: '#F1F5F9' },
    optionButtonSelected: { backgroundColor: '#3B82F6' },
    optionButtonText: { fontSize: 16, color: '#1E293B' },
    optionButtonTextSelected: { color: 'white' },
    scrollerContainer: { height: 200, alignItems: 'center' },
    scroller: { width: 100 },
    scrollerItem: { height: 50, justifyContent: 'center', alignItems: 'center' },
    scrollerItemText: { fontSize: 18, fontWeight: 'bold' },
    scrollerIndicator: { position: 'absolute', top: 75, left: 0, right: 0, height: 50, backgroundColor: 'rgba(59, 130, 246, 0.1)', borderRadius: 8 }
});

// --- 테마 관리 함수 ---

const COLORS = {
    // 라이트 모드
    light: {
        primary: '#3B82F6',      // 파란색 (메인 컬러)
        primaryLight: 'rgba(59, 130, 246, 0.1)',
        secondary: '#10B981',    // 에메랄드 (강조/파티생성)
        accent: '#8B5CF6',       // 보라 (성공/확인)
        background: '#F1F5F9',   // 연한 블루 그레이
        surface: '#FFFFFF',
        text: '#1E293B',
        textSecondary: '#64748B',
        border: '#E2E8F0',
        gray: '#64748B',
        lightGray: '#E2E8F0',
        red: '#EF4444',
        disabled: '#CBD5E0',
        blue: '#3B82F6',         // 파란색 (메인)
        indigo: '#6366F1',       // 인디고 (단골파티)
        cyan: '#06B6D4',         // 시안 (맛집)
        deepBlue: '#1D5D9B',      // 진한 파란색
        skyBlue: '#75C2F6',       // 연한 파란색
        yellow: '#F4D160',        // 밝은 노란색
        paleYellow: '#FBEEAC',     // 연한 노란색
        white: '#FFFFFF',         // 흰색
    },
    // 다크 모드
    dark: {
        primary: '#60A5FA',      // 밝은 파란색
        primaryLight: 'rgba(96, 165, 250, 0.1)',
        secondary: '#34D399',    // 밝은 에메랄드
        accent: '#A78BFA',       // 밝은 보라
        background: '#0F172A',   // 진한 네이비
        surface: '#1E293B',      // 어두운 그레이
        text: '#F8FAFC',         // 밝은 텍스트
        textSecondary: '#94A3B8', // 회색 텍스트
        border: '#334155',       // 어두운 보더
        gray: '#94A3B8',
        lightGray: '#334155',
        red: '#F87171',
        disabled: '#475569',
        blue: '#60A5FA',
        indigo: '#818CF8',
        cyan: '#22D3EE',
        deepBlue: '#3B82F6',
        skyBlue: '#7DD3FC',
        yellow: '#FCD34D',
        paleYellow: '#FEF3C7',
        white: '#FFFFFF',         // 흰색
    }
};



LocaleConfig.locales['ko'] = { monthNames: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'], monthNamesShort: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'], dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'], dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'], today: '오늘' };
LocaleConfig.defaultLocale = 'ko';

// --- 재사용 컴포넌트 ---
const SelectionModal = ({ visible, title, options, selected, onSelect, onClose, isMultiSelect = false, styles, colors }) => {
    const handleSelect = (item) => {
        if (isMultiSelect) {
            let newSelected = [...selected];
            if (newSelected.includes(item)) {
                newSelected = newSelected.filter(i => i !== item);
            } else if (newSelected.length < 3) {
                newSelected.push(item);
            } else {
                Alert.alert("선택 제한", "최대 3개까지 선택할 수 있습니다.");
            }
            onSelect(newSelected);
        } else {
            onSelect(item);
            onClose();
        }
    };
    return (
        <Modal visible={visible} transparent={true} animationType="fade" onRequestClose={onClose}>
            <Pressable style={styles.centeredView} onPress={onClose}>
                <Pressable style={styles.modalView}>
                    <Text style={styles.modalTitle}>{title}</Text>
                    <ScrollView 
                        style={{width: '100%', maxHeight: 300}}
                        showsVerticalScrollIndicator={false}
                        contentContainerStyle={{paddingBottom: 10}}
                    >
                        {options.map(item => (
                            <TouchableOpacity key={item} style={[styles.optionButton, (isMultiSelect ? selected.includes(item) : selected === item) && styles.optionButtonSelected]} onPress={() => handleSelect(item)}>
                                <Text style={[styles.optionButtonText, (isMultiSelect ? selected.includes(item) : selected === item) && styles.optionButtonTextSelected]}>{item}</Text>
                            </TouchableOpacity>
                        ))}
                    </ScrollView>
                    {isMultiSelect && <Pressable style={[styles.button, styles.buttonClose]} onPress={onClose}><Text style={styles.textStyleBlack}>선택 완료</Text></Pressable>}
                </Pressable>
            </Pressable>
        </Modal>
    );
};

const NumberScroller = ({ onSelect, initialValue = 4, styles }) => {
    const numbers = Array.from({ length: 9 }, (_, i) => i + 2); // 2 to 10
    const scrollViewRef = useRef(null);

    useEffect(() => {
        const initialIndex = numbers.indexOf(initialValue);
        if (initialIndex !== -1 && scrollViewRef.current) {
            setTimeout(() => scrollViewRef.current.scrollTo({ y: initialIndex * 50, animated: false }), 100);
        }
    }, [initialValue]);

    return (
        <View style={styles.scrollerContainer}>
            <ScrollView
                ref={scrollViewRef}
                style={styles.scroller}
                onMomentumScrollEnd={(event) => {
                    const index = Math.round(event.nativeEvent.contentOffset.y / 50);
                    onSelect(numbers[index]);
                }}
                snapToInterval={50}
                showsVerticalScrollIndicator={false}
                decelerationRate="fast"
            >
                {numbers.map(num => (
                    <View key={num} style={styles.scrollerItem}>
                        <Text style={styles.scrollerItemText}>{num}명</Text>
                    </View>
                ))}
            </ScrollView>
            <View style={styles.scrollerIndicator} />
        </View>
    );
};

// --- 테마 관리 함수 ---

LocaleConfig.locales['ko'] = { monthNames: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'], monthNamesShort: ['1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.', '11.', '12.'], dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'], dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'], today: '오늘' };
LocaleConfig.defaultLocale = 'ko';

// --- 홈 탭 --- (HomeScreen은 screens/HomeScreen.js로 분리됨)


        
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        fetch(`${RENDER_SERVER_URL}/events/${myEmployeeId}`).then(res => res.json()).then(data => {
    if (!data || typeof data !== 'object') return;
    const newMarkedDates = {};
    const upcoming = [];

    // 1. 오늘부터 7일간의 '나의 점심 약속'만 upcoming에 넣기 (UI용)
    for (let i = 0; i < 7; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        const dateString = toLocalDateString(date);
        const eventsOnDate = data[dateString] || [];
        const todayString = toLocalDateString(today);
        if (dateString >= todayString) {
            upcoming.push({ date: dateString, events: eventsOnDate });
        }
    }

    // 2. 데이터에 있는 모든 날짜를 markedDates에 표시 (달력 동그라미) - 과거/미래 모두 포함
    Object.keys(data).forEach(dateString => {
        const eventsOnDate = data[dateString] || [];
        if (eventsOnDate.length > 0) {
            // 일정 타입별로 색상 결정
            let hasRandomLunch = false;
            let hasPersonalSchedule = false;
            let hasOtherEvents = false;
            eventsOnDate.forEach(event => {
                if (event.type === '랜덤 런치') {
                    hasRandomLunch = true;
                } else if (event.type === '개인 일정') {
                    hasPersonalSchedule = true;
                } else {
                    hasOtherEvents = true;
                }
            });
            // 우선순위: 랜덤런치 > 개인일정 > 기타
            let dotColor;
            if (hasRandomLunch) {
                dotColor = '#F4D160';
            } else if (hasPersonalSchedule) {
                dotColor = currentColors.gray;
            } else {
                dotColor = currentColors.primary;
            }
            newMarkedDates[dateString] = {
                selected: true,
                selectedColor: dotColor,
                selectedTextColor: '#FFFFFF'
            };
        }
    });

    setAppointments(upcoming);
    setMarkedDates(newMarkedDates);
    // 전체 이벤트 데이터를 저장 (달력 클릭 시 사용)
    setAllEvents(data);
}).catch(console.error);

        fetch(`${RENDER_SERVER_URL}/match/status/${myEmployeeId}`).then(res => res.json()).then(data => {
            if (!data) return;
            setMatchStatus(data.status);
            if (data.status === 'waiting' && data.countdown_target) {
                countdownIntervalRef.current = setInterval(() => {
                    const diff = new Date(data.countdown_target) - new Date();
                    if (diff <= 0) {
                        clearInterval(countdownIntervalRef.current);
                        setCountdown('오전 10시! 매칭이 진행 중입니다...');
                        fetchHomeData(); 
                    } else {
                        const hours = Math.floor(diff / (1000 * 60 * 60));
                        const minutes = Math.floor((diff / 1000 / 60) % 60);
                        const seconds = Math.floor((diff / 1000) % 60);
                        setCountdown(`오전 10시 매칭까지 ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);
                    }
                }, 1000);
            } else {
                setCountdown('');
            }
        }).catch(console.error);

    }, []);

    useFocusEffect(fetchHomeData);
    
    useEffect(() => { return () => { if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current); }; }, []);

    const handleMatchPress = async () => {
        // 스마트 랜덤 런치 화면으로 이동
        navigation.navigate('파티', { screen: 'RandomLunch' });
    };
    
    const handleConfirmMatch = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/match/confirm`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ group_id: matchProposal.groupId }), });
            const data = await response.json();
            setMatchProposal({ visible: false, group: [], groupId: null });
            Alert.alert("성공!", data.message);
            fetchHomeData();
        } catch (error) { Alert.alert("오류", "매칭 확정 중 문제가 발생했습니다."); }
    };
    
    const handleRejectMatch = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/match/reject`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ group_id: matchProposal.groupId, employee_id: myEmployeeId }), });
            const data = await response.json();
            setMatchProposal({ visible: false, group: [], groupId: null });
            Alert.alert("알림", data.message);
            fetchHomeData();
        } catch (error) { Alert.alert("오류", "매칭 거절 중 문제가 발생했습니다."); }
    };

    const goToAddPersonalSchedule = (date) => {
        setModalData({ visible: false, events: [] });
        navigation.navigate("파티", { screen: "CreatePersonalSchedule", params: { date } });
    };

    // 개인 일정 추가 후 홈 데이터 새로고침을 위한 리스너
    useFocusEffect(useCallback(() => {
        const unsubscribe = navigation.addListener('focus', () => {
            fetchHomeData();
        });
        return unsubscribe;
    }, [navigation]));

    const handleEditPersonalSchedule = (event) => {
        setModalData({ visible: false, events: [] });
        navigation.navigate('파티', { screen: 'EditPersonalSchedule', params: { schedule: event } });
    };

    const handleDeletePersonalSchedule = (scheduleId) => {
        Alert.alert("일정 삭제", "정말로 이 점심 약속을 삭제하시겠습니까?", [
            { text: "취소", style: "cancel" },
            { text: "삭제", style: "destructive", onPress: async () => {
                const response = await fetch(`${RENDER_SERVER_URL}/personal_schedules/${scheduleId}`, { method: 'DELETE' });
                if (response.ok) {
                    Alert.alert("성공", "일정이 삭제되었습니다.");
                    setModalData({ visible: false, events: [] });
                    fetchHomeData();
                } else { Alert.alert("오류", "삭제에 실패했습니다."); }
            }}
        ]);
    };

    const renderAppointmentItem = ({ item }) => {
        const date = new Date(item.date);
        const dayOfWeek = ['일', '월', '화', '수', '목', '금', '토'][date.getDay()];
        return (
            <TouchableOpacity style={styles.appointmentCard} onPress={() => { 
                setModalData({ visible: true, events: item.events || [], date: item.date }); 
            }}>
                <Text style={styles.appointmentDate}>{`${date.getDate()}일 (${dayOfWeek})`}</Text>
                {item.events && item.events.length > 0 ? (
                    item.events.map((event, index) => {
                        // 참석자에서 내 닉네임 제외
                        let others = (event.all_members || event.members || []).map(s => s.trim()).filter(name => name.toLowerCase() !== myNickname.trim().toLowerCase());
                        // description에서 시간, 식당, 참석자 파싱 (필드가 없을 때만)
                        let parsedTime = event.time;
                        let parsedRestaurant = event.restaurant;
                        if ((!parsedTime || !parsedRestaurant || others.length === 0) && event.description) {
                            const timeMatch = event.description.match(/시간: ([^\n]+)/);
                            const restaurantMatch = event.description.match(/식당: ([^\n]+)/);
                            const attendeesMatch = event.description.match(/참석자: ([^\n]+)/);
                            if (!parsedTime && timeMatch) parsedTime = timeMatch[1].trim();
                            if (!parsedRestaurant && restaurantMatch) parsedRestaurant = restaurantMatch[1].trim();
                            if (others.length === 0 && attendeesMatch) {
                                others = attendeesMatch[1].split(',').map(s => s.trim()).filter(name => name && name.toLowerCase() !== myNickname.trim().toLowerCase());
                            }
                        }
                        return (
                            <View key={index} style={styles.eventItem}>
                                <Text style={styles.eventTitle} numberOfLines={1}>{event.type === '랜덤 런치' ? '⚡️' : (event.type === '파티' ? '🎉' : '📝')} {event.title}</Text>
                                {/* 시간 표시 */}
                                {parsedTime && <Text style={styles.eventDetail} numberOfLines={1}>⏰ {parsedTime}</Text>}
                                {/* 식당 표시 */}
                                {parsedRestaurant && <Text style={styles.eventDetail} numberOfLines={1}>🍽️ {parsedRestaurant}</Text>}
                                {/* 참석자(내 닉네임 제외) */}
                                {others.length > 0 && <Text style={styles.eventDetail} numberOfLines={1}>👥 {others.join(', ')}</Text>}
                            </View>
                        );
                    })
                ) : (<View style={{flex: 1, justifyContent: 'center'}}><Text style={styles.noAppointmentText}>약속 없음</Text></View>)}
            </TouchableOpacity>
        );
    };

    const renderRandomLunchCard = () => {
        const isWaiting = matchStatus === 'waiting';
        const isMatched = matchStatus === 'matched';
        
        // 매칭 오픈 시간까지 남은 시간 계산
        const getTimeUntilMatch = () => {
            const now = new Date();
            const today = toLocalDateString(new Date());
            const matchTime = new Date(today.getTime() + (10 * 60 * 60 * 1000)); // 오전 10시
            
            if (now >= matchTime) {
                return null; // 이미 매칭 시간이 지났음
            }
            
            const diff = matchTime - now;
            const hours = Math.floor(diff / (1000 * 60 * 60));
            const minutes = Math.floor((diff / (1000 * 60)) % 60);
            
            return `${hours}시간 ${minutes}분`;
        };
        
        const getCardContent = () => {
            if (isMatched) return { title: '매칭 완료! ✅', description: '오늘의 점심 약속이 확정되었습니다.', icon: 'checkmark-done-circle', color: COLORS.white };
            if (isWaiting) {
                return { title: '매칭 대기 중... ⏳', description: '오전 10시에 매칭이 시작됩니다.\n다시 누르면 대기가 취소됩니다.', icon: 'time', color: COLORS.white };
            }
            return { title: '랜덤 런치 🎲', description: '새로운 동료와 점심 약속을 잡아보세요!', icon: 'shuffle', color: COLORS.white };
        };
        
        const { title, description, icon, color } = getCardContent();
        return (
            <TouchableOpacity style={[styles.card, {backgroundColor: colors.primary}]} onPress={handleMatchPress} disabled={isMatched}>
                <View style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>
                    <Text style={{color: '#FFFFFF', fontSize: 20, fontWeight: 'bold', marginBottom: 12}}>{title}</Text>
                    <Ionicons name={icon} size={28} color="#FFFFFF" />
                </View>
                <Text style={{color: '#FFFFFF', fontSize: 16, marginTop: 8}}>{description}</Text>
                {isWaiting && countdown ? <Text style={{color: '#FFFFFF', fontSize: 14, fontWeight: 'bold', marginTop: 8}}>{countdown}</Text> : null}
            </TouchableOpacity>
        );
    };
    
    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.homeContainer}>
                <View style={[styles.card, {marginTop: 16}]}><Text style={styles.cardTitle}>오늘의 구내식당 메뉴 🍱</Text><Text style={styles.menuText}>{(todayMenu || []).length > 0 ? todayMenu.join(', ') : '메뉴 정보가 없습니다.'}</Text></View>
                {renderRandomLunchCard()}
                <View style={styles.card}><Text style={styles.cardTitle}>나의 점심 약속 🗓️</Text><FlatList data={appointments || []} renderItem={renderAppointmentItem} keyExtractor={item => item.date} horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={{ paddingVertical: 5 }} /></View>
                <View style={styles.card}><Text style={styles.cardTitle}>달력 📅</Text><Calendar 
                    markedDates={markedDates} 
                    onDayPress={(day) => { 
                        // allEvents에서 해당 날짜의 이벤트를 찾기 (과거/미래 모든 날짜 포함)
                        const events = allEvents[day.dateString] || []; 
                        setModalData({ visible: true, events: events, date: day.dateString }); 
                    }} 
                    theme={{ 
                        selectedDayBackgroundColor: currentColors.primary, 
                        todayTextColor: currentColors.primary, 
                        arrowColor: currentColors.primary,
                        selectedDayTextColor: '#FFFFFF',
                        'stylesheet.calendar.header': { 
                            week: { 
                                marginTop: 5, 
                                flexDirection: 'row', 
                                justifyContent: 'space-between' 
                            } 
                        },
                        'stylesheet.day.basic': {
                            base: {
                                width: 32,
                                height: 32,
                                alignItems: 'center',
                                justifyContent: 'center'
                            }
                        }
                    }} 
                /></View>
            </ScrollView>

            <Modal visible={modalData.visible} transparent={true} animationType="fade" onRequestClose={() => setModalData({ ...modalData, visible: false })}>
                <Pressable style={styles.centeredView} onPress={() => setModalData({ ...modalData, visible: false })}>
                    <View style={styles.modalView}>
                        {(modalData.events || []).length > 0 ? (
                            <>
                                <Text style={styles.modalTitle}>{new Date(modalData.events[0].date).toLocaleDateString('ko-KR', { month: 'long', day: 'numeric' })} 점심 약속</Text>
                                <ScrollView style={{width: '100%', maxHeight: SCREEN_HEIGHT * 0.5 }}>
                                    {modalData.events.map((event, index) => (
                                        <View key={index} style={styles.modalDetailCard}>
                                            <Text style={styles.eventTitle}>{event.type === '랜덤 런치' ? '⚡️' : (event.type === '파티' ? '🎉' : '📝')} {event.title}</Text>
                                            {event.type !== '개인 일정' ? (
                                                <>
                                                    <Text style={styles.modalDetailText}>∙ 일시: {event.date} {event.time}</Text>
                                                    <Text style={styles.modalDetailText}>∙ 식당: {event.restaurant}</Text>
                                                    {event.address && <Text style={styles.modalDetailText}>∙ 주소: {event.address}</Text>}
                                                    <Text style={styles.modalDetailText}>∙ 장소: {event.location}</Text>
                                                    <Text style={styles.modalDetailText}>∙ 참석자: {(event.all_members || []).join(', ')}</Text>
                                                    <TouchableOpacity style={[styles.button, {backgroundColor: currentColors.primary, marginTop: 15}]} onPress={() => { setModalData({ visible: false }); navigation.navigate('소통', { screen: 'ChatRoom', params: { chatId: event.id, chatType: 'party', chatTitle: event.title } }); }}><Text style={styles.textStyle}>채팅방으로 이동</Text></TouchableOpacity>
                                                </>
                                            ) : (
                                                <>
                                                    <Text style={styles.modalDetailText}>{event.description || '메모 없음'}</Text>
                                                    <View style={{flexDirection: 'row', justifyContent: 'space-around', marginTop: 15}}>
                                                        <TouchableOpacity style={[styles.button, {backgroundColor: currentColors.primary, width: '48%'}]} onPress={() => handleEditPersonalSchedule(event)}>
                                                            <Text style={[styles.textStyle, {color: '#FFFFFF'}]}>수정</Text>
                                                        </TouchableOpacity>
                                                        <TouchableOpacity style={[styles.button, {backgroundColor: currentColors.gray, width: '48%'}]} onPress={() => handleDeletePersonalSchedule(event.id)}>
                                                            <Text style={[styles.textStyle, {color: '#FFFFFF'}]}>삭제</Text>
                                                        </TouchableOpacity>
                                                    </View>
                                                </>
                                            )}
                                        </View>
                                    ))}
                                </ScrollView>
                            </>
                        ) : ( 
                            <>
<Text style={styles.modalTitle}>점심 약속을 만들어 볼까요?</Text>
<Pressable
  style={{
    backgroundColor: currentColors.yellow,
    borderRadius: 18,
    marginTop: 12,
    marginBottom: 8,
    paddingVertical: 16,
    paddingHorizontal: 20,
    alignItems: 'center',
    elevation: 4,
    width: '100%',
  }}
  onPress={() => { setModalData({ visible: false }); handleMatchPress(); }}
>
  <Text style={{ color: currentColors.deepBlue, fontSize: 16, fontWeight: 'bold' }}>
    🎲 랜덤 런치 시작하기
  </Text>
</Pressable>
<Pressable
  style={{
    backgroundColor: currentColors.primary,
    borderRadius: 18,
    marginTop: 8,
    marginBottom: 8,
    paddingVertical: 16,
    paddingHorizontal: 20,
    alignItems: 'center',
    elevation: 4,
    width: '100%',
  }}
  onPress={() => { setModalData({ visible: false }); navigation.navigate('파티'); }}
>
  <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: 'bold' }}>
    🎉 파티 참여하기
  </Text>
</Pressable>
<Pressable
  style={{
    backgroundColor: currentColors.gray,
    borderRadius: 18,
    marginTop: 8,
    marginBottom: 12,
    paddingVertical: 16,
    paddingHorizontal: 20,
    alignItems: 'center',
    elevation: 4,
    width: '100%',
  }}
  onPress={() => goToAddPersonalSchedule(modalData.date)}
>
  <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: 'bold' }}>
    📝 개인 점심 약속 추가
  </Text>
</Pressable>
</>
)}
</View>
</Pressable>
</Modal>
            
            {/* 플로팅 빠른 액션 버튼 */}
            <TouchableOpacity
                style={{
                    position: 'absolute',
                    right: 24,
                    bottom: 32,
                    width: 56,
                    height: 56,
                    borderRadius: 28,
                    backgroundColor: currentColors.primary,
                    justifyContent: 'center',
                    alignItems: 'center',
                    zIndex: 10,
                    elevation: 8,
                    shadowColor: currentColors.primary,
                    shadowOffset: { width: 0, height: 4 },
                    shadowOpacity: 0.3,
                    shadowRadius: 8
                }}
                activeOpacity={0.85}
                onPress={() => {
                    const today = toLocalDateString(new Date());
                    setModalData({ visible: true, events: [], date: today });
                }}
            >
                <Ionicons name="add" size={32} color="#fff" />
            </TouchableOpacity>
        </SafeAreaView>
    );
}

// --- 새로운 랜덤 런치 시스템 화면들 ---
function SelectLunchDateScreen({ navigation }) {
    const [availableDates, setAvailableDates] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetchAvailableDates();
    }, []);

    const fetchAvailableDates = async () => {
        try {
            setLoading(true);
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/available-dates?employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                // 오늘 이후(오늘 포함) 날짜만 남기기
                const today = new Date();
                today.setHours(0, 0, 0, 0); // 오늘 00:00

                const filteredDates = data.filter(d => {
                    // d가 'YYYY-MM-DD' 문자열이면, 항상 UTC 기준으로 해석
                    const dateObj = new Date(d + 'T00:00:00Z');
                    // 한국 시간(UTC+9)으로 변환
                    const koreaDate = new Date(dateObj.getTime() + 9 * 60 * 60 * 1000);
                    koreaDate.setHours(0, 0, 0, 0);
                    
                    return koreaDate > today; // 오늘보다 큰 날짜(내일부터)만 남김
                });
                
                setAvailableDates(filteredDates);
} else {
    Alert.alert('오류', data.message || '날짜 정보를 가져오는데 실패했습니다.');
}
        } catch (error) {
            console.error('날짜 조회 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        } finally {
            setLoading(false);
        }
    };

    const handleDateSelect = (date) => {
        navigation.navigate('SuggestGroupScreen', { selectedDate: date });
    };

    const renderDateButton = ({ item }) => {
        const date = new Date(item);
        const dayOfWeek = ['일', '월', '화', '수', '목', '금', '토'][date.getDay()];
        const isToday = new Date().toDateString() === date.toDateString();
        
        return (
            <TouchableOpacity 
                style={[styles.dateButton, isToday && styles.todayButton]} 
                onPress={() => handleDateSelect(item)}
            >
                <Text style={[styles.dateButtonText, isToday && styles.todayButtonText]}>
                    {date.getDate()}일
                </Text>
                <Text style={[styles.dateButtonSubText, isToday && styles.todayButtonText]}>
                    ({dayOfWeek})
                </Text>
                {isToday && <Text style={styles.todayLabel}>오늘</Text>}
            </TouchableOpacity>
        );
    };

    if (loading) {
        return (
            <SafeAreaView style={styles.safeArea}>
                <View style={styles.loadingContainer}>
                    <ActivityIndicator size="large" color={COLORS.primary} />
                    <Text style={styles.loadingText}>날짜 정보를 불러오는 중...</Text>
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.safeArea}>
            <View style={styles.header}>
                <View style={{width: 24}} />
            </View>
            
            <ScrollView style={styles.container}>
                <View style={[styles.card, {marginTop: 16}]}>
                    <Text style={styles.cardTitle}>언제 점심을 먹으시겠어요? 🍽️</Text>
                    <Text style={styles.cardDescription}>
                        약속이 없는 날짜를 선택해주세요.
                    </Text>
                </View>
                
                <FlatList
                    data={availableDates}
                    renderItem={renderDateButton}
                    keyExtractor={item => item}
                    numColumns={3}
                    contentContainerStyle={styles.dateGrid}
                    scrollEnabled={false}
                />
            </ScrollView>
        </SafeAreaView>
    );
}

function SuggestGroupScreen({ navigation, route }) {
    const { selectedDate } = route.params;
    const [suggestedGroups, setSuggestedGroups] = useState([]);
    const [loading, setLoading] = useState(true);
    const [currentGroupIndex, setCurrentGroupIndex] = useState(0);
    const [proposedGroups, setProposedGroups] = useState(new Set());

    useEffect(() => {
        fetchSuggestedGroups();
    }, []);

    useEffect(() => {
        if (suggestedGroups.length > 0) {
            fetchMyProposals();
        }
    }, [suggestedGroups]);

    // 화면이 포커스될 때마다 제안 상태 새로고침
    useFocusEffect(
        useCallback(() => {
            fetchMyProposals();
        }, [])
    );

    const fetchMyProposals = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/mine?employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                const sentProposals = data.sent_proposals || [];
                const pendingProposals = sentProposals.filter(p => p.status === 'pending');
                const proposedGroupKeys = new Set();
                pendingProposals.forEach(proposal => {
                    if (proposal.recipient_ids) {
                        // 여기 두 줄이 중요!
                        const ids = parseRecipientIds(proposal.recipient_ids);
                        const groupKey = getGroupKeyFromIds(ids);
                        proposedGroupKeys.add(groupKey);
                    }
                });
                setProposedGroups(proposedGroupKeys);
            }
        } catch (error) {
            console.error('제안 상태 조회 오류:', error);
        }
    };

    const fetchSuggestedGroups = async () => {
        try {
            setLoading(true);
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/suggest-groups`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    employee_id: myEmployeeId,
                    date: selectedDate
                })
            });
            const data = await response.json();
            if (response.ok) {
                setSuggestedGroups(data);
            } else {
                Alert.alert('오류', data.message || '추천 그룹을 가져오는데 실패했습니다.');
            }
        } catch (error) {
            console.error('그룹 추천 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        } finally {
            setLoading(false);
        }
    };

    const handleProposeGroup = async (group) => {
        // 그룹 키 생성 (사용자 ID들을 정렬하여 일관성 있는 키 생성)
        const groupUserIds = group.users
            .map(user => user.employee_id)
            .filter(id => id && id.trim().length > 0)
            .sort();
        const groupKey = getGroupKeyFromIds(groupUserIds);
        
        // 이미 제안한 그룹이면 취소
        if (proposedGroups.has(groupKey)) {
            try {
                // 해당 날짜에 내가 보낸 제안 찾기
                const response = await fetch(`${RENDER_SERVER_URL}/proposals/mine?employee_id=${myEmployeeId}`);
                const data = await response.json();
                
                if (response.ok) {
                    const sentProposals = data.sent_proposals || [];
                    
                    // 해당 그룹에 해당하는 제안 찾기
                    const myProposal = sentProposals.find(proposal => {
                        if (proposal.proposed_date !== selectedDate || proposal.status !== 'pending') {
                            return false;
                        }
                        
                        if (proposal.recipient_ids) {
                            const recipientIds = parseRecipientIds(proposal.recipient_ids);
                            return getGroupKeyFromIds(recipientIds) === groupKey;
                        }
                        return false;
                    });
                    
                    if (myProposal) {
                        const cancelResponse = await fetch(`${RENDER_SERVER_URL}/proposals/${myProposal.id}/cancel`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ employee_id: myEmployeeId })
                        });
                        
                        if (cancelResponse.ok) {
                            setProposedGroups(prev => {
                                const newSet = new Set(prev);
                                newSet.delete(groupKey);
                                return newSet;
                            });
                            Alert.alert('알림', '제안이 취소되었습니다.');
                            fetchMyProposals();
                        } else {
                            Alert.alert('오류', '제안 취소에 실패했습니다.');
                        }
                    }
                }
            } catch (error) {
                console.error('제안 취소 오류:', error);
                Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
            }
            fetchMyProposals();
            return;
        }

        try {
            const recipientIds = group.users
                .map(user => user.employee_id)
                .filter(id => id && id.trim().length > 0);
            const response = await fetch(`${RENDER_SERVER_URL}/proposals`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    proposer_id: myEmployeeId,
                    recipient_ids: recipientIds,
                    proposed_date: selectedDate
                })
            });
            const data = await response.json();
            if (response.ok) {
                // 즉시 UI 업데이트
                setProposedGroups(prev => new Set([...prev, groupKey]));
                Alert.alert('성공', '제안이 전송되었습니다.');
                fetchMyProposals();
            } else {
                Alert.alert('오류', data.message || '제안에 실패했습니다.');
            }
        } catch (error) {
            console.error('제안 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
        fetchMyProposals();
    };

    const renderUserCard = ({ item }) => (
        <View style={{
            backgroundColor: currentColors.surface,
            borderRadius: 16,
            padding: 16,
            marginBottom: 12,
            elevation: 2,
            shadowColor: currentColors.primary,
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.1,
            shadowRadius: 4,
            borderWidth: 1,
            borderColor: 'rgba(59, 130, 246, 0.1)'
        }}>
            <View style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8}}>
                <Text style={{fontSize: 16, fontWeight: 'bold', color: currentColors.text}}>{item.nickname}</Text>
                <View style={{
                    backgroundColor: currentColors.yellow,
                    borderRadius: 12,
                    paddingVertical: 4,
                    paddingHorizontal: 8
                }}>
                    <Text style={{color: currentColors.deepBlue, fontSize: 'bold', fontSize: 12}}>추천</Text>
                </View>
            </View>
            {item.lunch_preference && (
                <Text style={{fontSize: 14, color: currentColors.textSecondary, marginBottom: 4}}>🍽️ {item.lunch_preference}</Text>
            )}
            {item.main_dish_genre && (
                <Text style={{fontSize: 14, color: currentColors.textSecondary}}>🍜 {item.main_dish_genre}</Text>
            )}
        </View>
    );

    const renderGroupCard = ({ item, index }) => {
        // 그룹 키 생성
        const groupUserIds = item.users
            .map(user => user.employee_id)
            .filter(id => id && id.trim().length > 0)
            .sort();
        const groupKey = getGroupKeyFromIds(groupUserIds);
        
        return (
            <View style={{
                backgroundColor: currentColors.surface,
                borderRadius: 20,
                padding: 20,
                marginHorizontal: 16,
                marginBottom: 16,
                elevation: 3,
                shadowColor: currentColors.primary,
                shadowOffset: { width: 0, height: 4 },
                shadowOpacity: 0.1,
                shadowRadius: 8,
                borderWidth: 1,
                borderColor: 'rgba(59, 130, 246, 0.1)'
            }}>
                <View style={{marginBottom: 16}}>
                    <Text style={{fontSize: 20, fontWeight: 'bold', color: currentColors.primary, marginBottom: 8}}>
                        추천 그룹 {index + 1}
                    </Text>
                    <Text style={{fontSize: 14, color: currentColors.textSecondary}}>
                        성향이 맞는 동료들과 함께 점심을 먹어보세요!
                    </Text>
                </View>
                
                <FlatList
                    data={item.users}
                    renderItem={renderUserCard}
                    keyExtractor={(user, index) => `user-${user.employee_id}-${index}`}
                    scrollEnabled={false}
                />
                
                <TouchableOpacity 
                    style={{
                        backgroundColor: proposedGroups.has(groupKey) ? currentColors.gray : currentColors.primary,
                        borderRadius: 16,
                        padding: 16,
                        marginTop: 16,
                        elevation: 3,
                        shadowColor: currentColors.primary,
                        shadowOffset: { width: 0, height: 2 },
                        shadowOpacity: 0.2,
                        shadowRadius: 4
                    }}
                    onPress={() => handleProposeGroup(item)}
                >
                    <Text style={{
                        color: '#FFFFFF',
                        fontWeight: 'bold',
                        textAlign: 'center',
                        fontSize: 16
                    }}>
                        {proposedGroups.has(groupKey) ? '제안 대기중...' : '이 그룹에 제안하기'}
                    </Text>
                </TouchableOpacity>
            </View>
        );
    };

    if (loading) {
        return (
            <SafeAreaView style={styles.safeArea}>
                <View style={{
                    flex: 1,
                    justifyContent: 'center',
                    alignItems: 'center',
                    padding: 20,
                    backgroundColor: currentColors.background
                }}>
                    <ActivityIndicator size="large" color={currentColors.primary} />
                    <Text style={{
                        fontSize: 16,
                        color: currentColors.textSecondary,
                        marginTop: 16
                    }}>추천 그룹을 찾는 중...</Text>
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.safeArea}>
            <View style={styles.header}>
                <View style={{width: 24}} />
            </View>
            
            <View style={styles.container}>
                <View style={{
                    backgroundColor: currentColors.surface,
                    borderRadius: 20,
                    padding: 20,
                    marginHorizontal: 16,
                    marginBottom: 16,
                    elevation: 3,
                    shadowColor: currentColors.primary,
                    shadowOffset: { width: 0, height: 4 },
                    shadowOpacity: 0.1,
                    shadowRadius: 8,
                    borderWidth: 1,
                    borderColor: 'rgba(59, 130, 246, 0.1)'
                }}>
                    <Text style={{
                        fontSize: 20,
                        fontWeight: 'bold',
                        marginBottom: 12,
                        color: currentColors.primary
                    }}>
                        {new Date(selectedDate).toLocaleDateString('ko-KR', { 
                            month: 'long', 
                            day: 'numeric' 
                        })} 추천 그룹
                    </Text>
                    <Text style={{
                        fontSize: 16,
                        color: currentColors.textSecondary,
                        lineHeight: 24
                    }}>
                        성향이 맞는 동료들과 함께 점심을 먹어보세요!
                        {suggestedGroups.length > 1 && ' 좌우로 스와이프하여 다른 그룹도 확인해보세요.'}
                    </Text>
                </View>
                
                {suggestedGroups.length > 0 ? (
                    <>
                        <FlatList
                            data={suggestedGroups}
                            renderItem={renderGroupCard}
                            keyExtractor={item => `group-${item.group_id}`}
                            horizontal
                            pagingEnabled
                            showsHorizontalScrollIndicator={false}
                            onMomentumScrollEnd={(event) => {
                                const index = Math.round(event.nativeEvent.contentOffset.x / (SCREEN_WIDTH - 32));
                                setCurrentGroupIndex(index);
                            }}
                            contentContainerStyle={{ paddingHorizontal: 0 }}
                        />
                        
                        {suggestedGroups.length > 1 && (
                            <View style={{
                                flexDirection: 'row',
                                justifyContent: 'center',
                                alignItems: 'center',
                                marginTop: 20,
                                marginBottom: 20
                            }}>
                                {suggestedGroups.map((_, index) => (
                                    <View
                                        key={index}
                                        style={{
                                            width: 8,
                                            height: 8,
                                            borderRadius: 4,
                                            backgroundColor: index === currentGroupIndex ? currentColors.primary : currentColors.lightGray,
                                            marginHorizontal: 4
                                        }}
                                    />
                                ))}
                            </View>
                        )}
                    </>
                ) : (
                    <View style={{
                        flex: 1,
                        justifyContent: 'center',
                        alignItems: 'center',
                        padding: 20,
                        backgroundColor: currentColors.background
                    }}>
                        <Text style={{
                            fontSize: 16,
                            color: currentColors.textSecondary,
                            textAlign: 'center',
                            marginTop: 50
                        }}>
                            해당 날짜에 추천할 수 있는 동료가 없습니다.
                        </Text>
                    </View>
                )}
            </View>
        </SafeAreaView>
    );
}

function MyProposalsScreen({ navigation }) {
    const [proposals, setProposals] = useState({ sent_proposals: [], received_proposals: [] });
    const [loading, setLoading] = useState(true);
    const [expandedProposals, setExpandedProposals] = useState(new Set());
    const [groupMembersMap, setGroupMembersMap] = useState({});
    const [confirmedGroups, setConfirmedGroups] = useState([]);

    useEffect(() => {
        fetchMyProposals();
        fetchConfirmedGroups();
    }, []);

    // 화면이 포커스될 때마다 제안 목록 새로고침
    useFocusEffect(
        useCallback(() => {
            fetchMyProposals();
            fetchConfirmedGroups();
        }, [])
    );

    const fetchConfirmedGroups = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/parties?employee_id=${myEmployeeId}&is_from_match=true`);
            const data = await response.json();
            if (response.ok && Array.isArray(data)) {
                // 오늘 이후의 랜덤런치만 필터링
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const filteredData = data.filter(party => {
                    const partyDate = new Date(party.party_date);
                    return partyDate >= today;
                });
                setConfirmedGroups(filteredData);
            }
        } catch (error) {
            console.error('성사된 그룹 조회 오류:', error);
        }
    };

    const handleRejectProposal = async (proposalId) => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/${proposalId}/reject`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ user_id: myEmployeeId })
            });
            const data = await response.json();
            if (response.ok) {
                Alert.alert('알림', data.message || '제안을 거절했습니다.');
                fetchMyProposals(); // 목록 새로고침
            } else {
                Alert.alert('오류', data.message || '거절에 실패했습니다.');
            }
        } catch (error) {
            console.error('제안 거절 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    const fetchMyProposals = async () => {
        try {
            setLoading(true);
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/mine?employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                // 오늘 이후의 제안만 필터링하고 취소된 제안 제거
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                const filterProposals = (proposals) => {
                    return proposals.filter(p => {
                        // 취소된 제안 제거
                        if (p.status === 'cancelled') return false;
                        
                        // 오늘 이후의 제안만 포함
                        const proposalDate = new Date(p.proposed_date);
                        return proposalDate >= today;
                    });
                };
                
                const filteredData = {
                    sent_proposals: filterProposals(data.sent_proposals || []),
                    received_proposals: filterProposals(data.received_proposals || [])
                };
                setProposals(filteredData);
                
                // 보낸 제안들의 그룹 멤버 정보를 바로 가져오기
                const sentProposals = filteredData.sent_proposals || [];
                for (const proposal of sentProposals) {
                    if (proposal.recipient_ids) {
                        fetchGroupMembers(proposal.id, proposal.recipient_ids);
                    }
                }
            } else {
                Alert.alert('오류', data.message || '제안 목록을 가져오는데 실패했습니다.');
            }
        } catch (error) {
            console.error('제안 목록 조회 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        } finally {
            setLoading(false);
        }
    };

    const handleAcceptProposal = async (proposalId) => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/${proposalId}/accept`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ user_id: myEmployeeId })
            });
            const data = await response.json();
            
            if (response.ok) {
                if (data.status === 'confirmed') {
                    Alert.alert('성공!', '매칭이 성사되었습니다!');
                } else {
                    Alert.alert('알림', data.message);
                }
                fetchMyProposals();
            } else {
                Alert.alert('오류', data.message || '수락에 실패했습니다.');
            }
        } catch (error) {
            console.error('제안 수락 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    const handleCancelProposal = async (proposalId) => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/${proposalId}/cancel`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ user_id: myEmployeeId })
            });
            const data = await response.json();
            
            if (response.ok) {
                Alert.alert('알림', data.message);
                // 목록에서 즉시 제거
                setProposals(prev => ({
                    sent_proposals: prev.sent_proposals.filter(p => p.id !== proposalId),
                    received_proposals: prev.received_proposals
                }));
            } else {
                Alert.alert('오류', data.message || '취소에 실패했습니다.');
            }
        } catch (error) {
            console.error('제안 취소 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    const toggleProposalExpansion = (proposalId) => {
        setExpandedProposals(prev => {
            const newSet = new Set(prev);
            if (newSet.has(proposalId)) {
                newSet.delete(proposalId);
            } else {
                newSet.add(proposalId);
            }
            return newSet;
        });
    };

    const fetchGroupMembers = async (proposalId, recipientIds) => {
        try {
            const userIds = parseRecipientIds(recipientIds);
            
            console.log('그룹 멤버 조회:', { proposalId, recipientIds, userIds });
            
            if (userIds.length === 0) {
                console.log('유효한 사용자 ID가 없음');
                setGroupMembersMap(prev => ({
                    ...prev,
                    [proposalId]: []
                }));
                return;
            }
            
            const response = await fetch(`${RENDER_SERVER_URL}/users/batch`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ user_ids: userIds })
            });
            
            console.log('API 응답 상태:', response.status);
            const data = await response.json();
            console.log('API 응답 데이터:', data);
            
            if (response.ok && Array.isArray(data)) {
                setGroupMembersMap(prev => ({
                    ...prev,
                    [proposalId]: data
                }));
                console.log('그룹 멤버 정보 저장 완료:', data);
            } else {
                console.error('API 응답 오류:', data);
                // 에러 시에도 빈 배열로 설정하여 로딩 상태 해제
                setGroupMembersMap(prev => ({
                    ...prev,
                    [proposalId]: []
                }));
            }
        } catch (error) {
            console.error('그룹 멤버 정보 조회 오류:', error);
            // 에러 시에도 빈 배열로 설정하여 로딩 상태 해제
            setGroupMembersMap(prev => ({
                ...prev,
                [proposalId]: []
            }));
        }
    };

    const renderConfirmedGroupItem = ({ item }) => (
        <TouchableOpacity 
            style={{
                backgroundColor: currentColors.surface,
                borderRadius: 16,
                padding: 16,
                marginHorizontal: 6,
                width: SCREEN_WIDTH * 0.5,
                height: 160,
                borderWidth: 2,
                borderColor: currentColors.lightGray,
                justifyContent: 'flex-start',
                elevation: 2,
                shadowColor: currentColors.primary,
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4
            }}
            onPress={() => navigation.navigate('PartyDetail', { partyId: item.id })}
        >
            <View style={{marginBottom: 8}}>
                <Text style={{fontSize: 16, fontWeight: 'bold', color: currentColors.text}}>⚡️ {item.party_date}</Text>
            </View>
            <Text style={{fontSize: 13, color: currentColors.textSecondary, marginBottom: 8}}>
                👥 {item.current_members}명 참여
            </Text>
            <Text style={{fontSize: 13, color: currentColors.textSecondary}}>
                🍽️ {item.restaurant_name}
            </Text>
        </TouchableOpacity>
    );

    const renderProposalItem = ({ item, type }) => {
        const isPending = item.status === 'pending';
        const isReceived = type === 'received';
        const isExpanded = expandedProposals.has(item.id);
        const groupMembers = groupMembersMap[item.id] || [];
        
        // 그룹 멤버 정보 가져오기 (hooks 없이 처리)
        if (isExpanded && type === 'sent' && item.recipient_ids && !groupMembersMap[item.id]) {
            console.log('그룹 멤버 정보 요청:', { proposalId: item.id, recipientIds: item.recipient_ids });
            fetchGroupMembers(item.id, item.recipient_ids);
        }
        
        return (
            <View style={{
                backgroundColor: currentColors.surface,
                borderRadius: 16,
                marginHorizontal: 16,
                marginBottom: 12,
                padding: 16,
                elevation: 2,
                shadowColor: currentColors.primary,
                shadowOffset: { width: 0, height: 2 },
                shadowOpacity: 0.1,
                shadowRadius: 4,
                borderWidth: 1,
                borderColor: 'rgba(99, 102, 241, 0.2)'
            }}>
                <TouchableOpacity 
                    style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}
                    onPress={() => toggleProposalExpansion(item.id)}
                >
                    <Text style={{fontSize: 16, fontWeight: 'bold', color: currentColors.text}}>
                        {new Date(item.proposed_date).toLocaleDateString('ko-KR', { 
                            month: 'long', 
                            day: 'numeric' 
                        })}
                    </Text>
                    <View style={{flexDirection: 'row', alignItems: 'center'}}>
                        <View style={{
                            backgroundColor: item.status === 'confirmed' ? currentColors.success : 
                                          item.status === 'cancelled' ? currentColors.error : 
                                          item.status === 'expired' ? currentColors.warning : currentColors.primaryLight,
                            borderRadius: 20,
                            paddingVertical: 6,
                            paddingHorizontal: 12,
                            marginRight: 8
                        }}>
                            <Text style={{color: item.status === 'confirmed' ? '#FFFFFF' : 
                                         item.status === 'cancelled' ? '#FFFFFF' : 
                                         item.status === 'expired' ? '#FFFFFF' : currentColors.primary, 
                                         fontWeight: 'bold', fontSize: 12}}>
                                {item.status === 'pending' ? '대기중' : 
                                 item.status === 'confirmed' ? '확정' : 
                                 item.status === 'cancelled' ? '취소' : '만료'}
                            </Text>
                        </View>
                        <Ionicons 
                            name={isExpanded ? "chevron-up" : "chevron-down"} 
                            size={20} 
                            color={currentColors.textSecondary} 
                        />
                    </View>
                </TouchableOpacity>
                
                {isExpanded && (
                    <View style={{marginTop: 16, paddingTop: 16, borderTopWidth: 1, borderTopColor: currentColors.lightGray}}>
                        {type === 'sent' && (
                            <View style={{marginBottom: 12}}>
                                <Text style={{fontSize: 14, fontWeight: 'bold', color: currentColors.text, marginBottom: 8}}>제안한 그룹:</Text>
                                {(groupMembers && groupMembers.length > 0) ? (
                                    groupMembers.map((member, index) => (
                                        <View key={index} style={{marginBottom: 8}}>
                                            <Text style={{fontSize: 14, color: currentColors.text, fontWeight: '600'}}>{member.nickname || member.employee_id}</Text>
                                            <Text style={{fontSize: 12, color: currentColors.textSecondary, marginLeft: 16}}>
                                                🍽️ {member.lunch_preference || '-'}
                                                {member.dining_history && `  |  ${member.dining_history}`}
                                            </Text>
                                            {member.main_dish_genre && (
                                                <Text style={{fontSize: 12, color: currentColors.textSecondary, marginLeft: 16}}>🍜 {member.main_dish_genre}</Text>
                                            )}
                                        </View>
                                    ))
                                ) : (
                                    <View style={{marginBottom: 8}}>
                                        <Text style={{fontSize: 12, color: currentColors.textSecondary}}>
                                            {item.recipient_ids ? '참여자 정보를 불러오는 중...' : '참여자 정보 없음'}
                                        </Text>
                                        {item.recipient_ids && (
                                            <Text style={{fontSize: 10, color: currentColors.textSecondary, marginTop: 4}}>
                                                ID: {item.recipient_ids}
                                            </Text>
                                        )}
                                    </View>
                                )}
                            </View>
                        )}
                        
                        {item.accepted_nicknames && item.accepted_nicknames.length > 0 && (
                            <Text style={{fontSize: 14, color: currentColors.success, fontWeight: '600', marginBottom: 8}}>
                                수락한 사람: {item.accepted_nicknames.join(', ')}
                            </Text>
                        )}
                
                        {isReceived && isPending && (
                            <View style={{flexDirection: 'row', justifyContent: 'space-between', marginTop: 12}}>
                                <TouchableOpacity 
                                    style={{
                                        backgroundColor: currentColors.primary,
                                        borderRadius: 12,
                                        paddingVertical: 10,
                                        paddingHorizontal: 20,
                                        flex: 1,
                                        marginRight: 8,
                                        alignItems: 'center'
                                    }}
                                    onPress={() => handleAcceptProposal(item.id)}
                                >
                                    <Text style={{color: '#FFFFFF', fontWeight: 'bold', fontSize: 14}}>
                                        수락
                                    </Text>
                                </TouchableOpacity>
                                <TouchableOpacity 
                                    style={{
                                        backgroundColor: currentColors.error,
                                        borderRadius: 12,
                                        paddingVertical: 10,
                                        paddingHorizontal: 20,
                                        flex: 1,
                                        marginLeft: 8,
                                        alignItems: 'center'
                                    }}
                                       onPress={() => {
        Alert.alert('거절', '이 제안을 거절하시겠습니까?', [
            { text: '취소', style: 'cancel' },
            { text: '확인', style: 'destructive', onPress: () => handleRejectProposal(item.id) }
        ]);
    }}
>
    <Text style={{color: '#FFFFFF', fontWeight: 'bold', fontSize: 14}}>
        거절
    </Text>
</TouchableOpacity>
                             </View>
                         )}
                         
                        {type === 'sent' && isPending && (
                            <TouchableOpacity 
                                style={{
                                    backgroundColor: currentColors.gray,
                                    borderRadius: 12,
                                    paddingVertical: 10,
                                    paddingHorizontal: 20,
                                    marginTop: 12,
                                    alignItems: 'center'
                                }}
                                onPress={() => {
                                    Alert.alert('제안 취소', '이 제안을 취소하시겠습니까?', [
                                        { text: '취소', style: 'cancel' },
                                        { text: '확인', style: 'destructive', onPress: () => handleCancelProposal(item.id) }
                                    ]);
                                }}
                            >
                                <Text style={{color: '#FFFFFF', fontWeight: 'bold', fontSize: 14}}>
                                    제안 취소
                                </Text>
                            </TouchableOpacity>
                        )}
                    </View>
                )}
            </View>
        );
    };

    if (loading) {
        return (
            <SafeAreaView style={styles.safeArea}>
                <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
                    <ActivityIndicator size="large" color={currentColors.primary} />
                    <Text style={{fontSize: 16, color: currentColors.textSecondary, marginTop: 16}}>제안 목록을 불러오는 중...</Text>
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView style={{flex: 1, backgroundColor: currentColors.background}}>
                {/* 매칭 성공한 점심 모임 */}
                {confirmedGroups.length > 0 && (
                    <View style={{marginBottom: 24}}>
                        <Text style={{fontSize: 20, fontWeight: 'bold', marginBottom: 12, color: currentColors.primary, paddingHorizontal: 16, marginTop: 16}}>매칭 성공</Text>
                        <FlatList
                            data={confirmedGroups}
                            renderItem={renderConfirmedGroupItem}
                            keyExtractor={item => `confirmed-${item.id}`}
                            horizontal
                            showsHorizontalScrollIndicator={false}
                            contentContainerStyle={{ paddingHorizontal: 16, paddingVertical: 5 }}
                        />
                    </View>
                )}
                
                <View style={{marginBottom: 24}}>
                    <Text style={{fontSize: 20, fontWeight: 'bold', marginBottom: 12, color: currentColors.primary, paddingHorizontal: 16, marginTop: 16}}>보낸 제안</Text>
                    {proposals.sent_proposals.length > 0 ? (
                        proposals.sent_proposals.map(item => (
                            <View key={item.id}>
                                {renderProposalItem({ item, type: 'sent' })}
                            </View>
                        ))
                    ) : (
                        <Text style={{fontSize: 16, color: currentColors.textSecondary, textAlign: 'center', marginTop: 50, paddingHorizontal: 16}}>보낸 제안이 없습니다.</Text>
                    )}
                </View>
                
                <View style={{marginBottom: 24}}>
                    <Text style={{fontSize: 20, fontWeight: 'bold', marginBottom: 12, color: currentColors.primary, paddingHorizontal: 16, marginTop: 16}}>받은 제안</Text>
                    {proposals.received_proposals.length > 0 ? (
                        proposals.received_proposals.map(item => (
                            <View key={item.id}>
                                {renderProposalItem({ item, type: 'received' })}
                            </View>
                        ))
                    ) : (
                        <Text style={{fontSize: 16, color: currentColors.textSecondary, textAlign: 'center', marginTop: 50, paddingHorizontal: 16}}>받은 제안이 없습니다.</Text>
                    )}
                </View>
            </ScrollView>
        </SafeAreaView>
    );
}

function RestaurantsScreen({ navigation }) {
    const [restaurants, setRestaurants] = useState([]);
    const [recommendations, setRecommendations] = useState({ personal: [], friend: [] });
    const [isLoading, setIsLoading] = useState(true);
    const [searchQuery, setSearchQuery] = useState('');
    const [activeTab, setActiveTab] = useState('all'); // 'all', 'personal', 'friend'
    const [sortBy, setSortBy] = useState('name');
    const [categoryFilter, setCategoryFilter] = useState(null);
    const [isCategoryModalVisible, setCategoryModalVisible] = useState(false);
    const CATEGORY_OPTIONS = ['한식', '중식', '일식', '양식', '분식', '아시안', '퓨전', '기타'];
    
    useFocusEffect(useCallback(() => {
        setIsLoading(true);
        let url = `${RENDER_SERVER_URL}/restaurants?query=${searchQuery}&sort_by=${sortBy}`;
        if (categoryFilter) url += `&category=${categoryFilter}`;
        fetch(url).then(res => res.json()).then(data => { if(Array.isArray(data)) setRestaurants(data); }).catch(err => console.error(err)).finally(() => setIsLoading(false));
        
        // 추천 식당도 함께 가져오기
        fetchRecommendations();
    }, [searchQuery, sortBy, categoryFilter]));

    const fetchRecommendations = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/restaurants/recommend?employee_id=${CURRENT_USER_ID}`);
            if (response.ok) {
                const data = await response.json();
                setRecommendations({
                    personal: data.personal_recommendations || [],
                    friend: data.friend_recommendations || []
                });
            }
        } catch (error) {
            console.error('추천 식당 조회 실패:', error);
        }
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            {/* 검색 및 필터 */}
            <View style={{paddingHorizontal: 16, paddingVertical: 12, backgroundColor: currentColors.background}}>
                <TextInput 
                    style={{
                        backgroundColor: currentColors.surface,
                        borderRadius: 16,
                        padding: 14,
                        fontSize: 16,
                        marginBottom: 12,
                        borderWidth: 1,
                        borderColor: currentColors.lightGray
                    }} 
                    placeholder="맛집 이름 검색..." 
                    placeholderTextColor={currentColors.gray} 
                    value={searchQuery} 
                    onChangeText={setSearchQuery} 
                />
                <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                    <TouchableOpacity
                        style={{
                            backgroundColor: sortBy === 'name' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: sortBy === 'name' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: sortBy === 'name' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: sortBy === 'name' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => setSortBy('name')}
                    >
                        <Text style={{
                            color: sortBy === 'name' ? '#FFFFFF' : currentColors.text,
                            fontWeight: sortBy === 'name' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            이름순
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={{
                            backgroundColor: sortBy === 'rating_desc' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: sortBy === 'rating_desc' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: sortBy === 'rating_desc' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: sortBy === 'rating_desc' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => setSortBy('rating_desc')}
                    >
                        <Text style={{
                            color: sortBy === 'rating_desc' ? '#FFFFFF' : currentColors.text,
                            fontWeight: sortBy === 'rating_desc' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            ⭐별점순
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={{
                            backgroundColor: sortBy === 'reviews_desc' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: sortBy === 'reviews_desc' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: sortBy === 'reviews_desc' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: sortBy === 'reviews_desc' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => setSortBy('reviews_desc')}
                    >
                        <Text style={{
                            color: sortBy === 'reviews_desc' ? '#FFFFFF' : currentColors.text,
                            fontWeight: sortBy === 'reviews_desc' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            💬리뷰순
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={{
                            backgroundColor: categoryFilter ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: categoryFilter ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: categoryFilter ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: categoryFilter ? currentColors.primary : currentColors.lightGray,
                            flexDirection: 'row',
                            alignItems: 'center'
                        }}
                        onPress={() => setCategoryModalVisible(true)}
                    >
                        <Ionicons name="filter" size={16} color={categoryFilter ? '#FFFFFF' : currentColors.gray} />
                        <Text style={{
                            color: categoryFilter ? '#FFFFFF' : currentColors.text,
                            fontWeight: categoryFilter ? 'bold' : '600',
                            fontSize: 14,
                            marginLeft: 4
                        }}>
                            {categoryFilter || '카테고리'}
                        </Text>
                        {categoryFilter && (
                            <TouchableOpacity onPress={() => setCategoryFilter(null)} style={{marginLeft: 4}}>
                                <Ionicons name="close-circle" size={16} color="#FFFFFF" />
                            </TouchableOpacity>
                        )}
                    </TouchableOpacity>
                </ScrollView>
            </View>

            <SelectionModal visible={isCategoryModalVisible} title="카테고리 필터" options={CATEGORY_OPTIONS} selected={categoryFilter} onSelect={setCategoryFilter} onClose={() => setCategoryModalVisible(false)} styles={styles} colors={currentColors} />
            
            {/* 탭 네비게이션 */}
            <View style={{paddingHorizontal: 16, paddingVertical: 12, backgroundColor: currentColors.background}}>
                <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                    <TouchableOpacity
                        style={{
                            backgroundColor: activeTab === 'all' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: activeTab === 'all' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: activeTab === 'all' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: activeTab === 'all' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => setActiveTab('all')}
                    >
                        <Text style={{
                            color: activeTab === 'all' ? '#FFFFFF' : currentColors.text,
                            fontWeight: activeTab === 'all' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            전체
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={{
                            backgroundColor: activeTab === 'personal' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: activeTab === 'personal' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: activeTab === 'personal' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: activeTab === 'personal' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => setActiveTab('personal')}
                    >
                        <Text style={{
                            color: activeTab === 'personal' ? '#FFFFFF' : currentColors.text,
                            fontWeight: activeTab === 'personal' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            개인 추천
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={{
                            backgroundColor: activeTab === 'friend' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: activeTab === 'friend' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: activeTab === 'friend' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: activeTab === 'friend' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => setActiveTab('friend')}
                    >
                        <Text style={{
                            color: activeTab === 'friend' ? '#FFFFFF' : currentColors.text,
                            fontWeight: activeTab === 'friend' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            친구 추천
                        </Text>
                    </TouchableOpacity>
                </ScrollView>
            </View>
            
            {isLoading ? (
                <ActivityIndicator size="large" style={{marginTop: 20}} color={currentColors.primary} />
            ) : (
                <FlatList 
                    data={
                        activeTab === 'all' ? restaurants :
                        activeTab === 'personal' ? recommendations.personal :
                        activeTab === 'friend' ? recommendations.friend : []
                    }
                    keyExtractor={item => item.id.toString()} 
                    renderItem={({ item }) => (
                        <TouchableOpacity 
                            style={{
                                backgroundColor: currentColors.surface,
                                borderRadius: 16,
                                marginHorizontal: 16,
                                marginBottom: 12,
                                padding: 16,
                                elevation: 2,
                                shadowColor: currentColors.primary,
                                shadowOffset: { width: 0, height: 2 },
                                shadowOpacity: 0.1,
                                shadowRadius: 4,
                                borderWidth: 1,
                                borderColor: 'rgba(99, 102, 241, 0.2)'
                            }}
                            onPress={() => navigation.navigate('RestaurantDetail', { restaurantId: item.id })}
                        >
                            <Text style={{fontSize: 18, fontWeight: 'bold', color: currentColors.text, marginBottom: 8}}>{item.name}</Text>
                            <View style={{
                                backgroundColor: currentColors.primaryLight,
                                borderRadius: 20,
                                paddingVertical: 6,
                                paddingHorizontal: 12,
                                alignSelf: 'flex-start',
                                marginBottom: 8
                            }}>
                                <Text style={{color: currentColors.primary, fontWeight: 'bold', fontSize: 12}}>{item.category}</Text>
                            </View>
                            <View style={{flexDirection: 'row', justifyContent: 'space-between', marginTop: 8, alignItems: 'center'}}>
                                <Text style={{fontSize: 14, color: currentColors.textSecondary}}>⭐ {item.rating?.toFixed(1) || '0.0'}</Text>
                                <Text style={{fontSize: 14, color: currentColors.textSecondary}}>💬 {item.review_count || 0}개</Text>
                            </View>
                            {activeTab !== 'all' && (
                                <View style={{
                                    backgroundColor: activeTab === 'personal' ? currentColors.primaryLight : currentColors.secondary + '20',
                                    borderRadius: 12,
                                    paddingVertical: 4,
                                    paddingHorizontal: 8,
                                    alignSelf: 'flex-start',
                                    marginTop: 8
                                }}>
                                    <Text style={{
                                        color: activeTab === 'personal' ? currentColors.primary : currentColors.secondary,
                                        fontWeight: 'bold',
                                        fontSize: 12
                                    }}>
                                        {activeTab === 'personal' ? '개인 추천' : '친구 추천'}
                                    </Text>
                                </View>
                            )}
                        </TouchableOpacity>
                    )} 
                    ListEmptyComponent={
                        <Text style={{fontSize: 16, color: currentColors.textSecondary, textAlign: 'center', marginTop: 50, paddingHorizontal: 16}}>
                            {activeTab === 'all' ? '검색 결과가 없습니다.' :
                             activeTab === 'personal' ? '개인 추천 식당이 없습니다.' :
                             '친구 추천 식당이 없습니다.'}
                        </Text>
                    } 
                    contentContainerStyle={{paddingTop: 16}} 
                />
            )}
            
            {/* 플로팅 추가 버튼 */}
            <TouchableOpacity
                style={{
                    position: 'absolute',
                    right: 24,
                    bottom: 32,
                    width: 56,
                    height: 56,
                    borderRadius: 28,
                    backgroundColor: currentColors.primary,
                    justifyContent: 'center',
                    alignItems: 'center',
                    zIndex: 10,
                    elevation: 8,
                    shadowColor: currentColors.primary,
                    shadowOffset: { width: 0, height: 4 },
                    shadowOpacity: 0.3,
                    shadowRadius: 8
                }}
                activeOpacity={0.85}
                onPress={() => navigation.navigate('AddRestaurant')}
            >
                <Ionicons name="add" size={32} color="#fff" />
            </TouchableOpacity>
        </SafeAreaView>
    );
}

function AddRestaurantScreen({ navigation }) {
    const [name, setName] = useState('');
    const [category, setCategory] = useState('');
    const [address, setAddress] = useState('');
    const [isCategoryModalVisible, setCategoryModalVisible] = useState(false);
    const CATEGORY_OPTIONS = ['한식', '중식', '일식', '양식', '분식', '아시안', '퓨전', '기타'];

    const handleSubmit = async () => {
        if (!name.trim() || !category || !address.trim()) {
            Alert.alert('입력 오류', '맛집 이름, 카테고리, 주소를 모두 입력해주세요.');
            return;
        }

        try {
            const response = await fetch(`${RENDER_SERVER_URL}/restaurants`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    name: name.trim(),
                    category: category,
                    address: address.trim()
                })
            });
            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', '새로운 맛집이 추가되었습니다.');
                navigation.goBack();
            } else {
                Alert.alert('오류', data.message || '맛집 추가에 실패했습니다.');
            }
        } catch (error) {
            Alert.alert('오류', '네트워크 요청 중 문제가 발생했습니다.');
        }
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.formContainer}>
                <Text style={styles.inputLabel}>맛집 이름 *</Text>
                <TextInput style={styles.input} placeholder="예: 판교역 맛집" value={name} onChangeText={setName} />
                
                <Text style={styles.inputLabel}>카테고리 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setCategoryModalVisible(true)}>
                    <Text style={category ? {color: currentColors.black} : {color: currentColors.gray}}>
                        {category || '카테고리를 선택하세요'}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>주소 *</Text>
                <TextInput style={styles.input} placeholder="예: 경기도 성남시 분당구 판교역로 146" value={address} onChangeText={setAddress} />
                
                <TouchableOpacity style={styles.submitButton} onPress={handleSubmit}>
                    <Text style={styles.submitButtonText}>맛집 추가하기</Text>
                </TouchableOpacity>
                
                <TouchableOpacity style={[styles.submitButton, { backgroundColor: currentColors.gray, marginTop: 10 }]} onPress={() => navigation.navigate('맛집')}>
                    <Text style={styles.submitButtonText}>취소하기</Text>
                </TouchableOpacity>
            </ScrollView>
            
            <SelectionModal 
                visible={isCategoryModalVisible} 
                title="카테고리 선택" 
                options={CATEGORY_OPTIONS} 
                selected={category} 
                onSelect={setCategory} 
                onClose={() => setCategoryModalVisible(false)} 
                styles={styles} colors={currentColors} 
            />
        </SafeAreaView>
    );
}

function RestaurantDetailScreen({ route, navigation }) {
    const { restaurantId } = route.params;
    const [restaurant, setRestaurant] = useState(null);
    const [reviews, setReviews] = useState([]);
    const [myRating, setMyRating] = useState(0);
    const [myComment, setMyComment] = useState('');

    const fetchData = useCallback(() => { 
        fetch(`${RENDER_SERVER_URL}/restaurants/${restaurantId}`).then(res=>res.json()).then(setRestaurant).catch(console.error);
        fetch(`${RENDER_SERVER_URL}/restaurants/${restaurantId}/reviews`).then(res=>res.json()).then(setReviews).catch(console.error);
    }, [restaurantId]);

    useFocusEffect(fetchData);
    
    const handleReviewSubmit = async () => {
        if (myRating === 0 || !myComment) { Alert.alert("알림", "별점과 한줄평을 모두 입력해주세요."); return; }
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/restaurants/${restaurantId}/reviews`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ user_id: myEmployeeId, rating: myRating, comment: myComment }), });
            const data = await response.json();
            if (response.ok) { 
                Alert.alert("성공", data.message); 
                setMyRating(0); 
                setMyComment(''); 
                fetchData(); 
            } else { Alert.alert("오류", data.message); }
        } catch (error) { Alert.alert("오류", "리뷰 등록 중 문제가 발생했습니다."); }
    };

    const requestCorrection = () => { Alert.alert("정보 수정 요청", "개발자에게 정보 수정을 요청하는 기능입니다. (구현 예정)"); };

    if (!restaurant) return <ActivityIndicator style={{flex: 1}} size="large" color={currentColors.primary} />;
    
    return (
        <SafeAreaView style={styles.safeArea}>
            <FlatList
                ListHeaderComponent={
                    <>
                        <View style={styles.infoCard}>
                            <View style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'flex-start'}}>
                                <Text style={styles.infoCardTitle}>{restaurant.name}</Text>
                                <View style={styles.categoryChip}><Text style={styles.categoryChipText}>{restaurant.category}</Text></View>
                            </View>
                            <Text style={styles.infoCardAddress}>📍 {restaurant.address}</Text>
                            {restaurant.keywords && restaurant.keywords.length > 0 && <View style={styles.keywordContainer}>{restaurant.keywords.map(k => <View key={k} style={styles.keywordChip}><Text style={styles.keywordText}>{k}</Text></View>)}</View>}
                        </View>
                        <TouchableOpacity style={[styles.createPartyButton, {backgroundColor: currentColors.yellow}]} onPress={() => navigation.navigate('파티', { screen: 'CreateParty', params: { prefilledRestaurant: restaurant.name } })}><Text style={[styles.createPartyButtonText, {color: currentColors.deepBlue}]}>🎉 이 맛집으로 파티 만들기</Text></TouchableOpacity>
                        <View style={styles.reviewInputContainer}>
                            <Text style={styles.cardTitle}>리뷰 남기기</Text>
                            <View style={styles.starContainer}>{[1, 2, 3, 4, 5].map(star => (<TouchableOpacity key={star} onPress={() => setMyRating(star)}><Ionicons name={myRating >= star ? "star" : "star-outline"} size={35} color={currentColors.yellow} /></TouchableOpacity>))}</View>
                            <TextInput style={styles.input} placeholder="한줄평을 남겨주세요..." placeholderTextColor={currentColors.gray} value={myComment} onChangeText={setMyComment} />
                            <TouchableOpacity style={styles.submitButton} onPress={handleReviewSubmit}><Text style={styles.submitButtonText}>리뷰 등록</Text></TouchableOpacity>
                        </View>
                        <Text style={[styles.cardTitle, {paddingHorizontal: 16, marginTop: 20, marginBottom: 10}]}>다른 사람들의 리뷰</Text>
                    </>
                }
                data={reviews}
                keyExtractor={item => item.id.toString()}
                renderItem={({ item }) => (
                    <View style={styles.reviewCard}>
                        <View style={styles.reviewHeader}>
                            <Text style={styles.reviewNickname}>{item.nickname}</Text>
                            <Text style={styles.reviewDate}>{item.created_at}</Text>
                        </View>
                        <View style={styles.starContainerStatic}>
                            {[...Array(item.rating)].map((_, i) => <Ionicons key={`star-${i}`} name="star" size={16} color={currentColors.yellow} />)}
                            {[...Array(5 - item.rating)].map((_, i) => <Ionicons key={`star-outline-${i}`} name="star-outline" size={16} color={currentColors.lightGray} />)}
                        </View>
                        <Text style={styles.reviewComment}>{item.comment}</Text>
                    </View>
                )}
                ListEmptyComponent={<Text style={styles.noDataMessage}>아직 작성된 리뷰가 없습니다.</Text>}
                ListFooterComponent={
                    <TouchableOpacity style={styles.correctionButton} onPress={requestCorrection}>
                        <Text style={styles.correctionButtonText}>식당 정보 수정 요청</Text>
                    </TouchableOpacity>
                }
                contentContainerStyle={{ paddingBottom: 50 }}
            />
        </SafeAreaView>
    );
}

// --- 파티 탭 ---
function PartyListScreen({ navigation }) {
    const [myParties, setMyParties] = useState([]);
    const [allParties, setAllParties] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    useFocusEffect(useCallback(() => {
        setIsLoading(true);
        Promise.all([
            fetch(`${RENDER_SERVER_URL}/my_regular_parties/${myEmployeeId}`).then(res => res.json()),
            fetch(`${RENDER_SERVER_URL}/parties`).then(res => res.json())
        ]).then(([myPartiesData, allPartiesData]) => {
            if(Array.isArray(myPartiesData)) setMyParties(myPartiesData);
            if(Array.isArray(allPartiesData)) setAllParties(allPartiesData);
        }).catch(console.error).finally(() => setIsLoading(false));
    }, []));

    const renderPartyItem = ({ item }) => (
        <TouchableOpacity style={{
            backgroundColor: currentColors.surface,
            borderRadius: 20,
            padding: 20,
            marginHorizontal: 16,
            marginBottom: 16,
            elevation: 3,
            shadowColor: currentColors.primary,
            shadowOffset: { width: 0, height: 4 },
            shadowOpacity: 0.1,
            shadowRadius: 8,
            borderWidth: 1,
            borderColor: 'rgba(59, 130, 246, 0.1)'
        }} onPress={() => navigation.navigate('PartyDetail', { partyId: item.id })}>
            <Text style={{fontSize: 18, fontWeight: 'bold', color: currentColors.text, marginBottom: 8}}>{item.title}</Text>
            <Text style={{fontSize: 14, color: currentColors.textSecondary, marginBottom: 4}}>🗓️ {item.party_date} {item.party_time}</Text>
            <Text style={{fontSize: 14, color: currentColors.textSecondary}}>👥 {item.current_members} / {item.max_members}명 @ {item.restaurant_name}</Text>
        </TouchableOpacity>
    );

    const renderMyPartyItem = ({ item }) => (
        <TouchableOpacity style={{
            backgroundColor: currentColors.surface,
            borderRadius: 16,
            padding: 16,
            marginHorizontal: 6,
            width: SCREEN_WIDTH * 0.5,
            height: 160,
            borderWidth: 2,
            borderColor: currentColors.lightGray,
            justifyContent: 'flex-start',
            elevation: 2,
            shadowColor: currentColors.primary,
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.1,
            shadowRadius: 4
        }} onPress={() => navigation.navigate('PartyDetail', { partyId: item.id })}>
            <Text style={{fontSize: 16, fontWeight: 'bold', color: currentColors.text, marginBottom: 8, numberOfLines: 1}}>{item.title}</Text>
            <Text style={{fontSize: 13, color: currentColors.textSecondary, marginBottom: 8}}>🗓️ {item.party_date} {item.party_time}</Text>
            <View style={{flexDirection: 'row', justifyContent: 'space-between', marginTop: 8, alignItems: 'center'}}>
                <Text style={{fontSize: 12, color: currentColors.textSecondary}}>👥 {item.current_members}/{item.max_members}명</Text>
                <Text style={{fontSize: 12, color: currentColors.textSecondary, numberOfLines: 1}}>📍 {item.restaurant_name}</Text>
            </View>
        </TouchableOpacity>
    );

    if (isLoading) return <ActivityIndicator style={{flex: 1}} size="large" color={currentColors.primary} />;

    return (
        <ScrollView style={styles.safeArea}>
            <Text style={{fontSize: 20, fontWeight: 'bold', marginBottom: 12, color: currentColors.primary, paddingHorizontal: 16, marginTop: 16}}>내 일반파티</Text>
            {myParties.length > 0 ? (
                <FlatList 
                    data={myParties} 
                    renderItem={renderMyPartyItem} 
                    keyExtractor={item => `my-${item.id}`} 
                    horizontal 
                    showsHorizontalScrollIndicator={false}
                    contentContainerStyle={{ paddingHorizontal: 16, paddingVertical: 5 }}
                />
            ) : <Text style={{fontSize: 16, color: currentColors.textSecondary, textAlign: 'center', marginTop: 50, paddingHorizontal: 16}}>참여한 일반파티가 없습니다.</Text>}
            
            <Text style={{fontSize: 20, fontWeight: 'bold', marginBottom: 12, color: currentColors.primary, paddingHorizontal: 16, marginTop: 16}}>전체 파티</Text>
            <FlatList data={allParties} renderItem={renderPartyItem} keyExtractor={item => `all-${item.id}`} scrollEnabled={false} />
        </ScrollView>
    );
}

function DangolPotContainerScreen({ navigation }) {
    const [myPots, setMyPots] = useState([]);
    const [allPots, setAllPots] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    useFocusEffect(useCallback(() => {
        setIsLoading(true);
        Promise.all([
            fetch(`${RENDER_SERVER_URL}/my_dangolpots/${myEmployeeId}`).then(res => res.json()),
            fetch(`${RENDER_SERVER_URL}/dangolpots`).then(res => res.json())
        ]).then(([myPotsData, allPotsData]) => {
            if(Array.isArray(myPotsData)) setMyPots(myPotsData);
            if(Array.isArray(allPotsData)) setAllPots(allPotsData);
        }).catch(console.error).finally(() => setIsLoading(false));
    }, []));

    const renderPotItem = ({ item }) => (
        <TouchableOpacity style={{
            backgroundColor: currentColors.surface,
            borderRadius: 16,
            marginHorizontal: 16,
            marginBottom: 12,
            padding: 16,
            elevation: 2,
            shadowColor: currentColors.primary,
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.1,
            shadowRadius: 4,
            borderWidth: 1,
            borderColor: 'rgba(99, 102, 241, 0.2)'
        }} onPress={() => navigation.navigate('DangolPotDetail', { potId: item.id })}>
            <View style={{flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8}}>
                <Text style={{fontSize: 18, fontWeight: 'bold', color: currentColors.text}}>{item.name}</Text>
                <View style={{
                    backgroundColor: currentColors.primaryLight,
                    borderRadius: 20,
                    paddingVertical: 6,
                    paddingHorizontal: 12,
                    alignSelf: 'flex-start'
                }}>
                    <Text style={{color: currentColors.primary, fontWeight: 'bold', fontSize: 12}}>{item.category}</Text>
                </View>
            </View>
            <Text style={{fontSize: 14, color: currentColors.textSecondary, marginBottom: 4, numberOfLines: 1}}>{item.description}</Text>
            <Text style={{fontSize: 14, color: currentColors.textSecondary, marginBottom: 8}}>{item.tags}</Text>
            <View style={{flexDirection: 'row', justifyContent: 'space-between', marginTop: 10, alignItems: 'center'}}>
                <Text style={{fontSize: 14, color: currentColors.textSecondary}}>👥 {item.member_count}명</Text>
                <Text style={{fontSize: 14, color: currentColors.textSecondary}}>개설일: {item.created_at}</Text>
            </View>
        </TouchableOpacity>
    );

    const renderMyPotItem = ({ item }) => (
        <TouchableOpacity style={{
            backgroundColor: currentColors.surface,
            borderRadius: 16,
            padding: 16,
            marginHorizontal: 6,
            width: SCREEN_WIDTH * 0.5,
            height: 160,
            borderWidth: 2,
            borderColor: currentColors.lightGray,
            justifyContent: 'flex-start',
            elevation: 2,
            shadowColor: currentColors.primary,
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.1,
            shadowRadius: 4
        }} onPress={() => navigation.navigate('DangolPotDetail', { potId: item.id })}>
            <Text style={{fontSize: 16, fontWeight: 'bold', color: currentColors.text, marginBottom: 8, numberOfLines: 1}}>{item.name}</Text>
            <View style={{marginBottom: 8}}>
                <View style={{
                    backgroundColor: currentColors.primaryLight,
                    borderRadius: 20,
                    paddingVertical: 6,
                    paddingHorizontal: 12,
                    alignSelf: 'flex-start'
                }}>
                    <Text style={{color: currentColors.primary, fontWeight: 'bold', fontSize: 12}}>{item.category}</Text>
                </View>
            </View>
            <Text style={{fontSize: 13, color: currentColors.textSecondary, marginBottom: 8, numberOfLines: 2}}>{item.description}</Text>
            <View style={{flexDirection: 'row', justifyContent: 'space-between', marginTop: 8, alignItems: 'center'}}>
                <Text style={{fontSize: 12, color: currentColors.textSecondary}}>👥 {item.member_count}명</Text>
                <Text style={{fontSize: 12, color: currentColors.textSecondary}}>{item.created_at}</Text>
            </View>
        </TouchableOpacity>
    );

    if (isLoading) return <ActivityIndicator style={{flex: 1}} size="large" color={currentColors.primary} />;

    return (
        <ScrollView style={styles.safeArea}>
            <Text style={{fontSize: 20, fontWeight: 'bold', marginBottom: 12, color: currentColors.primary, paddingHorizontal: 16, marginTop: 16}}>내 단골파티</Text>
            {myPots.length > 0 ? (
                <FlatList 
                    data={myPots} 
                    renderItem={renderMyPotItem} 
                    keyExtractor={item => `my-${item.id}`} 
                    horizontal 
                    showsHorizontalScrollIndicator={false}
                    contentContainerStyle={{ paddingHorizontal: 16, paddingVertical: 5 }}
                />
            ) : <Text style={{fontSize: 16, color: currentColors.textSecondary, textAlign: 'center', marginTop: 50, paddingHorizontal: 16}}>가입한 단골파티가 없습니다.</Text>}
            
            <Text style={{fontSize: 20, fontWeight: 'bold', marginBottom: 12, color: currentColors.primary, paddingHorizontal: 16, marginTop: 16}}>전체 단골파티</Text>
            <FlatList data={allPots} renderItem={renderPotItem} keyExtractor={item => `all-${item.id}`} scrollEnabled={false} />
        </ScrollView>
    );
}

function PartiesContainerScreen({ navigation }) {
    const [tabIndex, setTabIndex] = useState(0);
    const currentTabIndexRef = useRef(0);
    
    // 현재 탭 인덱스를 직접 가져오기
    const currentTabIndex = useNavigationState(state => {
        const routes = state?.routes;
        if (routes && routes.length > 0) {
            const currentRoute = routes[routes.length - 1];
            if (currentRoute.state && currentRoute.state.index !== undefined) {
                return currentRoute.state.index;
            }
        }
        return 0;
    });
    
    // currentTabIndexRef 업데이트
    useEffect(() => {
        currentTabIndexRef.current = currentTabIndex;
    }, [currentTabIndex]);
    
    const handleAddPress = () => {
        const currentIndex = currentTabIndexRef.current;
        
        if (currentIndex === 0) {
            // 랜덤런치 탭에서는 홈탭의 handleMatchPress와 동일하게 동작
            navigation.navigate('RandomLunch');
        } else if (currentIndex === 1) {
            // 일반파티 탭에서는 새 파티 만들기 화면으로 이동
            navigation.navigate('CreateParty');
        } else if (currentIndex === 2) {
            // 단골파티 탭에서는 새 단골파티 만들기 화면으로 이동
            navigation.navigate('CreateDangolPot');
        }
    };
    
    return (
        <SafeAreaView style={{flex: 1, backgroundColor: currentColors.background}}>
            <TopTab.Navigator
                initialRouteName="랜덤런치"
                screenOptions={{
                    tabBarActiveTintColor: currentColors.primary,
                    tabBarInactiveTintColor: currentColors.gray,
                    tabBarIndicatorStyle: { backgroundColor: currentColors.primary },
                    tabBarLabelStyle: { fontWeight: '600', fontSize: 16, marginTop: 2 },
                    tabBarIconStyle: { marginBottom: 4 }
                }}
                screenListeners={{
                    tabPress: (e) => {
                        const routeName = e.target.split('-')[0];
                        if (routeName === '랜덤런치') {
                            setTabIndex(0);
                            currentTabIndexRef.current = 0;
                        } else if (routeName === '일반파티') {
                            setTabIndex(1);
                            currentTabIndexRef.current = 1;
                        } else if (routeName === '단골파티') {
                            setTabIndex(2);
                            currentTabIndexRef.current = 2;
                        }
                    },
                    focus: (e) => {
                        const routeName = e.target.split('-')[0];
                        if (routeName === '랜덤런치') {
                            setTabIndex(0);
                            currentTabIndexRef.current = 0;
                        } else if (routeName === '일반파티') {
                            setTabIndex(1);
                            currentTabIndexRef.current = 1;
                        } else if (routeName === '단골파티') {
                            setTabIndex(2);
                            currentTabIndexRef.current = 2;
                        }
                    }
                }}
            >
                <TopTab.Screen name="랜덤런치" component={MyProposalsScreen} />
                <TopTab.Screen name="일반파티" component={PartyListScreen} />
                <TopTab.Screen name="단골파티" component={DangolPotContainerScreen} />
            </TopTab.Navigator>
            <TouchableOpacity
                style={{
                    position: 'absolute',
                    right: 24,
                    bottom: 32,
                    width: 56,
                    height: 56,
                    borderRadius: 28,
                    backgroundColor: currentColors.primary,
                    justifyContent: 'center',
                    alignItems: 'center',
                    zIndex: 10,
                    elevation: 8,
                    shadowColor: currentColors.primary,
                    shadowOffset: { width: 0, height: 4 },
                    shadowOpacity: 0.3,
                    shadowRadius: 8
                }}
                activeOpacity={0.85}
                onPress={handleAddPress}
            >
                <Ionicons name="add" size={32} color="#fff" />
            </TouchableOpacity>
        </SafeAreaView>
    );
}

function PartyDetailScreen({ route, navigation }) {
    const { partyId } = route.params;
    const [party, setParty] = useState(null);
    
    const fetchPartyDetails = useCallback(() => { 
        fetch(`${RENDER_SERVER_URL}/parties/${partyId}`).then(res => res.json()).then(setParty).catch(err => { console.error(err); setParty(null); });
    }, [partyId]);

    useFocusEffect(fetchPartyDetails);

    if (!party) return <View style={styles.centerView}><ActivityIndicator size="large" color={currentColors.primary}/></View>;

    const isMember = party.members.some(m => m.employee_id === myEmployeeId);
    const isHost = party.host_employee_id === myEmployeeId;

    const handleJoinParty = async () => {
        const response = await fetch(`${RENDER_SERVER_URL}/parties/${party.id}/join`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ employee_id: myEmployeeId }) });
        const data = await response.json();
        Alert.alert("알림", data.message);
        if(response.ok) fetchPartyDetails();
    };

    const handleLeaveParty = async () => {
        Alert.alert(
            '파티 나가기',
            '정말로 이 파티에서 나가시겠습니까?',
            [
                { text: '취소', style: 'cancel' },
                { text: '나가기', style: 'destructive', onPress: async () => {
                    try {
                        const response = await fetch(`${RENDER_SERVER_URL}/parties/${party.id}/leave`, { 
                            method: 'POST', 
                            headers: { 'Content-Type': 'application/json' }, 
                            body: JSON.stringify({ employee_id: myEmployeeId }) 
                        });
                        const data = await response.json();
                        if (response.ok) {
                            Alert.alert('성공', '파티에서 나갔습니다.');
                            navigation.goBack();
                        } else {
                            Alert.alert('오류', data.message || '파티 나가기에 실패했습니다.');
                        }
                    } catch (e) {
                        Alert.alert('오류', '파티 나가기에 실패했습니다.');
                    }
                }}
            ]
        );
    };

    const renderActionButtons = () => {
        if(isMember) {
            return (
                <View>
                    <TouchableOpacity style={styles.submitButton} onPress={() => navigation.navigate('소통', { screen: 'ChatRoom', params: { chatId: party.id, chatType: 'party', chatTitle: party.title } })}>
                        <Text style={styles.submitButtonText}>채팅방으로 이동</Text>
                    </TouchableOpacity>
                    
                    {/* 매칭 성공한 랜덤런치 파티에서 나가기 버튼 */}
                    {party.is_from_match && (
                        <TouchableOpacity style={[styles.submitButton, {marginTop: 10, backgroundColor: currentColors.red}]} onPress={handleLeaveParty}>
                            <Text style={[styles.submitButtonText, {color: currentColors.white}]}>파티 나가기</Text>
                        </TouchableOpacity>
                    )}
                    
                    {isHost && !party.is_from_match && (
                        <>
                            <TouchableOpacity style={[styles.submitButton, {marginTop: 10, backgroundColor: currentColors.gray}]} onPress={() => navigation.navigate('EditParty', { partyData: party })}>
                                <Text style={[styles.submitButtonText, {color: currentColors.white}]}>파티 정보 수정</Text>
                            </TouchableOpacity>
                            <TouchableOpacity style={[styles.submitButton, {marginTop: 10, backgroundColor: currentColors.red}]} onPress={handleDeleteParty}>
                                <Text style={[styles.submitButtonText, {color: currentColors.white}]}>파티 삭제</Text>
                            </TouchableOpacity>
                        </>
                    )}
                </View>
            );
        }
        if (party.current_members < party.max_members) {
            return (
                <TouchableOpacity style={styles.submitButton} onPress={handleJoinParty}>
                    <Text style={styles.submitButtonText}>파티 참여하기</Text>
                </TouchableOpacity>
            );
        }
        return <Text style={styles.partyFullText}>파티 인원이 가득 찼습니다.</Text>;
    };

    // 파티 삭제 핸들러 추가
    const handleDeleteParty = async () => {
        Alert.alert(
            '파티 삭제',
            '정말로 이 파티를 삭제하시겠습니까?',
            [
                { text: '취소', style: 'cancel' },
                { text: '삭제', style: 'destructive', onPress: async () => {
                    try {
                        const response = await fetch(`${RENDER_SERVER_URL}/parties/${party.id}?employee_id=${myEmployeeId}`, { method: 'DELETE' });
                        const data = await response.json();
                        if (response.ok) {
                            Alert.alert('성공', '파티가 삭제되었습니다.');
                            navigation.goBack();
                        } else {
                            Alert.alert('오류', data.message || '파티 삭제에 실패했습니다.');
                        }
                    } catch (e) {
                        Alert.alert('오류', '파티 삭제에 실패했습니다.');
                    }
                }}
            ]
        );
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.detailContainer}>
                <Text style={styles.title}>{party.is_from_match ? '⚡️ ' : '🎉 '}{party.title}</Text>
                <Text style={styles.detailInfo}>📍 {party.restaurant_name}</Text>
                <Text style={styles.detailInfo}>🗓️ {party.party_date} {party.party_time}</Text>
                <Text style={styles.detailInfo}>🏠 {party.meeting_location}</Text>
                <Text style={styles.detailInfo}>👥 {party.current_members} / {party.max_members}명</Text>
                <View style={styles.memberList}>
                    <Text style={styles.cardTitle}>참여자 목록:</Text>
                    {party.members.map(m => (
                        <View key={m.employee_id} style={styles.memberItem}>
                            <Text style={styles.memberName}>
                                • {m.nickname} {m.employee_id === party.host_employee_id ? '(팟장)' : ''}
                            </Text>
                            {m.lunch_preference && (
                                <Text style={styles.memberDetail}>🍽️ {m.lunch_preference}</Text>
                            )}
                            {m.main_dish_genre && (
                                <Text style={styles.memberDetail}>🍜 {m.main_dish_genre}</Text>
                            )}
                        </View>
                    ))}
                </View>
                <View style={{marginTop: 30}}>{renderActionButtons()}</View>
            </ScrollView>
        </SafeAreaView>
    );
}

function DangolPotDetailScreen({ route, navigation }) {
    const { potId } = route.params;
    const [pot, setPot] = useState(null);
    const [isMember, setIsMember] = useState(false);

    const fetchDetails = useCallback(() => {
        fetch(`${RENDER_SERVER_URL}/dangolpots/${potId}`).then(res => res.json()).then(data => {
            setPot(data);
            setIsMember(data.members.some(m => m.employee_id === myEmployeeId));
        }).catch(console.error);
    }, [potId]);

    useFocusEffect(fetchDetails);

    const handleJoin = async () => {
        const response = await fetch(`${RENDER_SERVER_URL}/dangolpots/${pot.id}/join`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ employee_id: myEmployeeId }) });
        if (response.ok) { Alert.alert("성공", "단골파티에 가입했습니다!"); fetchDetails(); } 
        else { Alert.alert("오류", "가입에 실패했습니다."); }
    };

    const handleDeletePot = async () => {
        Alert.alert(
            '단골파티 삭제',
            '정말로 이 단골파티를 삭제하시겠습니까?',
            [
                { text: '취소', style: 'cancel' },
                { text: '삭제', style: 'destructive', onPress: async () => {
                    try {
                        const response = await fetch(`${RENDER_SERVER_URL}/dangolpots/${pot.id}?employee_id=${myEmployeeId}`, { method: 'DELETE' });
                        const data = await response.json();
                        if (response.ok) {
                            Alert.alert('성공', '단골파티가 삭제되었습니다.');
                            navigation.goBack();
                        } else {
                            Alert.alert('오류', data.message || '단골파티 삭제에 실패했습니다.');
                        }
                    } catch (e) {
                        Alert.alert('오류', '단골파티 삭제에 실패했습니다.');
                    }
                }}
            ]
        );
    };
    
    if (!pot) return <View style={styles.centerView}><ActivityIndicator size="large" color={currentColors.primary} /></View>;

    const isHost = pot.host_id === myEmployeeId;

    const renderActionButtons = () => {
        if (isMember) {
            return (
                <View>
                    <TouchableOpacity style={styles.submitButton} onPress={() => navigation.navigate('소통', { screen: 'ChatRoom', params: { chatId: pot.id, chatType: 'dangolpot', chatTitle: pot.name } })}>
                        <Text style={styles.submitButtonText}>채팅방으로 이동</Text>
                    </TouchableOpacity>
                    {isHost && (
                        <>
                            <TouchableOpacity style={[styles.submitButton, {marginTop: 10, backgroundColor: currentColors.gray}]} onPress={() => navigation.navigate('EditDangolPot', { potData: pot })}>
                                <Text style={[styles.submitButtonText, {color: currentColors.white}]}>단골파티 정보 수정</Text>
                            </TouchableOpacity>
                            <TouchableOpacity style={[styles.submitButton, {marginTop: 10, backgroundColor: currentColors.red}]} onPress={handleDeletePot}>
                                <Text style={[styles.submitButtonText, {color: currentColors.white}]}>단골파티 삭제</Text>
                            </TouchableOpacity>
                        </>
                    )}
                </View>
            );
        }
        return (
            <TouchableOpacity style={styles.submitButton} onPress={handleJoin}>
                <Text style={styles.submitButtonText}>가입하기</Text>
            </TouchableOpacity>
        );
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.detailContainer}>
                <View style={{flexDirection: 'row', justifyContent: 'space-between', alignItems: 'flex-start'}}>
                    <Text style={styles.title}>{pot.name}</Text>
                    <View style={styles.categoryChip}><Text style={styles.categoryChipText}>{pot.category}</Text></View>
                </View>
                <Text style={styles.detailInfo}>{pot.description}</Text>
                <Text style={styles.detailInfo}>#️⃣ {pot.tags}</Text>
                <View style={styles.memberList}>
                    <Text style={styles.cardTitle}>멤버 목록 ({pot.members.length}명)</Text>
                    {/* 팟장(호스트)만 맨 위에 한 번 표시 */}
                    {(() => {
                        const leader = pot.members.find(m => m.is_host);
                        if (!leader) return null;
                        return (
                            <View style={{
                                flexDirection: 'row',
                                alignItems: 'center',
                                paddingVertical: 8,
                                paddingHorizontal: 12,
                                backgroundColor: currentColors.background,
                                borderRadius: 8,
                                marginBottom: 8
                            }}>
                                <View style={{
                                    width: 40,
                                    height: 40,
                                    borderRadius: 20,
                                    backgroundColor: currentColors.yellow,
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    marginRight: 12
                                }}>
                                    <Text style={{
                                        color: currentColors.deepBlue,
                                        fontSize: 16,
                                        fontWeight: 'bold'
                                    }}>
                                        {leader.nickname ? leader.nickname.charAt(0) : '?'}
                                    </Text>
                                </View>
                                <View style={{ flex: 1 }}>
                                    <Text style={{
                                        fontSize: 16,
                                        fontWeight: '600',
                                        color: currentColors.text
                                    }}>
                                        {leader.nickname || '알 수 없음'}
                                    </Text>
                                </View>
                                <View style={{
                                    backgroundColor: currentColors.yellow,
                                    borderRadius: 12,
                                    paddingHorizontal: 8,
                                    paddingVertical: 4
                                }}>
                                    <Text style={{
                                        fontSize: 10,
                                        fontWeight: 'bold',
                                        color: currentColors.deepBlue
                                    }}>
                                        팟장
                                    </Text>
                                </View>
                            </View>
                        );
                    })()}
                    {/* 일반 멤버만 리스트로 표시 (팟장 employee_id와 다른 멤버만) */}
                    <FlatList
                        data={pot.members.filter(m => {
                            const leader = pot.members.find(x => x.is_host);
                            return !leader || m.employee_id !== leader.employee_id;
                        })}
                        keyExtractor={(item, index) => `member-${item.employee_id}-${index}`}
                        renderItem={({ item }) => (
                            <View style={{
                                flexDirection: 'row',
                                alignItems: 'center',
                                paddingVertical: 8,
                                paddingHorizontal: 12,
                                backgroundColor: currentColors.background,
                                borderRadius: 8,
                                marginBottom: 8
                            }}>
                                <View style={{
                                    width: 40,
                                    height: 40,
                                    borderRadius: 20,
                                    backgroundColor: currentColors.primary,
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    marginRight: 12
                                }}>
                                    <Text style={{
                                        color: '#FFFFFF',
                                        fontSize: 16,
                                        fontWeight: 'bold'
                                    }}>
                                        {item.nickname ? item.nickname.charAt(0) : '?'}
                                    </Text>
                                </View>
                                <View style={{ flex: 1 }}>
                                    <Text style={{
                                        fontSize: 16,
                                        fontWeight: '600',
                                        color: currentColors.text
                                    }}>
                                        {item.nickname || '알 수 없음'}
                                    </Text>
                                </View>
                            </View>
                        )}
                        showsVerticalScrollIndicator={false}
                    />
                </View>
                <View style={{marginTop: 30}}>{renderActionButtons()}</View>
            </ScrollView>
        </SafeAreaView>
    );
}

function CreatePartyScreen({ navigation, route }) {
    const [title, setTitle] = useState('');
    const [restaurant, setRestaurant] = useState('');
    const [date, setDate] = useState('');
    const [time, setTime] = useState('');
    const [location, setLocation] = useState('');
    const [maxMembers, setMaxMembers] = useState(4);
    const [description, setDescription] = useState('');
    const [isDateModalVisible, setDateModalVisible] = useState(false);
    const [isTimeModalVisible, setTimeModalVisible] = useState(false);
    const [isMaxMembersModalVisible, setMaxMembersModalVisible] = useState(false);
    const [suggestedTitles, setSuggestedTitles] = useState([]);
    const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false);
    const [selectedDate, setSelectedDate] = useState(new Date());
    
    const prefilledRestaurant = route.params?.prefilledRestaurant;
    
    useEffect(() => {
        if (prefilledRestaurant) {
            setRestaurant(prefilledRestaurant);
        }
    }, [prefilledRestaurant]);

    // AI 파티 제목 제안 기능
    const generateTitleSuggestions = async () => {
        if (!restaurant.trim() && !date.trim()) {
            Alert.alert('알림', '식당명이나 날짜를 먼저 입력해주세요.');
            return;
        }

        try {
            setIsLoadingSuggestions(true);
            const response = await fetch(`${RENDER_SERVER_URL}/ai/suggest-party-titles`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    restaurant: restaurant.trim(),
                    date: date.trim(),
                    time: time.trim(),
                    location: location.trim()
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('서버에서 JSON 응답을 받지 못했습니다.');
            }
            
            const data = await response.json();
            setSuggestedTitles(data.suggestions || []);
        } catch (error) {
            console.error('AI 제목 제안 오류:', error);
            Alert.alert('오류', 'AI 제목 제안 기능을 사용할 수 없습니다. 나중에 다시 시도해주세요.');
        } finally {
            setIsLoadingSuggestions(false);
        }
    };

    const handleTitleSuggestion = (suggestion) => {
        setTitle(suggestion);
        setSuggestedTitles([]); // 제안 목록 닫기
    };

    const handleDateSelect = (selectedDate) => {
        // 날짜를 YYYY.M.D.(요일) 형식으로 표시
        const year = selectedDate.getFullYear();
        const month = selectedDate.getMonth() + 1;
        const day = selectedDate.getDate();
        const dayOfWeek = ['일', '월', '화', '수', '목', '금', '토'][selectedDate.getDay()];
        
        const dateText = `${year}.${month}.${day}.(${dayOfWeek})`;
        
        setDate(dateText);
        setSelectedDate(selectedDate);
        setDateModalVisible(false);
    };

    const handleCreate = async () => {
        if (!title.trim() || !restaurant.trim() || !date.trim() || !time.trim()) {
            Alert.alert('입력 오류', '파티 제목, 식당, 날짜, 시간을 모두 입력해주세요.');
            return;
        }

        // 날짜 텍스트를 실제 날짜로 변환
        let actualDate = '';
        if (date && date.includes('.')) {
            // YYYY.M.D.(요일) 형식에서 날짜 추출
            const match = date.match(/(\d+)\.(\d+)\.(\d+)\./);
            if (match) {
                const year = parseInt(match[1]);
                const month = parseInt(match[2]);
                const day = parseInt(match[3]);
                const dateObj = new Date(year, month - 1, day);
                actualDate = toLocalDateString(dateObj);
            } else {
                actualDate = toLocalDateString(selectedDate);
            }
        } else {
            actualDate = toLocalDateString(selectedDate);
        }

        try {
            const response = await fetch(`${RENDER_SERVER_URL}/parties`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    title: title.trim(),
                    restaurant_name: restaurant.trim(),
                    party_date: actualDate,
                    party_time: time.trim(),
                    meeting_location: location.trim(),
                    max_members: maxMembers,
                    description: description.trim(),
                    host_employee_id: myEmployeeId
                })
            });
            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', '새로운 파티가 생성되었습니다.');
                // 홈 화면으로 돌아가면서 데이터 새로고침
                navigation.navigate('홈');
            } else {
                Alert.alert('오류', data.message || '파티 생성에 실패했습니다.');
            }
        } catch (error) {
            Alert.alert('오류', '네트워크 요청 중 문제가 발생했습니다.');
        }
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.formContainer}>
                <Text style={styles.inputLabel}>파티 제목 *</Text>
                <View style={styles.titleInputContainer}>
                    <TextInput 
                        style={[styles.input, { flex: 1 }]} 
                        placeholder="파티 제목을 입력하세요" 
                        value={title} 
                        onChangeText={setTitle} 
                    />
                    <TouchableOpacity
                        style={styles.aiSuggestButton}
                        onPress={generateTitleSuggestions}
                        disabled={isLoadingSuggestions}
                    >
                        <Ionicons 
                            name="sparkles" 
                            size={20} 
                            color={isLoadingSuggestions ? currentColors.gray : currentColors.primary} 
                        />
                    </TouchableOpacity>
                </View>

                {/* AI 제안 제목 목록 */}
                {suggestedTitles.length > 0 && (
                    <View style={styles.suggestionsContainer}>
                        <Text style={styles.suggestionsTitle}>AI 제안 제목</Text>
                        {suggestedTitles.map((suggestion, index) => (
                            <TouchableOpacity
                                key={index}
                                style={styles.suggestionItem}
                                onPress={() => handleTitleSuggestion(suggestion)}
                            >
                                <Text style={styles.suggestionText}>{suggestion}</Text>
                                <Ionicons name="arrow-forward" size={16} color={currentColors.primary} />
                            </TouchableOpacity>
                        ))}
                    </View>
                )}

                <Text style={styles.inputLabel}>식당 *</Text>
                <TextInput style={styles.input} placeholder="식당 이름을 입력하세요" value={restaurant} onChangeText={setRestaurant} />
                
                <Text style={styles.inputLabel}>날짜 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setDateModalVisible(true)}>
                    <Text style={date ? styles.inputText : styles.placeholderText}>
                        {date || '날짜를 선택하세요'}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>시간 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setTimeModalVisible(true)}>
                    <Text style={time ? styles.inputText : styles.placeholderText}>
                        {time || '시간을 선택하세요'}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>장소 (선택)</Text>
                <TextInput style={styles.input} placeholder="예: 판교역 2번 출구" value={location} onChangeText={setLocation} />
                
                <Text style={styles.inputLabel}>최대 인원 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setMaxMembersModalVisible(true)}>
                    <Text style={styles.inputText}>{maxMembers}명</Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>설명 (선택)</Text>
                <TextInput 
                    style={[styles.input, { height: 100, textAlignVertical: 'top' }]} 
                    placeholder="파티에 대한 설명을 입력하세요" 
                    value={description} 
                    onChangeText={setDescription} 
                    multiline 
                />
                
                <TouchableOpacity style={styles.submitButton} onPress={handleCreate}>
                    <Text style={styles.submitButtonText}>파티 만들기</Text>
                </TouchableOpacity>
                
                <TouchableOpacity style={[styles.submitButton, { backgroundColor: currentColors.gray, marginTop: 10 }]} onPress={() => navigation.goBack()}>
                    <Text style={styles.submitButtonText}>취소하기</Text>
                </TouchableOpacity>
            </ScrollView>
            
            {/* 날짜 선택 모달 - 작은 캘린더 */}
            <Modal
                visible={isDateModalVisible}
                transparent={true}
                animationType="fade"
                onRequestClose={() => setDateModalVisible(false)}
            >
                <View style={styles.centeredView}>
                    <View style={[styles.modalView, { width: 350, height: 450, maxWidth: '90%', maxHeight: '80%' }]}>
                        <View style={styles.modalHeader}>
                            <Text style={styles.modalTitle}>날짜 선택</Text>
                            <TouchableOpacity onPress={() => setDateModalVisible(false)}>
                                <Ionicons name="close" size={24} color={currentColors.gray} />
                            </TouchableOpacity>
                        </View>
                        <Calendar
                            current={selectedDate instanceof Date && !isNaN(selectedDate) ? selectedDate : new Date()}
  onDayPress={(day) => handleDateSelect(new Date(day.timestamp))}
  markedDates={{
    [toLocalDateString(selectedDate instanceof Date && !isNaN(selectedDate) ? selectedDate : new Date())]: {
      selected: true,
      selectedColor: currentColors.primary
    }
                            }}
                            theme={{
                                calendarBackground: currentColors.surface,
                                textSectionTitleColor: currentColors.text,
                                selectedDayBackgroundColor: currentColors.primary,
                                selectedDayTextColor: currentColors.surface,
                                todayTextColor: currentColors.primary,
                                dayTextColor: currentColors.text,
                                textDisabledColor: currentColors.gray,
                                dotColor: currentColors.primary,
                                selectedDotColor: currentColors.surface,
                                arrowColor: currentColors.primary,
                                monthTextColor: currentColors.text,
                                indicatorColor: currentColors.primary,
                                textDayFontWeight: '300',
                                textMonthFontWeight: 'bold',
                                textDayHeaderFontWeight: '300',
                                textDayFontSize: 16,
                                textMonthFontSize: 16,
                                textDayHeaderFontSize: 13
                            }}
                        />
                    </View>
                </View>
            </Modal>
            
            <SelectionModal 
                visible={isTimeModalVisible} 
                title="시간 선택" 
                options={['11:30', '12:00', '12:30', '13:00', '13:30', '14:00']} 
                selected={time} 
                onSelect={setTime} 
                onClose={() => setTimeModalVisible(false)} 
                styles={styles} colors={currentColors} 
            />
            <SelectionModal 
                visible={isMaxMembersModalVisible} 
                title="최대 인원 선택" 
                options={['2명', '3명', '4명', '5명', '6명', '7명', '8명']} 
                selected={`${maxMembers}명`} 
                onSelect={(value) => setMaxMembers(parseInt(value))} 
                onClose={() => setMaxMembersModalVisible(false)} 
                styles={styles} colors={currentColors} 
            />
        </SafeAreaView>
    );
}

function EditPartyScreen({ route, navigation }) {
    const { partyData } = route.params;
    const [title, setTitle] = useState(partyData.title);
    const [restaurant, setRestaurant] = useState(partyData.restaurant_name);
    const [date, setDate] = useState('');
    const [time, setTime] = useState(partyData.party_time);
    const [location, setLocation] = useState(partyData.meeting_location);
    const [maxMembers, setMaxMembers] = useState(partyData.max_members);
    const [description, setDescription] = useState(partyData.description || '');
    const [isDateModalVisible, setDateModalVisible] = useState(false);
    const [isTimeModalVisible, setTimeModalVisible] = useState(false);
    const [isMaxMembersModalVisible, setMaxMembersModalVisible] = useState(false);
    const [selectedDate, setSelectedDate] = useState(new Date(partyData.party_date));
    const [suggestedTitles, setSuggestedTitles] = useState([]);
    const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false);

    // 초기 날짜 설정
    useEffect(() => {
        const dateObj = new Date(partyData.party_date);
        const year = dateObj.getFullYear();
        const month = dateObj.getMonth() + 1;
        const day = dateObj.getDate();
        const dayOfWeek = ['일', '월', '화', '수', '목', '금', '토'][dateObj.getDay()];
        setDate(`${year}.${month}.${day}.(${dayOfWeek})`);
    }, [partyData.party_date]);

    // AI 파티 제목 제안 기능
    const generateTitleSuggestions = async () => {
        if (!restaurant.trim() && !date.trim()) {
            Alert.alert('알림', '식당명이나 날짜를 먼저 입력해주세요.');
            return;
        }

        try {
            setIsLoadingSuggestions(true);
            const response = await fetch(`${RENDER_SERVER_URL}/ai/suggest-party-titles`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    restaurant: restaurant.trim(),
                    date: date.trim(),
                    time: time.trim(),
                    location: location.trim()
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('서버에서 JSON 응답을 받지 못했습니다.');
            }
            
            const data = await response.json();
            setSuggestedTitles(data.suggestions || []);
        } catch (error) {
            console.error('AI 제목 제안 오류:', error);
            Alert.alert('오류', 'AI 제목 제안 기능을 사용할 수 없습니다. 나중에 다시 시도해주세요.');
        } finally {
            setIsLoadingSuggestions(false);
        }
    };

    const handleTitleSuggestion = (suggestion) => {
        setTitle(suggestion);
        setSuggestedTitles([]); // 제안 목록 닫기
    };

    const handleDateSelect = (selectedDate) => {
        // 날짜를 YYYY.M.D.(요일) 형식으로 표시
        const year = selectedDate.getFullYear();
        const month = selectedDate.getMonth() + 1;
        const day = selectedDate.getDate();
        const dayOfWeek = ['일', '월', '화', '수', '목', '금', '토'][selectedDate.getDay()];
        
        const dateText = `${year}.${month}.${day}.(${dayOfWeek})`;
        
        setDate(dateText);
        setSelectedDate(selectedDate);
        setDateModalVisible(false);
    };

    const handleUpdate = async () => {
        if (!title.trim() || !restaurant.trim() || !date.trim() || !time.trim()) {
            Alert.alert('입력 오류', '파티 제목, 식당, 날짜, 시간을 모두 입력해주세요.');
            return;
        }

        // 날짜 텍스트를 실제 날짜로 변환
        let actualDate = '';
        if (date && date.includes('.')) {
            // YYYY.M.D.(요일) 형식에서 날짜 추출
            const match = date.match(/(\d+)\.(\d+)\.(\d+)\./);
            if (match) {
                const year = parseInt(match[1]);
                const month = parseInt(match[2]);
                const day = parseInt(match[3]);
                const dateObj = new Date(year, month - 1, day);
                actualDate = toLocalDateString(dateObj);
            } else {
                actualDate = toLocalDateString(selectedDate);
            }
        } else {
            actualDate = toLocalDateString(selectedDate);
        }

        try {
            const response = await fetch(`${RENDER_SERVER_URL}/parties/${partyData.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    employee_id: myEmployeeId,
                    title: title.trim(),
                    restaurant_name: restaurant.trim(),
                    party_date: actualDate,
                    party_time: time.trim(),
                    meeting_location: location.trim(),
                    max_members: maxMembers,
                    description: description.trim()
                })
            });
            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', '파티 정보가 수정되었습니다.');
                navigation.goBack();
            } else {
                Alert.alert('오류', data.message || '파티 수정에 실패했습니다.');
            }
        } catch (error) {
            Alert.alert('오류', '네트워크 요청 중 문제가 발생했습니다.');
        }
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.formContainer}>
                <Text style={styles.inputLabel}>파티 제목 *</Text>
                <View style={styles.titleInputContainer}>
                    <TextInput 
                        style={[styles.input, { flex: 1 }]} 
                        placeholder="파티 제목을 입력하세요" 
                        value={title} 
                        onChangeText={setTitle} 
                    />
                    <TouchableOpacity
                        style={styles.aiSuggestButton}
                        onPress={generateTitleSuggestions}
                        disabled={isLoadingSuggestions}
                    >
                        <Ionicons 
                            name="sparkles" 
                            size={20} 
                            color={isLoadingSuggestions ? currentColors.gray : currentColors.primary} 
                        />
                    </TouchableOpacity>
                </View>

                {/* AI 제안 제목 목록 */}
                {suggestedTitles.length > 0 && (
                    <View style={styles.suggestionsContainer}>
                        <Text style={styles.suggestionsTitle}>AI 제안 제목</Text>
                        {suggestedTitles.map((suggestion, index) => (
                            <TouchableOpacity
                                key={index}
                                style={styles.suggestionItem}
                                onPress={() => handleTitleSuggestion(suggestion)}
                            >
                                <Text style={styles.suggestionText}>{suggestion}</Text>
                                <Ionicons name="arrow-forward" size={16} color={currentColors.primary} />
                            </TouchableOpacity>
                        ))}
                    </View>
                )}

                <Text style={styles.inputLabel}>식당 *</Text>
                <TextInput style={styles.input} placeholder="식당 이름을 입력하세요" value={restaurant} onChangeText={setRestaurant} />
                
                <Text style={styles.inputLabel}>날짜 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setDateModalVisible(true)}>
                    <Text style={date ? styles.inputText : styles.placeholderText}>
                        {date || '날짜를 선택하세요'}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>시간 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setTimeModalVisible(true)}>
                    <Text style={time ? styles.inputText : styles.placeholderText}>
                        {time || '시간을 선택하세요'}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>장소 (선택)</Text>
                <TextInput style={styles.input} placeholder="예: 판교역 2번 출구" value={location} onChangeText={setLocation} />
                
                <Text style={styles.inputLabel}>최대 인원 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setMaxMembersModalVisible(true)}>
                    <Text style={styles.inputText}>{maxMembers}명</Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>설명 (선택)</Text>
                <TextInput 
                    style={[styles.input, { height: 100, textAlignVertical: 'top' }]} 
                    placeholder="파티에 대한 설명을 입력하세요" 
                    value={description} 
                    onChangeText={setDescription} 
                    multiline 
                />
                
                <TouchableOpacity style={styles.submitButton} onPress={handleUpdate}>
                    <Text style={[styles.submitButtonText, {color: currentColors.white}]}>수정하기</Text>
                </TouchableOpacity>
                
                <TouchableOpacity style={[styles.submitButton, { backgroundColor: currentColors.gray, marginTop: 10 }]} onPress={() => navigation.goBack()}>
                    <Text style={[styles.submitButtonText, {color: currentColors.white}]}>취소하기</Text>
                </TouchableOpacity>
            </ScrollView>

            {/* 날짜 선택 모달 - 작은 캘린더 */}
            <Modal
                visible={isDateModalVisible}
                transparent={true}
                animationType="fade"
                onRequestClose={() => setDateModalVisible(false)}
            >
                    <View style={styles.centeredView}>
                        <View style={[styles.modalView, { width: 350, height: 450, maxWidth: '90%', maxHeight: '80%' }]}> 
                            <View style={styles.modalHeader}>
                                <Text style={styles.modalTitle}>날짜 선택</Text>
                                <TouchableOpacity onPress={() => setDateModalVisible(false)}>
                                    <Ionicons name="close" size={24} color={currentColors.gray} />
                                </TouchableOpacity>
                            </View>
                            <Calendar
                                current={selectedDate instanceof Date && !isNaN(selectedDate) ? selectedDate : new Date()}
  onDayPress={(day) => handleDateSelect(new Date(day.timestamp))}
  markedDates={{
    [toLocalDateString(selectedDate instanceof Date && !isNaN(selectedDate) ? selectedDate : new Date())]: {
      selected: true,
      selectedColor: currentColors.primary
    }
                            }}
                            theme={{
                                selectedDayBackgroundColor: currentColors.primary,
                                selectedDayTextColor: currentColors.white,
                                todayTextColor: currentColors.primary,
                                dayTextColor: currentColors.text,
                                textDisabledColor: currentColors.gray,
                                arrowColor: currentColors.primary,
                                monthTextColor: currentColors.text,
                                indicatorColor: currentColors.primary,
                                textDayFontWeight: '300',
                                textMonthFontWeight: 'bold',
                                textDayHeaderFontWeight: '300',
                                textDayFontSize: 16,
                                textMonthFontSize: 16,
                                textDayHeaderFontSize: 13
                            }}
                            />
                        </View>
                    </View>
                </Modal>

            {/* 시간 선택 모달 */}
            <Modal
                visible={isTimeModalVisible}
                transparent={true}
                animationType="fade"
                onRequestClose={() => setTimeModalVisible(false)}
            >
                <View style={styles.centeredView}>
                    <View style={[styles.modalView, { width: 300, height: 400 }]}>
                        <View style={styles.modalHeader}>
                            <Text style={styles.modalTitle}>시간 선택</Text>
                            <TouchableOpacity onPress={() => setTimeModalVisible(false)}>
                                <Ionicons name="close" size={24} color={currentColors.gray} />
                            </TouchableOpacity>
                        </View>
                        <ScrollView style={styles.timeOptionsContainer}>
                            {['11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30', '18:00', '18:30', '19:00', '19:30', '20:00'].map((timeOption) => (
                                <TouchableOpacity
                                    key={timeOption}
                                    style={[
                                        styles.timeOption,
                                        time === timeOption && styles.selectedTimeOption
                                    ]}
                                    onPress={() => {
                                        setTime(timeOption);
                                        setTimeModalVisible(false);
                                    }}
                                >
                                    <Text style={[
                                        styles.timeOptionText,
                                        time === timeOption && styles.selectedTimeOptionText
                                    ]}>
                                        {timeOption}
                                    </Text>
                                </TouchableOpacity>
                            ))}
                        </ScrollView>
                    </View>
                </View>
            </Modal>

            {/* 최대 인원 선택 모달 */}
            <Modal
                visible={isMaxMembersModalVisible}
                transparent={true}
                animationType="fade"
                onRequestClose={() => setMaxMembersModalVisible(false)}
            >
                <View style={styles.centeredView}>
                    <View style={[styles.modalView, { width: 300, height: 400 }]}>
                        <View style={styles.modalHeader}>
                            <Text style={styles.modalTitle}>최대 인원 선택</Text>
                            <TouchableOpacity onPress={() => setMaxMembersModalVisible(false)}>
                                <Ionicons name="close" size={24} color={currentColors.gray} />
                            </TouchableOpacity>
                        </View>
                        <ScrollView style={styles.maxMembersOptionsContainer}>
                            {[2, 3, 4, 5, 6, 7, 8, 9, 10].map((memberCount) => (
                                <TouchableOpacity
                                    key={memberCount}
                                    style={[
                                        styles.maxMembersOption,
                                        maxMembers === memberCount && styles.selectedMaxMembersOption
                                    ]}
                                    onPress={() => {
                                        setMaxMembers(memberCount);
                                        setMaxMembersModalVisible(false);
                                    }}
                                >
                                    <Text style={[
                                        styles.maxMembersOptionText,
                                        maxMembers === memberCount && styles.selectedMaxMembersOptionText
                                    ]}>
                                        {memberCount}명
                                    </Text>
                                </TouchableOpacity>
                            ))}
                        </ScrollView>
                    </View>
                </View>
            </Modal>
        </SafeAreaView>
    );
}

function CreateDangolPotScreen({ navigation }) {
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');
    const [tags, setTags] = useState('');
    const [category, setCategory] = useState('');
    const [isCategoryModalVisible, setCategoryModalVisible] = useState(false);
    const CATEGORY_OPTIONS = ['한식', '중식', '일식', '양식', '분식', '아시안', '퓨전', '기타'];

    const handleSubmit = async () => {
        if (!name || !category) { Alert.alert("입력 오류", "단골파티 이름과 카테고리는 필수입니다."); return; }
        const response = await fetch(`${RENDER_SERVER_URL}/dangolpots`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name, description, tags, category, host_id: myEmployeeId }) });
        if (response.ok) { Alert.alert("성공", "단골파티가 생성되었습니다!"); navigation.goBack(); } 
        else { Alert.alert("오류", "단골파티 생성에 실패했습니다."); }
    };
    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.formContainer}>
                <Text style={styles.inputLabel}>단골파티 이름</Text><TextInput style={styles.input} value={name} onChangeText={setName} />
                <Text style={styles.inputLabel}>음식 카테고리</Text>
                <TouchableOpacity style={styles.input} onPress={() => setCategoryModalVisible(true)}><Text style={category ? styles.inputText : styles.placeholderText}>{category || "카테고리 선택"}</Text></TouchableOpacity>
                <Text style={styles.inputLabel}>소개</Text><TextInput style={[styles.input, {height: 100, textAlignVertical: 'top'}]} placeholder="어떤 모임인지 소개해주세요" value={description} onChangeText={setDescription} multiline />
                <Text style={styles.inputLabel}>관심사 태그</Text><TextInput style={styles.input} placeholder="예: #매운맛 #맛집탐방" value={tags} onChangeText={setTags} />
                <TouchableOpacity style={styles.submitButton} onPress={handleSubmit}><Text style={[styles.submitButtonText, {color: currentColors.white}]}>만들기</Text></TouchableOpacity>
                <SelectionModal visible={isCategoryModalVisible} title="카테고리 선택" options={CATEGORY_OPTIONS} selected={category} onSelect={setCategory} onClose={() => setCategoryModalVisible(false)} styles={styles} colors={currentColors} />
            </ScrollView>
        </SafeAreaView>
    );
}

function EditDangolPotScreen({ route, navigation }) {
    const { potData } = route.params;
    const [name, setName] = useState(potData.name);
    const [description, setDescription] = useState(potData.description);
    const [tags, setTags] = useState(potData.tags);
    const [category, setCategory] = useState(potData.category);
    const [isCategoryModalVisible, setCategoryModalVisible] = useState(false);
    const CATEGORY_OPTIONS = ['한식', '중식', '일식', '양식', '분식', '아시안', '퓨전', '기타'];

    const handleUpdate = async () => {
        if (!name || !category) { Alert.alert("입력 오류", "단골파티 이름과 카테고리는 필수입니다."); return; }
        const response = await fetch(`${RENDER_SERVER_URL}/dangolpots/${potData.id}`, { 
            method: 'PUT', 
            headers: { 'Content-Type': 'application/json' }, 
            body: JSON.stringify({ name, description, tags, category, employee_id: myEmployeeId }) 
        });
        if (response.ok) { Alert.alert("성공", "단골파티 정보가 수정되었습니다!"); navigation.goBack(); } 
        else { Alert.alert("오류", "단골파티 수정에 실패했습니다."); }
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.formContainer}>
                <Text style={styles.inputLabel}>단골파티 이름</Text><TextInput style={styles.input} value={name} onChangeText={setName} />
                <Text style={styles.inputLabel}>음식 카테고리</Text>
                <TouchableOpacity style={styles.input} onPress={() => setCategoryModalVisible(true)}><Text style={category ? styles.inputText : styles.placeholderText}>{category || "카테고리 선택"}</Text></TouchableOpacity>
                <Text style={styles.inputLabel}>소개</Text><TextInput style={[styles.input, {height: 100, textAlignVertical: 'top'}]} placeholder="어떤 모임인지 소개해주세요" value={description} onChangeText={setDescription} multiline />
                <Text style={styles.inputLabel}>관심사 태그</Text><TextInput style={styles.input} placeholder="예: #매운맛 #맛집탐방" value={tags} onChangeText={setTags} />
                <TouchableOpacity style={styles.submitButton} onPress={handleUpdate}><Text style={[styles.submitButtonText, {color: currentColors.white}]}>수정하기</Text></TouchableOpacity>
                <SelectionModal visible={isCategoryModalVisible} title="카테고리 선택" options={CATEGORY_OPTIONS} selected={category} onSelect={setCategory} onClose={() => setCategoryModalVisible(false)} styles={styles} colors={currentColors} />
            </ScrollView>
        </SafeAreaView>
    );
}

function CreatePersonalScheduleScreen({ navigation, route }) {
    const { date } = route.params;
    const [title, setTitle] = useState('');
    const [restaurant, setRestaurant] = useState('');
    const [selectedDate, setSelectedDate] = useState(new Date(date));
    const [time, setTime] = useState('');
    const [location, setLocation] = useState('');
    const [attendees, setAttendees] = useState('');
    const [description, setDescription] = useState('');
    const [isDateModalVisible, setDateModalVisible] = useState(false);
    const [isTimeModalVisible, setTimeModalVisible] = useState(false);
    const [suggestedTitles, setSuggestedTitles] = useState([]);
    const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false);
    const [markedDates, setMarkedDates] = useState({});

    // AI 점심 약속 제목 제안 기능
    const generateTitleSuggestions = async () => {
        if (!restaurant.trim()) {
            Alert.alert('알림', '식당명을 먼저 입력해주세요.');
            return;
        }

        try {
            setIsLoadingSuggestions(true);
            const response = await fetch(`${RENDER_SERVER_URL}/ai/suggest-party-titles`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    restaurant: restaurant.trim(),
                    date: new Date(date).toLocaleDateString('ko-KR'),
                    time: time.trim(),
                    location: location.trim()
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('서버에서 JSON 응답을 받지 못했습니다.');
            }
            
            const data = await response.json();
            setSuggestedTitles(data.suggestions || []);
        } catch (error) {
            console.error('AI 제목 제안 오류:', error);
            Alert.alert('오류', 'AI 제목 제안 기능을 사용할 수 없습니다. 나중에 다시 시도해주세요.');
        } finally {
            setIsLoadingSuggestions(false);
        }
    };

    const handleTitleSuggestion = (suggestion) => {
        setTitle(suggestion);
        setSuggestedTitles([]); // 제안 목록 닫기
    };

    const handleDateSelect = (selectedDate) => {
        setSelectedDate(selectedDate);
        setDateModalVisible(false);
    };

    const handleSave = async () => {
        if (!title.trim() || !restaurant.trim() || !time.trim()) {
            Alert.alert('입력 오류', '점심 약속 이름, 식당, 시간을 모두 입력해주세요.');
            return;
        }
        
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/personal_schedules`, { 
                method: 'POST', 
                headers: { 'Content-Type': 'application/json' }, 
                body: JSON.stringify({ 
                    employee_id: myEmployeeId, 
                    schedule_date: toLocalDateString(selectedDate), 
                    title, 
                    description: `${description}${time ? `\n시간: ${time}` : ''}${restaurant ? `\n식당: ${restaurant}` : ''}${location ? `\n장소: ${location}` : ''}${attendees ? `\n참석자: ${attendees}` : ''}`.trim()
                }), 
            });
            const data = await response.json();
            if (response.ok) { 
                Alert.alert('성공', '개인 일정이 추가되었습니다.'); 
                navigation.goBack(); 
            } else { 
                Alert.alert('오류', data.message || '저장에 실패했습니다.'); 
            }
        } catch (error) { 
            Alert.alert('오류', '네트워크 요청 중 문제가 발생했습니다.'); 
        }
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.formContainer}>
                <Text style={styles.inputLabel}>점심 약속 이름 *</Text>
                <View style={styles.titleInputContainer}>
                    <TextInput 
                        style={[styles.input, { flex: 1 }]} 
                        placeholder="점심 약속 이름을 입력하세요" 
                        value={title} 
                        onChangeText={setTitle} 
                    />
                    <TouchableOpacity
                        style={styles.aiSuggestButton}
                        onPress={generateTitleSuggestions}
                        disabled={isLoadingSuggestions}
                    >
                        <Ionicons 
                            name="sparkles" 
                            size={20} 
                            color={isLoadingSuggestions ? currentColors.gray : currentColors.primary} 
                        />
                    </TouchableOpacity>
                </View>

                {/* AI 제안 제목 목록 */}
                {suggestedTitles.length > 0 && (
                    <View style={styles.suggestionsContainer}>
                        <Text style={styles.suggestionsTitle}>AI 제안 제목</Text>
                        {suggestedTitles.map((suggestion, index) => (
                            <TouchableOpacity
                                key={index}
                                style={styles.suggestionItem}
                                onPress={() => handleTitleSuggestion(suggestion)}
                            >
                                <Text style={styles.suggestionText}>{suggestion}</Text>
                                <Ionicons name="arrow-forward" size={16} color={currentColors.primary} />
                            </TouchableOpacity>
                        ))}
                    </View>
                )}

                <Text style={styles.inputLabel}>식당 *</Text>
                <TextInput style={styles.input} placeholder="식당 이름을 입력하세요" value={restaurant} onChangeText={setRestaurant} />
                
                <Text style={styles.inputLabel}>날짜 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setDateModalVisible(true)}>
                    <Text style={styles.inputText}>
                        {selectedDate.toLocaleDateString('ko-KR')}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>시간 (선택)</Text>
                <TouchableOpacity style={styles.input} onPress={() => setTimeModalVisible(true)}>
                    <Text style={time ? styles.inputText : styles.placeholderText}>
                        {time || '시간을 선택하세요'}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>장소 (선택)</Text>
                <TextInput style={styles.input} placeholder="예: 판교역 2번 출구" value={location} onChangeText={setLocation} />
                
                <Text style={styles.inputLabel}>참석자 (선택)</Text>
                <TextInput style={styles.input} placeholder="참석자 이름을 입력하세요" value={attendees} onChangeText={setAttendees} />
                
                <Text style={styles.inputLabel}>설명 (선택)</Text>
                <TextInput 
                    style={[styles.input, { height: 100, textAlignVertical: 'top' }]} 
                    placeholder="점심 약속에 대한 설명을 입력하세요" 
                    value={description} 
                    onChangeText={setDescription} 
                    multiline 
                />
                
                <TouchableOpacity style={styles.submitButton} onPress={handleSave}>
                    <Text style={styles.submitButtonText}>저장하기</Text>
                </TouchableOpacity>
                
                <TouchableOpacity style={[styles.submitButton, { backgroundColor: currentColors.gray, marginTop: 10 }]} onPress={() => navigation.goBack()}>
                    <Text style={styles.submitButtonText}>취소하기</Text>
                </TouchableOpacity>
            </ScrollView>
            
            {/* 날짜 선택 모달 - 작은 캘린더 */}
            <Modal
                visible={isDateModalVisible}
                transparent={true}
                animationType="fade"
                onRequestClose={() => setDateModalVisible(false)}
            >
                <View style={styles.centeredView}>
                    <View style={[styles.modalView, { width: 350, height: 450, maxWidth: '90%', maxHeight: '80%' }]}>
                        <View style={styles.modalHeader}>
                            <Text style={styles.modalTitle}>날짜 선택</Text>
                            <TouchableOpacity onPress={() => setDateModalVisible(false)}>
                                <Ionicons name="close" size={24} color={currentColors.gray} />
                            </TouchableOpacity>
                        </View>
                        <Calendar
                            current={selectedDate instanceof Date && !isNaN(selectedDate) ? selectedDate : new Date()}
  onDayPress={(day) => handleDateSelect(new Date(day.timestamp))}
  markedDates={{
    [toLocalDateString(selectedDate instanceof Date && !isNaN(selectedDate) ? selectedDate : new Date())]: {
      selected: true,
      selectedColor: currentColors.primary
    }
                            }}
                            theme={{
                                calendarBackground: currentColors.surface,
                                textSectionTitleColor: currentColors.text,
                                selectedDayBackgroundColor: currentColors.primary,
                                selectedDayTextColor: currentColors.surface,
                                todayTextColor: currentColors.primary,
                                dayTextColor: currentColors.text,
                                textDisabledColor: currentColors.gray,
                                dotColor: currentColors.primary,
                                selectedDotColor: currentColors.surface,
                                arrowColor: currentColors.primary,
                                monthTextColor: currentColors.text,
                                indicatorColor: currentColors.primary,
                                textDayFontWeight: '300',
                                textMonthFontWeight: 'bold',
                                textDayHeaderFontWeight: '300',
                                textDayFontSize: 16,
                                textMonthFontSize: 16,
                                textDayHeaderFontSize: 13
                            }}
                        />
                    </View>
                </View>
            </Modal>
            
            <SelectionModal 
                visible={isTimeModalVisible} 
                title="시간 선택" 
                options={['11:30', '12:00', '12:30', '13:00', '13:30', '14:00']} 
                selected={time} 
                onSelect={setTime} 
                onClose={() => setTimeModalVisible(false)} 
                styles={styles} colors={currentColors} 
            />
        </SafeAreaView>
    );
}

function EditPersonalScheduleScreen({ route, navigation }) {
    const { schedule } = route.params;
    const [title, setTitle] = useState(schedule.title);
    const [selectedDate, setSelectedDate] = useState(new Date(schedule.schedule_date));
    // description에서 시간, 장소, 식당, 참석자, 메모 파싱
    let initialTime = '', initialLocation = '', initialRestaurant = '', initialAttendees = '', initialMemo = '';
    if (schedule.description) {
        const timeMatch = schedule.description.match(/시간: ([^\n]+)/);
        const locationMatch = schedule.description.match(/장소: ([^\n]+)/);
        const restaurantMatch = schedule.description.match(/식당: ([^\n]+)/);
        const attendeesMatch = schedule.description.match(/참석자: ([^\n]+)/);
        initialTime = timeMatch ? timeMatch[1].trim() : '';
        initialLocation = locationMatch ? locationMatch[1].trim() : '';
        initialRestaurant = restaurantMatch ? restaurantMatch[1].trim() : '';
        initialAttendees = attendeesMatch ? attendeesMatch[1].trim() : '';
        // 메모는 위 항목들 제외한 나머지
        initialMemo = schedule.description
            .replace(/시간: [^\n]+\n?/g, '')
            .replace(/장소: [^\n]+\n?/g, '')
            .replace(/식당: [^\n]+\n?/g, '')
            .replace(/참석자: [^\n]+\n?/g, '')
            .trim();
    }
    const [time, setTime] = useState(initialTime);
    const [location, setLocation] = useState(initialLocation);
    const [restaurant, setRestaurant] = useState(initialRestaurant);
    const [attendees, setAttendees] = useState(initialAttendees);
    const [memo, setMemo] = useState(initialMemo);
    const [isDateModalVisible, setDateModalVisible] = useState(false);
    const [isTimeModalVisible, setTimeModalVisible] = useState(false);

    const handleDateSelect = (selectedDate) => {
        setSelectedDate(selectedDate);
        setDateModalVisible(false);
    };

    const handleUpdate = async () => {
        if (!title.trim() || !restaurant.trim() || !time.trim()) {
            Alert.alert('입력 오류', '점심 약속 이름, 식당, 시간을 모두 입력해주세요.');
            return;
        }
        
        // description 재조립
        let desc = memo ? memo : '';
        if (time) desc += `${desc ? '\n' : ''}시간: ${time}`;
        if (restaurant) desc += `${desc ? '\n' : ''}식당: ${restaurant}`;
        if (location) desc += `${desc ? '\n' : ''}장소: ${location}`;
        if (attendees) desc += `${desc ? '\n' : ''}참석자: ${attendees}`;
        
        const response = await fetch(`${RENDER_SERVER_URL}/personal_schedules/${schedule.id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                title, 
                schedule_date: toLocalDateString(selectedDate),
                description: desc 
            })
        });
        if (response.ok) { Alert.alert("성공", "일정이 수정되었습니다."); navigation.goBack(); }
        else { Alert.alert("오류", "수정에 실패했습니다."); }
    };
    
    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.formContainer}>
                <Text style={styles.inputLabel}>점심 약속 이름 *</Text>
                <TextInput style={styles.input} value={title} onChangeText={setTitle} />
                
                <Text style={styles.inputLabel}>식당 *</Text>
                <TextInput style={styles.input} placeholder="식당 이름을 입력하세요" value={restaurant} onChangeText={setRestaurant} />
                
                <Text style={styles.inputLabel}>날짜 *</Text>
                <TouchableOpacity style={styles.input} onPress={() => setDateModalVisible(true)}>
                    <Text style={styles.inputText}>
                        {selectedDate.toLocaleDateString('ko-KR')}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>시간 (선택)</Text>
                <TouchableOpacity style={styles.input} onPress={() => setTimeModalVisible(true)}>
                    <Text style={time ? styles.inputText : styles.placeholderText}>
                        {time || '시간을 선택하세요'}
                    </Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>장소 (선택)</Text>
                <TextInput style={styles.input} placeholder="예: 판교역 2번 출구" value={location} onChangeText={setLocation} />
                
                <Text style={styles.inputLabel}>참석자 (선택)</Text>
                <TextInput style={styles.input} placeholder="참석자 이름을 입력하세요" value={attendees} onChangeText={setAttendees} />
                
                <Text style={styles.inputLabel}>설명 (선택)</Text>
                <TextInput style={[styles.input, { height: 100, textAlignVertical: 'top' }]} placeholder="점심 약속에 대한 설명을 입력하세요" value={memo} onChangeText={setMemo} multiline />
                
                <TouchableOpacity style={styles.submitButton} onPress={handleUpdate}>
                    <Text style={styles.submitButtonText}>수정 완료</Text>
                </TouchableOpacity>
            </ScrollView>
            
            {/* 날짜 선택 모달 - 작은 캘린더 */}
            <Modal
                visible={isDateModalVisible}
                transparent={true}
                animationType="fade"
                onRequestClose={() => setDateModalVisible(false)}
            >
                <View style={styles.centeredView}>
                    <View style={[styles.modalView, { width: 350, height: 450, maxWidth: '90%', maxHeight: '80%' }]}>
                        <View style={styles.modalHeader}>
                            <Text style={styles.modalTitle}>날짜 선택</Text>
                            <TouchableOpacity onPress={() => setDateModalVisible(false)}>
                                <Ionicons name="close" size={24} color={currentColors.gray} />
                            </TouchableOpacity>
                        </View>
                        <Calendar
                            current={selectedDate instanceof Date && !isNaN(selectedDate) ? selectedDate : new Date()}
  onDayPress={(day) => handleDateSelect(new Date(day.timestamp))}
  markedDates={{
    [toLocalDateString(selectedDate instanceof Date && !isNaN(selectedDate) ? selectedDate : new Date())]: {
      selected: true,
      selectedColor: currentColors.primary
    }
                            }}
                            theme={{
                                calendarBackground: currentColors.surface,
                                textSectionTitleColor: currentColors.text,
                                selectedDayBackgroundColor: currentColors.primary,
                                selectedDayTextColor: currentColors.surface,
                                todayTextColor: currentColors.primary,
                                dayTextColor: currentColors.text,
                                textDisabledColor: currentColors.gray,
                                dotColor: currentColors.primary,
                                selectedDotColor: currentColors.surface,
                                arrowColor: currentColors.primary,
                                monthTextColor: currentColors.text,
                                indicatorColor: currentColors.primary,
                                textDayFontWeight: '300',
                                textMonthFontWeight: 'bold',
                                textDayHeaderFontWeight: '300',
                                textDayFontSize: 16,
                                textMonthFontSize: 16,
                                textDayHeaderFontSize: 13
                            }}
                        />
                    </View>
                </View>
            </Modal>
            
            <SelectionModal 
                visible={isTimeModalVisible} 
                title="시간 선택" 
                options={['11:30', '12:00', '12:30', '13:00', '13:30', '14:00']} 
                selected={time} 
                onSelect={setTime} 
                onClose={() => setTimeModalVisible(false)} 
                styles={styles} colors={currentColors} 
            />
        </SafeAreaView>
    );
}

// --- 스마트 랜덤 런치 화면 ---
function RandomLunchScreen({ navigation }) {
    const [recommendations, setRecommendations] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [myAppointments, setMyAppointments] = useState({});
    const [appointments, setAppointments] = useState([]); // 날짜별 이벤트 배열
    const [modalData, setModalData] = useState({ visible: false, events: [], date: null });
    const [currentIndex, setCurrentIndex] = useState(0);
    const [proposedGroups, setProposedGroups] = useState(new Set());
    const [refreshing, setRefreshing] = useState(false);
    const { width: SCREEN_WIDTH } = Dimensions.get('window');

    useFocusEffect(
        useCallback(() => {
            fetchSmartRecommendations();
            fetchMyAppointments();
            fetchMyProposals();
        }, [])
    );

    const fetchSmartRecommendations = async () => {
        try {
            setIsLoading(true);
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/smart-recommendations?employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                // 오늘 이후 날짜만 필터링
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const filteredRecommendations = data.filter(recommendation => {
                    // proposed_date가 'YYYY-MM-DD' 형식인지 확인
                    if (!recommendation.proposed_date) return false;
                    
                    // UTC 기준으로 날짜 해석
                    const dateObj = new Date(recommendation.proposed_date + 'T00:00:00Z');
                    // 한국 시간(UTC+9)으로 변환
                    const koreaDate = new Date(dateObj.getTime() + 9 * 60 * 60 * 1000);
                    koreaDate.setHours(0, 0, 0, 0);
                    
                    return koreaDate > today; // 오늘보다 큰 날짜(내일부터)만 남김
                });
                
                setRecommendations(filteredRecommendations);
            } else {
                Alert.alert('오류', data.message || '추천 목록을 가져오는데 실패했습니다.');
            }
        } catch (error) {
            console.error('스마트 추천 조회 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        } finally {
            setIsLoading(false);
        }
    };

    const fetchMyAppointments = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/events/${myEmployeeId}`);
            const data = await response.json();
            if (response.ok && data) {
                const newMarkedDates = {};
                const upcoming = [];
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                for (let i = 0; i < 14; i++) {
                    const date = new Date(today);
                    date.setDate(today.getDate() + i);
                    const dateString = toLocalDateString(date);
                    const eventsOnDate = data[dateString] || [];
                    upcoming.push({ date: dateString, events: eventsOnDate });
                    if (eventsOnDate.length > 0) {
                        let hasRandomLunch = false;
                        let hasPersonalSchedule = false;
                        let hasOtherEvents = false;
                        eventsOnDate.forEach(event => {
                            if (event.type === '랜덤 런치') {
                                hasRandomLunch = true;
                            } else if (event.type === '개인 일정') {
                                hasPersonalSchedule = true;
                            } else {
                                hasOtherEvents = true;
                            }
                        });
                        let dotColor;
                        if (hasRandomLunch) {
                            dotColor = '#F4D160';
                        } else if (hasPersonalSchedule) {
                            dotColor = currentColors.gray;
                        } else {
                            dotColor = currentColors.primary;
                        }
                        newMarkedDates[dateString] = {
                            selected: true,
                            selectedColor: dotColor,
                            selectedTextColor: '#FFFFFF'
                        };
                    }
                }
                setAppointments(upcoming);
                setMyAppointments(newMarkedDates);
            }
        } catch (error) {
            console.error('내 일정 조회 오류:', error);
        }
    };

    const fetchMyProposals = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/mine?employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                // pending 상태인 제안들의 그룹 키를 추출
                const sentProposals = data.sent_proposals || [];
                const pendingProposals = sentProposals.filter(p => p.status === 'pending');
                
                const proposedGroupKeys = new Set();
                pendingProposals.forEach(proposal => {
                    if (proposal.recipient_ids) {
                        const recipientIds = parseRecipientIds(proposal.recipient_ids);
                        if (recipientIds.length > 0) {
                            const groupKey = getGroupKeyFromIds(recipientIds);
                            proposedGroupKeys.add(groupKey);
                        }
                    }
                });
                
                // 기존 제안 상태를 완전히 교체 (새로운 상태로 업데이트)
                setProposedGroups(proposedGroupKeys);
                console.log('제안 상태 업데이트 완료:', Array.from(proposedGroupKeys));
            }
        } catch (error) {
            console.error('제안 상태 조회 오류:', error);
        }
    };

    const handleProposeGroup = async (recommendation) => {
        try {
            const recipientIds = recommendation.recommended_group
                .map(member => member.employee_id)
                .filter(id => id && id.trim().length > 0)
                .join(',');
            
            const response = await fetch(`${RENDER_SERVER_URL}/proposals`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    proposer_id: myEmployeeId,
                    recipient_ids: recipientIds,
                    proposed_date: recommendation.proposed_date
                })
            });
            
            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', '그룹에 제안을 보냈습니다!');
                // 제안한 그룹을 pending 상태로 추가
                const groupKey = getGroupKeyFromIds(parseRecipientIds(recipientIds));
                setProposedGroups(prev => new Set([...prev, groupKey]));
                fetchMyProposals();
            } else {
                Alert.alert('오류', data.message || '제안 전송에 실패했습니다.');
            }
        } catch (error) {
            console.error('제안 전송 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    const handleCancelProposal = async (recommendation) => {
        try {
            const recipientIds = recommendation.recommended_group
                .map(member => member.employee_id)
                .filter(id => id && id.trim().length > 0)
                .join(',');
            
            // 내가 보낸 제안 중에서 해당 그룹과 날짜가 일치하는 제안 찾기
            const response = await fetch(`${RENDER_SERVER_URL}/proposals/mine?employee_id=${myEmployeeId}`);
            const data = await response.json();
            
            if (response.ok) {
                const sentProposals = data.sent_proposals || [];
                
                // recipient_ids와 proposed_date로 매칭하는 제안 찾기
                const targetProposal = sentProposals.find(proposal => {
                    const proposalRecipients = parseRecipientIds(proposal.recipient_ids);
                    const currentRecipients = parseRecipientIds(recipientIds);
                    const proposalKey = getGroupKeyFromIds(proposalRecipients);
                    const currentKey = getGroupKeyFromIds(currentRecipients);
                    
                    return proposalKey === currentKey && 
                           proposal.proposed_date === recommendation.proposed_date &&
                           proposal.status === 'pending';
                });
                
                if (targetProposal) {
                    // 제안 취소 API 호출
                    const cancelResponse = await fetch(`${RENDER_SERVER_URL}/proposals/${targetProposal.id}/cancel`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            user_id: myEmployeeId
                        })
                    });
                    
                    const cancelData = await cancelResponse.json();
                    
                    if (cancelResponse.ok) {
                        // 제안한 그룹에서 제거 (성공 시에만)
                        const groupKey = getGroupKeyFromIds(parseRecipientIds(recipientIds));
                        setProposedGroups(prev => {
                            const newSet = new Set(prev);
                            newSet.delete(groupKey);
                            return newSet;
                        });
                        Alert.alert('성공', '제안이 취소되었습니다.');
                        fetchMyProposals();
                    } else {
                        Alert.alert('오류', cancelData.message || '제안 취소에 실패했습니다.');
                    }
                } else {
                    // 백엔드에서 찾지 못했지만 프론트엔드에서는 제안된 상태라면 로컬에서만 제거
                    const groupKey = getGroupKeyFromIds(parseRecipientIds(recipientIds));
                    setProposedGroups(prev => {
                        const newSet = new Set(prev);
                        newSet.delete(groupKey);
                        return newSet;
                    });
                    Alert.alert('성공', '제안이 취소되었습니다.');
                    fetchMyProposals();
                }
            } else {
                // API 호출 실패 시에도 로컬에서 제거
                const groupKey = getGroupKeyFromIds(parseRecipientIds(recipientIds));
                setProposedGroups(prev => {
                    const newSet = new Set(prev);
                    newSet.delete(groupKey);
                    return newSet;
                });
                Alert.alert('성공', '제안이 취소되었습니다.');
                fetchMyProposals();
            }
        } catch (error) {
            console.error('제안 취소 오류:', error);
            // 에러 발생 시에도 로컬에서 제거
            const recipientIds = recommendation.recommended_group
                .map(member => member.employee_id)
                .filter(id => id && id.trim().length > 0)
                .join(',');
            const groupKey = getGroupKeyFromIds(parseRecipientIds(recipientIds));
            setProposedGroups(prev => {
                const newSet = new Set(prev);
                newSet.delete(groupKey);
                return newSet;
            });
            Alert.alert('성공', '제안이 취소되었습니다.');
            fetchMyProposals();
        }
    };

    const onRefresh = async () => {
        setRefreshing(true);
        await fetchSmartRecommendations();
        await fetchMyProposals();
        setRefreshing(false);
    };

    const renderRecommendationCard = ({ item }) => {
        const date = new Date(item.proposed_date);
        const dayOfWeek = ['일', '월', '화', '수', '목', '금', '토'][date.getDay()];
// 추천 그룹 카드에서
const groupUserIds = item.recommended_group
    ? item.recommended_group.map(member => member.employee_id).filter(Boolean)
    : item.users.map(user => user.employee_id).filter(Boolean); // 상황에 따라
const groupKey = getGroupKeyFromIds(groupUserIds);

const isProposed = proposedGroups.has(groupKey);        
        
        return (
            <View style={{
                backgroundColor: currentColors.surface,
                borderRadius: 16,
                marginHorizontal: 16,
                marginBottom: 16,
                padding: 20,
                elevation: 3,
                shadowColor: currentColors.primary,
                shadowOffset: { width: 0, height: 4 },
                shadowOpacity: 0.1,
                shadowRadius: 8,
                borderWidth: 1,
                borderColor: 'rgba(59, 130, 246, 0.1)',
                width: SCREEN_WIDTH - 32
            }}>
                <Text style={{
                    fontSize: 18,
                    fontWeight: 'bold',
                    color: currentColors.text,
                    marginBottom: 16
                }}>
                    {`${date.getMonth() + 1}월 ${date.getDate()}일(${dayOfWeek}) 추천 그룹`}
                </Text>
                
                {item.recommended_group.map((member, index) => (
                    <View key={index} style={{
                        backgroundColor: currentColors.background,
                        borderRadius: 12,
                        padding: 12,
                        marginBottom: 8,
                        borderWidth: 1,
                        borderColor: currentColors.lightGray
                    }}>
                        <View style={{
                            flexDirection: 'row',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                            marginBottom: 4
                        }}>
                            <Text style={{
                                fontSize: 16,
                                fontWeight: 'bold',
                                color: currentColors.text
                            }}>
                                {member.nickname}
                            </Text>
                            <View style={{
                                backgroundColor: currentColors.primaryLight,
                                borderRadius: 12,
                                paddingHorizontal: 8,
                                paddingVertical: 4
                            }}>
                                <Text style={{
                                    fontSize: 12,
                                    color: currentColors.primary,
                                    fontWeight: 'bold'
                                }}>
                                    {member.dining_history}
                                </Text>
                            </View>
                        </View>
                        <Text style={{
                            fontSize: 14,
                            color: currentColors.textSecondary
                        }}>
                            {member.lunch_preference}
                        </Text>
                    </View>
                ))}
                
                <TouchableOpacity
                    style={{
                        backgroundColor: isProposed ? currentColors.red : currentColors.primary,
                        borderRadius: 12,
                        paddingVertical: 12,
                        paddingHorizontal: 20,
                        alignItems: 'center',
                        marginTop: 12
                    }}
                    onPress={() => isProposed ? handleCancelProposal(item) : handleProposeGroup(item)}
                >
                    <Text style={{
                        color: '#FFFFFF',
                        fontSize: 16,
                        fontWeight: 'bold'
                    }}>
                        {isProposed ? '제안 취소' : '이 그룹에 제안하기'}
                    </Text>
                </TouchableOpacity>
            </View>
        );
    };

    if (isLoading) {
        return (
            <SafeAreaView style={styles.safeArea}>
                <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
                    <ActivityIndicator size="large" color={currentColors.primary} />
                    <Text style={{fontSize: 16, color: currentColors.textSecondary, marginTop: 16}}>
                        스마트 추천을 분석하는 중...
                    </Text>
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView 
                style={{flex: 1, backgroundColor: currentColors.background}}
                refreshControl={
                    <RefreshControl
                        refreshing={refreshing}
                        onRefresh={onRefresh}
                        colors={[currentColors.primary]}
                        tintColor={currentColors.primary}
                    />
                }
            >
                <View style={{
                    paddingHorizontal: 16,
                    paddingVertical: 20,
                    backgroundColor: currentColors.surface,
                    marginBottom: 16
                }}>
                    <Text style={{
                        fontSize: 24,
                        fontWeight: 'bold',
                        color: currentColors.text,
                        marginBottom: 8
                    }}>
                        랜덤 런치 🎯
                    </Text>
                    <Text style={{
                        fontSize: 16,
                        color: currentColors.textSecondary,
                        lineHeight: 22
                    }}>
                        새로운 동료와 점심 약속을 잡아보세요.
                    </Text>
                    <Text style={{
                        fontSize: 14,
                        color: currentColors.textSecondary,
                        marginTop: 8,
                        fontStyle: 'italic'
                    }}>
                        아래로 스와이프하여 새로운 추천을 받아보세요!
                    </Text>
                </View>

                {recommendations.length > 0 ? (
                    <>
                    <FlatList
                        data={recommendations}
                        renderItem={renderRecommendationCard}
                        keyExtractor={(item, index) => `recommendation-${index}`}
                        horizontal
                        pagingEnabled
                        showsHorizontalScrollIndicator={false}
                        onMomentumScrollEnd={event => {
                            const index = Math.round(event.nativeEvent.contentOffset.x / (SCREEN_WIDTH - 32));
                            setCurrentIndex(index);
                        }}
                        contentContainerStyle={{ paddingHorizontal: 0 }}
                    />
                    {recommendations.length > 1 && (
                        <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center', marginTop: 16, marginBottom: 8 }}>
                            {recommendations.map((_, idx) => (
                                <View
                                    key={idx}
                                    style={{
                                        width: 8,
                                        height: 8,
                                        borderRadius: 4,
                                        backgroundColor: idx === currentIndex ? currentColors.primary : currentColors.lightGray,
                                        marginHorizontal: 4
                                    }}
                                />
                            ))}
                        </View>
                    )}
                    </>
                ) : (
                    <View style={{
                        paddingHorizontal: 16,
                        paddingVertical: 40,
                        alignItems: 'center'
                    }}>
                        <Text style={{
                            fontSize: 18,
                            color: currentColors.textSecondary,
                            textAlign: 'center',
                            marginBottom: 8
                        }}>
                            현재 추천할 수 있는 그룹이 없습니다.
                        </Text>
                        <Text style={{
                            fontSize: 14,
                            color: currentColors.textSecondary,
                            textAlign: 'center'
                        }}>
                            잠시 후 다시 시도해주세요.
                        </Text>
                    </View>
                )}

                <View style={{
                    marginHorizontal: 16,
                    marginTop: 20,
                    marginBottom: 40
                }}>
                    <Text style={{
                        fontSize: 18,
                        fontWeight: 'bold',
                        color: currentColors.text,
                        marginBottom: 12
                    }}>
                        내 캘린더 📅
                    </Text>
                    <View style={{
                        backgroundColor: currentColors.surface,
                        borderRadius: 16,
                        padding: 16,
                        elevation: 2,
                        shadowColor: currentColors.primary,
                        shadowOffset: { width: 0, height: 2 },
                        shadowOpacity: 0.1,
                        shadowRadius: 4
                    }}>
                        <Calendar
                            markedDates={myAppointments}
                            onDayPress={(day) => {
                                const events = (appointments || []).find(a => a.date === day.dateString)?.events || [];
                                setModalData({ visible: true, events: events, date: day.dateString });
                            }}
                            theme={{
                                selectedDayBackgroundColor: currentColors.primary,
                                todayTextColor: currentColors.primary,
                                arrowColor: currentColors.primary,
                                selectedDayTextColor: '#FFFFFF',
                                'stylesheet.calendar.header': {
                                    week: {
                                        marginTop: 5,
                                        flexDirection: 'row',
                                        justifyContent: 'space-between'
                                    }
                                },
                                'stylesheet.day.basic': {
                                    base: {
                                        width: 32,
                                        height: 32,
                                        alignItems: 'center',
                                        justifyContent: 'center'
                                    }
                                }
                            }}
                        />
                    </View>
                </View>
            </ScrollView>
            <Modal visible={modalData.visible} transparent={true} animationType="fade" onRequestClose={() => setModalData({ ...modalData, visible: false })}>
                <View style={styles.centeredView}>
                    <View style={styles.modalView}>
                        {(modalData.events || []).length > 0 ? (
                            <>
                                <Text style={styles.modalTitle}>{new Date(modalData.date).toLocaleDateString('ko-KR', { month: 'long', day: 'numeric' })} 점심 약속</Text>
                                <ScrollView style={{width: '100%', maxHeight: SCREEN_HEIGHT * 0.5 }}>
                                    {modalData.events.map((event, index) => (
                                        <View key={index} style={styles.modalDetailCard}>
                                            <Text style={styles.eventTitle}>{event.type === '랜덤 런치' ? '⚡️' : (event.type === '파티' ? '🎉' : '📝')} {event.title}</Text>
                                            {event.type !== '개인 일정' ? (
                                                <>
                                                    <Text style={styles.modalDetailText}>∙ 일시: {event.date} {event.time}</Text>
                                                    <Text style={styles.modalDetailText}>∙ 식당: {event.restaurant}</Text>
                                                    {event.address && <Text style={styles.modalDetailText}>∙ 주소: {event.address}</Text>}
                                                    <Text style={styles.modalDetailText}>∙ 장소: {event.location}</Text>
                                                    <Text style={styles.modalDetailText}>∙ 참석자: {(event.all_members || []).join(', ')}</Text>
                                                    <TouchableOpacity style={[styles.button, {backgroundColor: currentColors.primary, marginTop: 15}]} onPress={() => { setModalData({ visible: false }); navigation.navigate('소통', { screen: 'ChatRoom', params: { chatId: event.id, chatType: 'party', chatTitle: event.title } }); }}><Text style={styles.textStyle}>채팅방으로 이동</Text></TouchableOpacity>
                                                </>
                                            ) :
                                                <>
                                                    <Text style={styles.modalDetailText}>{event.description || '메모 없음'}</Text>
                                                    <View style={{flexDirection: 'row', justifyContent: 'space-around', marginTop: 15}}>
                                                        <TouchableOpacity style={[styles.button, {backgroundColor: currentColors.primary, width: '48%'}]} onPress={() => handleEditPersonalSchedule(event)}>
                                                            <Text style={[styles.textStyle, {color: '#FFFFFF'}]}>수정</Text>
                                                        </TouchableOpacity>
                                                        <TouchableOpacity style={[styles.button, {backgroundColor: currentColors.gray, width: '48%'}]} onPress={() => handleDeletePersonalSchedule(event.id)}>
                                                            <Text style={[styles.textStyle, {color: '#FFFFFF'}]}>삭제</Text>
                                                        </TouchableOpacity>
                                                    </View>
                                                </>
                                            }
                                        </View>
                                    ))}
                                </ScrollView>
                            </>
                        ) :
                            <>
                                <Text style={styles.modalTitle}>점심 약속을 만들어 볼까요?</Text>
                                <TouchableOpacity
                                    style={{
                                        backgroundColor: currentColors.yellow,
                                        borderRadius: 18,
                                        marginTop: 12,
                                        marginBottom: 8,
                                        paddingVertical: 16,
                                        paddingHorizontal: 20,
                                        alignItems: 'center',
                                        elevation: 4,
                                        width: '100%',
                                    }}
                                    onPress={() => { setModalData({ visible: false }); navigation.navigate('파티', { screen: 'RandomLunch' }); }}
                                >
                                    <Text style={{ color: currentColors.deepBlue, fontSize: 16, fontWeight: 'bold' }}>
                                        🎲 랜덤 런치 시작하기
                                    </Text>
                                </TouchableOpacity>
                                <TouchableOpacity
                                    style={{
                                        backgroundColor: currentColors.primary,
                                        borderRadius: 18,
                                        marginTop: 8,
                                        marginBottom: 8,
                                        paddingVertical: 16,
                                        paddingHorizontal: 20,
                                        alignItems: 'center',
                                        elevation: 4,
                                        width: '100%',
                                    }}
                                    onPress={() => { setModalData({ visible: false }); navigation.navigate('파티'); }}
                                >
                                    <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: 'bold' }}>
                                        🎉 파티 참여하기
                                    </Text>
                                </TouchableOpacity>
                                <TouchableOpacity
                                    style={{
                                        backgroundColor: currentColors.gray,
                                        borderRadius: 18,
                                        marginTop: 8,
                                        marginBottom: 12,
                                        paddingVertical: 16,
                                        paddingHorizontal: 20,
                                        alignItems: 'center',
                                        elevation: 4,
                                        width: '100%',
                                    }}
                                    onPress={() => { setModalData({ visible: false }); navigation.navigate('파티', { screen: 'CreatePersonalSchedule', params: { date: modalData.date } }); }}
                                >
                                    <Text style={{ color: '#FFFFFF', fontSize: 16, fontWeight: 'bold' }}>
                                        📝 개인 점심 약속 추가
                                    </Text>
                                </TouchableOpacity>
                            </>
                        }
                    </View>
                </View>
            </Modal>
        </SafeAreaView>
    );
}

// --- 소통 탭 ---
function ChatListScreen({ navigation }) {
    const [chats, setChats] = useState([]);
    const [filteredChats, setFilteredChats] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [activeFilter, setActiveFilter] = useState('all');
    const [refreshing, setRefreshing] = useState(false);

    const fetchChats = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/chats/${myEmployeeId}`);
            const data = await response.json();
            if(Array.isArray(data)) {
                setChats(data);
                setFilteredChats(data);
            }
        } catch (error) {
            console.error('채팅 목록 조회 오류:', error);
        }
    };

    useFocusEffect(useCallback(() => {
        setIsLoading(true);
        fetchChats().finally(() => setIsLoading(false));
    }, []));

    const onRefresh = async () => {
        setRefreshing(true);
        await fetchChats();
        setRefreshing(false);
    };

    const handleFilterChange = (filter) => {
        setActiveFilter(filter);
        if (filter === 'all') {
            setFilteredChats(chats);
        } else if (filter === 'party') {
            setFilteredChats(chats.filter(chat => chat.type === 'party'));
        } else if (filter === 'dangolpot') {
            setFilteredChats(chats.filter(chat => chat.type === 'dangolpot'));
        } else if (filter === 'custom') {
            setFilteredChats(chats.filter(chat => chat.type === 'custom'));
        }
    };

    if (isLoading) return <ActivityIndicator style={{flex: 1}} size="large" color={currentColors.primary} />;
    
    return (
        <SafeAreaView style={styles.safeArea}>
            {/* 채팅 필터 */}
            <View style={{paddingHorizontal: 16, paddingVertical: 12, backgroundColor: currentColors.background}}>
                <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                    <TouchableOpacity
                        style={{
                            backgroundColor: activeFilter === 'all' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: activeFilter === 'all' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: activeFilter === 'all' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: activeFilter === 'all' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => handleFilterChange('all')}
                    >
                        <Text style={{
                            color: activeFilter === 'all' ? '#FFFFFF' : currentColors.text,
                            fontWeight: activeFilter === 'all' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            전체
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={{
                            backgroundColor: activeFilter === 'party' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: activeFilter === 'party' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: activeFilter === 'party' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: activeFilter === 'party' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => handleFilterChange('party')}
                    >
                        <Text style={{
                            color: activeFilter === 'party' ? '#FFFFFF' : currentColors.text,
                            fontWeight: activeFilter === 'party' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            파티
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={{
                            backgroundColor: activeFilter === 'dangolpot' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: activeFilter === 'dangolpot' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: activeFilter === 'dangolpot' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: activeFilter === 'dangolpot' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => handleFilterChange('dangolpot')}
                    >
                        <Text style={{
                            color: activeFilter === 'dangolpot' ? '#FFFFFF' : currentColors.text,
                            fontWeight: activeFilter === 'dangolpot' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            단골파티
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={{
                            backgroundColor: activeFilter === 'custom' ? currentColors.primary : currentColors.surface,
                            borderRadius: 20,
                            paddingVertical: 8,
                            paddingHorizontal: 16,
                            marginRight: 8,
                            elevation: activeFilter === 'custom' ? 2 : 1,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: activeFilter === 'custom' ? 0.2 : 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: activeFilter === 'custom' ? currentColors.primary : currentColors.lightGray
                        }}
                        onPress={() => handleFilterChange('custom')}
                    >
                        <Text style={{
                            color: activeFilter === 'custom' ? '#FFFFFF' : currentColors.text,
                            fontWeight: activeFilter === 'custom' ? 'bold' : '600',
                            fontSize: 14
                        }}>
                            개인채팅
                        </Text>
                    </TouchableOpacity>
                </ScrollView>
            </View>

            <FlatList 
                data={filteredChats} 
                keyExtractor={item => `${item.type}-${item.id}`} 
                refreshing={refreshing}
                onRefresh={onRefresh}
                ListEmptyComponent={<Text style={{fontSize: 16, color: currentColors.textSecondary, textAlign: 'center', marginTop: 50, paddingHorizontal: 16}}>참여 중인 채팅방이 없습니다.</Text>} 
                renderItem={({ item }) => (
                    <TouchableOpacity 
                        style={{
                            backgroundColor: currentColors.surface,
                            borderRadius: 16,
                            marginHorizontal: 16,
                            marginBottom: 12,
                            padding: 16,
                            flexDirection: 'row',
                            alignItems: 'center',
                            elevation: 2,
                            shadowColor: currentColors.primary,
                            shadowOffset: { width: 0, height: 2 },
                            shadowOpacity: 0.1,
                            shadowRadius: 4,
                            borderWidth: 1,
                            borderColor: 'rgba(99, 102, 241, 0.2)'
                        }} 
                        onPress={() => navigation.navigate('ChatRoom', { chatId: item.id, chatType: item.type, chatTitle: item.title })}
                    >
                        <View style={{
                            backgroundColor: currentColors.primary,
                            borderRadius: 12,
                            width: 48,
                            height: 48,
                            justifyContent: 'center',
                            alignItems: 'center',
                            marginRight: 12
                        }}>
                            <Ionicons 
                                name={item.type === 'dangolpot' ? 'heart-circle' : (item.is_from_match ? 'shuffle' : 'restaurant')} 
                                size={24} 
                                color="white" 
                            />
                        </View>
                        <View style={{flex: 1}}>
                            <Text style={{fontSize: 16, fontWeight: 'bold', color: currentColors.text, marginBottom: 4}}>{item.title}</Text>
                            <Text style={{fontSize: 14, color: currentColors.textSecondary}}>{item.subtitle}</Text>
                            {item.last_message && (
                                <Text style={{fontSize: 12, color: currentColors.textSecondary, marginTop: 2}} numberOfLines={1}>
                                    {item.last_message}
                                </Text>
                            )}
                        </View>
                        <Ionicons name="chevron-forward" size={24} color={currentColors.textSecondary} />
                    </TouchableOpacity>
                )} 
                contentContainerStyle={{paddingTop: 16}} 
            />
            
            {/* 플로팅 채팅방 생성 버튼 */}
            <TouchableOpacity
                style={{
                    position: 'absolute',
                    right: 24,
                    bottom: 32,
                    width: 56,
                    height: 56,
                    borderRadius: 28,
                    backgroundColor: currentColors.primary,
                    justifyContent: 'center',
                    alignItems: 'center',
                    zIndex: 10,
                    elevation: 8,
                    shadowColor: currentColors.primary,
                    shadowOffset: { width: 0, height: 4 },
                    shadowOpacity: 0.3,
                    shadowRadius: 8
                }}
                activeOpacity={0.85}
                onPress={() => navigation.navigate('CreateChatRoom')}
            >
                <Ionicons name="chatbubbles" size={28} color="#fff" />
            </TouchableOpacity>
        </SafeAreaView>
    );
}

function ChatRoomScreen({ route, navigation }) {
    const { chatId, chatType, chatTitle: initialChatTitle } = route.params;
    const [chatDetails, setChatDetails] = useState(null);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [socket, setSocket] = useState(null);
    const [isConnected, setIsConnected] = useState(false);
    const [isSearchVisible, setIsSearchVisible] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    const [isImagePickerVisible, setIsImagePickerVisible] = useState(false);
    const [chatMembers, setChatMembers] = useState([]);
    const [isTitleEditVisible, setIsTitleEditVisible] = useState(false);
    const [isMembersVisible, setIsMembersVisible] = useState(false);
    const [newTitle, setNewTitle] = useState('');
    const [chatTitle, setChatTitle] = useState(initialChatTitle);
    const flatListRef = useRef(null);
    const [isMenuVisible, setIsMenuVisible] = useState(false);
    useEffect(() => {
        navigation.setOptions({
          headerRight: () => (
            <View style={{ flexDirection: 'row', marginRight: 10 }}>
              <TouchableOpacity onPress={() => setIsSearchVisible(!isSearchVisible)} style={{ marginRight: 16 }}>
                <Ionicons name="search" size={24} color={currentColors.text} />
              </TouchableOpacity>
              <TouchableOpacity onPress={() => setIsMenuVisible(true)}>
                <Ionicons name="menu" size={28} color={currentColors.text} />
              </TouchableOpacity>
            </View>
          ),
        });
      }, [navigation, setIsSearchVisible, setIsMenuVisible, currentColors.text]);

    // WebSocket 연결 및 실시간 읽음 처리 (임시로 비활성화)
    useEffect(() => {
        // WebSocket 연결이 설정되지 않은 경우를 대비해 임시로 연결된 것으로 처리
        setIsConnected(true);
        
        // 실제 WebSocket 연결은 백엔드 구현 후 활성화
        /*
        // WebSocket URL 생성
        let wsUrl = RENDER_SERVER_URL;
        if (wsUrl.startsWith('https://')) {
            wsUrl = wsUrl.replace('https://', 'wss://');
        } else if (wsUrl.startsWith('http://')) {
            wsUrl = wsUrl.replace('http://', 'ws://');
        }
        
        console.log('Attempting to connect to WebSocket:', wsUrl);
        
        const newSocket = io(wsUrl, {
            transports: ['polling', 'websocket'],
            timeout: 30000,
            forceNew: true,
            reconnection: true,
            reconnectionAttempts: 5,
            reconnectionDelay: 1000,
            reconnectionDelayMax: 5000
        });
        
        newSocket.on('connect', () => {
            console.log('Connected to WebSocket');
            setIsConnected(true);
            
            // 채팅방에 참여
            newSocket.emit('join_chat', {
                chat_type: chatType,
                chat_id: chatId
            });
        });

        newSocket.on('disconnect', (reason) => {
            console.log('Disconnected from WebSocket:', reason);
            setIsConnected(false);
        });

        newSocket.on('connect_error', (error) => {
            console.log('WebSocket connection error:', error);
            setIsConnected(false);
        });

        newSocket.on('reconnect', (attemptNumber) => {
            console.log('Reconnected to WebSocket after', attemptNumber, 'attempts');
            setIsConnected(true);
            
            // 재연결 시 채팅방에 다시 참여
            newSocket.emit('join_chat', {
                chat_type: chatType,
                chat_id: chatId
            });
        });

        newSocket.on('reconnect_error', (error) => {
            console.log('WebSocket reconnection error:', error);
            setIsConnected(false);
        });

        newSocket.on('new_message', (message) => {
            console.log('New message received:', message);
            setMessages(prev => [...prev, message]);
        });

        // 실시간 읽음 처리 이벤트
        newSocket.on('message_read', (data) => {
            console.log('Message read event received:', data);
            setMessages(prev => 
                prev.map(msg => 
                    msg.id === data.message_id 
                        ? { ...msg, unread_count: data.unread_count }
                        : msg
                )
            );
        });

        setSocket(newSocket);

        return () => {
            if (newSocket) {
                newSocket.emit('leave_chat', {
                    chat_type: chatType,
                    chat_id: chatId
                });
                newSocket.disconnect();
            }
        };
        */
    }, [chatId, chatType]);

    // 채팅방 정보 및 메시지 로드
    useFocusEffect(useCallback(() => { 
        const loadChatData = async () => {
            try {
                // 채팅방 정보 로드
                if (chatType === 'party') {
                    const response = await fetch(`${RENDER_SERVER_URL}/parties/${chatId}`);
                    const data = await response.json();
                    setChatDetails(data);
                    
                    // 파티 참가자 목록 가져오기
                    const membersResponse = await fetch(`${RENDER_SERVER_URL}/parties/${chatId}/members`);
                    if (membersResponse.ok) {
                        const membersData = await membersResponse.json();
                        setChatMembers(membersData);
                    }
                } else if (chatType === 'dangolpot') {
                    const response = await fetch(`${RENDER_SERVER_URL}/dangolpots/${chatId}`);
                    const data = await response.json();
                    setChatDetails(data);
                    
                    // 단골파티 참가자 목록 가져오기
                    const membersResponse = await fetch(`${RENDER_SERVER_URL}/dangolpots/${chatId}/members`);
                    if (membersResponse.ok) {
                        const membersData = await membersResponse.json();
                        setChatMembers(membersData);
                    }
                } else if (chatType === 'custom') {
                    // 개인 채팅의 경우 기본 채팅방 정보 설정
                    setChatDetails({
                        id: chatId,
                        title: chatTitle,
                        type: 'custom',
                        created_at: new Date().toISOString()
                    });
                    
                    // 개인 채팅의 경우 친구 목록에서 참가자 가져오기
                    const membersResponse = await fetch(`${RENDER_SERVER_URL}/friends?employee_id=${myEmployeeId}`);
                    if (membersResponse.ok) {
                        const friendsData = await membersResponse.json();
                        // 채팅방 제목에서 친구 이름 추출 (예: "홍길동님과의 채팅" -> "홍길동")
                        const friendName = chatTitle.replace('님과의 채팅', '');
                        const friend = friendsData.find(f => f.nickname === friendName);
                        if (friend) {
                            setChatMembers([friend]);
                        }
                    }
                }

                // 메시지 로드
                const messagesResponse = await fetch(`${RENDER_SERVER_URL}/chat/messages/${chatType}/${chatId}`);
                const messagesData = await messagesResponse.json();
                setMessages(messagesData);
            } catch (error) {
                console.error('Error loading chat data:', error);
        }
        };

        loadChatData();
    }, [chatId, chatType]));

    // 메시지 전송
    const sendMessage = async () => {
        if (!newMessage.trim()) return;

        const messageText = newMessage.trim();
        setNewMessage(''); // 즉시 입력창 비우기

        try {
            console.log('Sending message:', messageText);
            
            // HTTP API로 메시지 전송 (WebSocket 연결 문제로 인해 HTTP만 사용)
            console.log('Sending via HTTP API');
            const response = await fetch(`${RENDER_SERVER_URL}/chat/messages`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
            chat_type: chatType,
            chat_id: chatId,
            sender_employee_id: myEmployeeId,
                    message: messageText
                })
            });

            if (response.ok) {
                const responseData = await response.json();
                console.log('Message sent via HTTP:', responseData);
                
                // 서버에서 받은 메시지 데이터로 로컬에 추가
                const newMsg = {
                    id: responseData.id || Date.now(),
                    sender_employee_id: myEmployeeId,
                    sender_nickname: myNickname,
                    message: messageText,
                    created_at: responseData.created_at || new Date().toISOString(),
                    chat_type: chatType,
                    chat_id: chatId,
                    unread_count: 0
                };
                setMessages(prev => [...prev, newMsg]);
            } else {
                const errorData = await response.json();
                console.error('Message send failed:', errorData);
                Alert.alert('오류', errorData.message || '메시지 전송에 실패했습니다.');
                setNewMessage(messageText); // 실패 시 다시 입력창에 복원
            }
        } catch (error) {
            console.error('메시지 전송 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
            setNewMessage(messageText); // 실패 시 다시 입력창에 복원
        }
    };

    // 메시지 검색
    const searchMessages = async () => {
        if (!searchQuery.trim()) {
            setSearchResults([]);
            return;
        }

        try {
            setIsSearching(true);
            const response = await fetch(`${RENDER_SERVER_URL}/chat/messages/search?employee_id=${myEmployeeId}&chat_type=${chatType}&chat_id=${chatId}&query=${encodeURIComponent(searchQuery.trim())}`);
            
            // 응답 상태 확인
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            // 응답 타입 확인
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('서버에서 JSON이 아닌 응답을 받았습니다.');
            }
            
            const data = await response.json();
                setSearchResults(data);
        } catch (error) {
            console.error('메시지 검색 오류:', error);
            
            // 사용자에게 더 명확한 오류 메시지 표시
            if (error.message.includes('JSON')) {
                Alert.alert('오류', '서버 응답 오류가 발생했습니다. 잠시 후 다시 시도해주세요.');
            } else if (error.message.includes('HTTP')) {
                Alert.alert('오류', '서버에 연결할 수 없습니다. 네트워크를 확인해주세요.');
            } else {
                Alert.alert('오류', '메시지 검색 중 문제가 발생했습니다.');
            }
            
            setSearchResults([]);
        } finally {
            setIsSearching(false);
        }
    };

    // 채팅방 나가기
    const leaveChat = async () => {
        Alert.alert('채팅방 나가기', '정말로 이 채팅방을 나가시겠습니까?', [
            { text: '취소', style: 'cancel' },
            { 
                text: '나가기', 
                style: 'destructive', 
                onPress: async () => {
                    try {
                        const response = await fetch(`${RENDER_SERVER_URL}/chat/leave`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                employee_id: myEmployeeId,
                                chat_type: chatType,
                                chat_id: chatId
                            })
                        });
                        const data = await response.json();
                        if (response.ok) {
                            Alert.alert('성공', data.message);
                            navigation.goBack();
                        } else {
                            Alert.alert('오류', data.message || '채팅방을 나가는데 실패했습니다.');
                        }
                    } catch (error) {
                        console.error('채팅방 나가기 오류:', error);
                        Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
                    }
                }
            }
        ]);
    };

    // 점심 약속 잡기
    const handleLunchScheduling = async () => {
        if (chatMembers.length === 0) {
            // 참가자 정보가 없으면 먼저 가져오기
            try {
                const response = await fetch(`${RENDER_SERVER_URL}/chat/room/members/${chatType}/${chatId}`);
                const data = await response.json();
                if (response.ok) {
                    setChatMembers(data);
                    // 참가자 정보를 가져온 후 지능형 스케줄링 화면으로 이동
                    navigation.navigate('IntelligentScheduling', { 
                        chatMembers: data,
                        chatType: chatType,
                        chatId: chatId
                    });
                } else {
                    Alert.alert('오류', data.message || '참가자 목록 조회에 실패했습니다.');
                }
            } catch (error) {
                console.error('참가자 목록 조회 오류:', error);
                Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
            }
        } else {
            // 참가자 정보가 이미 있으면 바로 이동
        navigation.navigate('IntelligentScheduling', { 
            chatMembers: chatMembers,
            chatType: chatType,
            chatId: chatId
        });
        }
    };

    // 채팅방 제목 변경
    const handleTitleChange = async () => {
        if (!newTitle.trim()) {
            Alert.alert('오류', '새 제목을 입력해주세요.');
            return;
        }

        try {
            const response = await fetch(`${RENDER_SERVER_URL}/chat/room/title`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_type: chatType,
                    chat_id: chatId,
                    title: newTitle.trim(),
                    user_id: myEmployeeId
                })
            });

            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', data.message);
                setChatTitle(newTitle.trim());
                setIsTitleEditVisible(false);
                setNewTitle('');
            } else {
                Alert.alert('오류', data.message || '제목 변경에 실패했습니다.');
            }
        } catch (error) {
            console.error('제목 변경 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    // 참가자 목록 조회
    const fetchMembers = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/chat/room/members/${chatType}/${chatId}`);
            const data = await response.json();
            if (response.ok) {
                setChatMembers(data);
                setIsMembersVisible(true);
            } else {
                Alert.alert('오류', data.message || '참가자 목록 조회에 실패했습니다.');
            }
        } catch (error) {
            console.error('참가자 목록 조회 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    // 이미지 전송
    const sendImage = async (imageUri) => {
        try {
            // 이미지를 base64로 변환
            const response = await fetch(imageUri);
            const blob = await response.blob();
            const reader = new FileReader();
            
            reader.onload = async () => {
                const base64Data = reader.result;
                
                // 서버에 이미지 업로드
                const uploadResponse = await fetch(`${RENDER_SERVER_URL}/chat/upload-image`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        image_data: base64Data,
                        chat_type: chatType,
                        chat_id: chatId,
                        sender_employee_id: myEmployeeId
                    })
                });
                
                const uploadData = await uploadResponse.json();
                if (uploadResponse.ok) {
                    // WebSocket으로 이미지 메시지 전송
                    socket.emit('send_message', {
                        chat_type: chatType,
                        chat_id: chatId,
                        sender_employee_id: myEmployeeId,
                        message: '[이미지]',
                        message_type: 'image',
                        file_url: uploadData.file_url
                    });
                } else {
                    Alert.alert('오류', uploadData.message || '이미지 업로드에 실패했습니다.');
                }
            };
            
            reader.readAsDataURL(blob);
        } catch (error) {
            console.error('이미지 전송 오류:', error);
            Alert.alert('오류', '이미지 전송에 실패했습니다.');
        }
    };

    // 메시지 렌더링
    const renderMessage = ({ item }) => {
        const isMyMessage = item.sender_employee_id === myEmployeeId;
        
        // 내가 보낸 메시지가 아니고 아직 읽지 않은 메시지인 경우 읽음 처리
        if (!isMyMessage && item.unread_count > 0) {
            // HTTP API를 사용하여 읽음 처리
            fetch(`${RENDER_SERVER_URL}/chat/messages/read`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    message_id: item.id,
                    user_id: myEmployeeId,
                    chat_type: chatType,
                    chat_id: chatId
                })
            }).catch(error => {
                console.error('읽음 처리 오류:', error);
            });
        }
        
        return (
            <View style={[styles.messageContainer, isMyMessage ? styles.myMessage : styles.otherMessage]}>
                {!isMyMessage && item.sender_nickname && (
                    <Text style={styles.messageSender}>{item.sender_nickname}</Text>
                )}
                <View style={[
                    styles.messageBubble,
                    isMyMessage ? styles.myMessageBubble : styles.otherMessageBubble,
                    { backgroundColor: isMyMessage ? currentColors.primary : currentColors.surface }
                ]}>
                    {item.message_type === 'image' && item.file_url ? (
                        <TouchableOpacity
                            onPress={() => {
                                Alert.alert('이미지 보기', '이미지 확대 보기 기능은 추후 구현 예정입니다.');
                            }}
                        >
                            <Image
                                source={{ uri: `${RENDER_SERVER_URL}${item.file_url}` }}
                                style={{ width: 200, height: 150, borderRadius: 12, marginBottom: 4 }}
                                resizeMode="cover"
                            />
                        </TouchableOpacity>
                    ) : (
                        <Text style={[
                            styles.messageText,
                            isMyMessage ? styles.myMessageText : styles.otherMessageText,
                            isMyMessage ? { color: '#FFFFFF' } : null
                        ]}>
                            {item.message}
                        </Text>
                    )}
                </View>
                <View style={{ flexDirection: 'row', alignItems: 'center', marginTop: 2 }}>
                    <Text style={styles.messageTime}>{item.created_at}</Text>
                    {isMyMessage && item.unread_count > 0 && (
                        <Text style={{ fontSize: 12, color: '#4FC3F7', marginLeft: 4 }}>{item.unread_count}</Text>
                    )}
                </View>
            </View>
        );
    };

    if (!chatDetails) {
    return (
        <SafeAreaView style={styles.safeArea}>
                <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
                    <ActivityIndicator size="large" color={currentColors.primary}/>
            </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.safeArea}>
            <KeyboardAvoidingView 
                style={{flex: 1, backgroundColor: currentColors.background}}
                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
                keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
            >
                {/* 헤더 액션 버튼들 */}

                {/* 삼선(메뉴) 아이콘을 누르면 열리는 메뉴 모달 추가 */}
                <Modal
                    visible={isMenuVisible}
                    transparent={true}
                    animationType="fade"
                    onRequestClose={() => setIsMenuVisible(false)}
                >
                    <TouchableOpacity style={{ flex: 1, backgroundColor: 'rgba(0,0,0,0.3)' }} activeOpacity={1} onPress={() => setIsMenuVisible(false)}>
                        <View style={{ position: 'absolute', top: 60, right: 16, backgroundColor: currentColors.surface, borderRadius: 12, padding: 12, minWidth: 160, elevation: 8 }}>
                            <TouchableOpacity style={{ paddingVertical: 12 }} onPress={() => { setIsMenuVisible(false); setIsTitleEditVisible(true); }}>
                                <Text style={{ fontSize: 16, color: currentColors.text }}>채팅방 제목 변경</Text>
                    </TouchableOpacity>
                            <View style={{ height: 1, backgroundColor: currentColors.lightGray, marginVertical: 4 }} />
                            <TouchableOpacity style={{ paddingVertical: 12 }} onPress={() => { setIsMenuVisible(false); fetchMembers(); }}>
                                <Text style={{ fontSize: 16, color: currentColors.text }}>참가자 목록</Text>
                            </TouchableOpacity>
                            <View style={{ height: 1, backgroundColor: currentColors.lightGray, marginVertical: 4 }} />
                            <TouchableOpacity style={{ paddingVertical: 12 }} onPress={() => { setIsMenuVisible(false); handleLunchScheduling(); }}>
                                <Text style={{ fontSize: 16, color: currentColors.text }}>새로운 약속 잡기</Text>
                    </TouchableOpacity>
                </View>
                    </TouchableOpacity>
                </Modal>

                {/* 검색 영역 */}
                {isSearchVisible && (
                    <View style={{
                        backgroundColor: currentColors.surface,
                        paddingHorizontal: 16,
                        paddingVertical: 12,
                        borderBottomWidth: 1,
                        borderBottomColor: currentColors.lightGray
                    }}>
                        <View style={{
                            flexDirection: 'row',
                            alignItems: 'center'
                        }}>
                            <TextInput
                                style={{
                                    flex: 1,
                                    backgroundColor: currentColors.background,
                                    borderRadius: 20,
                                    paddingHorizontal: 16,
                                    paddingVertical: 8,
                                    marginRight: 8,
                                    fontSize: 14,
                                    color: currentColors.text,
                                    borderWidth: 1,
                                    borderColor: currentColors.lightGray
                                }}
                                value={searchQuery}
                                onChangeText={setSearchQuery}
                                placeholder="메시지 검색..."
                                placeholderTextColor={currentColors.textSecondary}
                                onSubmitEditing={searchMessages}
                            />
                            <TouchableOpacity
                                style={{
                                    backgroundColor: currentColors.primary,
                                    borderRadius: 20,
                                    paddingHorizontal: 12,
                                    paddingVertical: 8
                                }}
                                onPress={searchMessages}
                                disabled={isSearching}
                            >
                                {isSearching ? (
                                    <ActivityIndicator size="small" color="#FFFFFF" />
                                ) : (
                                    <Ionicons name="search" size={16} color="#FFFFFF" />
                                )}
                            </TouchableOpacity>
                            <TouchableOpacity
                                style={{
                                    backgroundColor: currentColors.lightGray,
                                    borderRadius: 20,
                                    paddingHorizontal: 12,
                                    paddingVertical: 8,
                                    marginLeft: 8
                                }}
                                onPress={() => {
                                    setIsSearchVisible(false);
                                    setSearchQuery('');
                                    setSearchResults([]);
                                }}
                            >
                                <Ionicons name="close" size={16} color={currentColors.text} />
                            </TouchableOpacity>
                        </View>
                        
                        {/* 검색 결과 */}
                        {searchResults.length > 0 && (
                            <View style={{marginTop: 8}}>
                                <Text style={{fontSize: 12, color: currentColors.textSecondary, marginBottom: 4}}>
                                    검색 결과: {searchResults.length}개
                                </Text>
                                <FlatList
                                    data={searchResults}
                                    keyExtractor={(item, index) => `search-${item.id}-${index}`}
                                    renderItem={renderMessage}
                                    style={{maxHeight: 200}}
                                    showsVerticalScrollIndicator={false}
                                />
                            </View>
                        )}
                    </View>
                )}

                {/* 메시지 목록 */}
                <FlatList
                    ref={flatListRef}
                    data={messages}
                    keyExtractor={(item, index) => `${item.id}-${index}`}
                    renderItem={renderMessage}
                    style={{flex: 1, backgroundColor: currentColors.background}}
                    contentContainerStyle={{paddingHorizontal: 16, paddingVertical: 8}}
                    onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}
                    onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}
                    onViewableItemsChanged={({ viewableItems }) => {
                        // 화면에 보이는 메시지들 중 내가 보낸 메시지가 아닌 것들을 읽음 처리
                        const unreadMessages = viewableItems
                            .map(item => item.item)
                            .filter(msg => msg.sender_employee_id !== myEmployeeId && msg.unread_count > 0);
                        
                        unreadMessages.forEach(msg => {
                            // HTTP API를 사용하여 읽음 처리
                            fetch(`${RENDER_SERVER_URL}/chat/messages/read`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    message_id: msg.id,
                                    user_id: myEmployeeId,
                                    chat_type: chatType,
                                    chat_id: chatId
                                })
                            }).catch(error => {
                                console.error('읽음 처리 오류:', error);
                            });
                        });
                    }}
                    viewabilityConfig={{
                        itemVisiblePercentThreshold: 50
                    }}
                />

                {/* 제목 변경 모달 */}
                <Modal
                    visible={isTitleEditVisible}
                    transparent={true}
                    animationType="slide"
                    onRequestClose={() => setIsTitleEditVisible(false)}
                >
                    <View style={{
                        flex: 1,
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        justifyContent: 'center',
                        alignItems: 'center',
                        paddingHorizontal: 20
                    }}>
                        <View style={{
                            backgroundColor: currentColors.surface,
                            borderRadius: 12,
                            padding: 20,
                            width: '100%',
                            maxWidth: 300
                        }}>
                            <Text style={{
                                fontSize: 18,
                                fontWeight: 'bold',
                                color: currentColors.text,
                                marginBottom: 16,
                                textAlign: 'center'
                            }}>
                                채팅방 제목 변경
                            </Text>
                            
                            <TextInput
                                style={{
                                    backgroundColor: currentColors.background,
                                    borderRadius: 8,
                                    paddingHorizontal: 12,
                                    paddingVertical: 8,
                                    fontSize: 16,
                                    color: currentColors.text,
                                    borderWidth: 1,
                                    borderColor: currentColors.lightGray,
                                    marginBottom: 16
                                }}
                                value={newTitle}
                                onChangeText={setNewTitle}
                                placeholder="새 제목을 입력하세요"
                                placeholderTextColor={currentColors.textSecondary}
                            />
                            
                            <View style={{
                                flexDirection: 'row',
                                justifyContent: 'space-between'
                            }}>
                                <TouchableOpacity
                                    style={{
                                        backgroundColor: currentColors.lightGray,
                                        borderRadius: 8,
                                        paddingHorizontal: 16,
                                        paddingVertical: 8,
                                        flex: 1,
                                        marginRight: 8
                                    }}
                                    onPress={() => {
                                        setIsTitleEditVisible(false);
                                        setNewTitle('');
                                    }}
                                >
                                    <Text style={{
                                        color: currentColors.text,
                                        fontSize: 14,
                                        fontWeight: '600',
                                        textAlign: 'center'
                                    }}>
                                        취소
                                    </Text>
                                </TouchableOpacity>
                                
                                <TouchableOpacity
                                    style={{
                                        backgroundColor: currentColors.primary,
                                        borderRadius: 8,
                                        paddingHorizontal: 16,
                                        paddingVertical: 8,
                                        flex: 1,
                                        marginLeft: 8
                                    }}
                                    onPress={handleTitleChange}
                                >
                                    <Text style={{
                                        color: '#FFFFFF',
                                        fontSize: 14,
                                        fontWeight: '600',
                                        textAlign: 'center'
                                    }}>
                                        변경
                                    </Text>
                                </TouchableOpacity>
                            </View>
                        </View>
                    </View>
                </Modal>

                {/* 참가자 목록 모달 */}
                <Modal
                    visible={isMembersVisible}
                    transparent={true}
                    animationType="slide"
                    onRequestClose={() => setIsMembersVisible(false)}
                >
                    <View style={{
                        flex: 1,
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        justifyContent: 'center',
                        alignItems: 'center',
                        paddingHorizontal: 20
                    }}>
                        <View style={{
                            backgroundColor: currentColors.surface,
                            borderRadius: 12,
                            padding: 20,
                            width: '100%',
                            maxWidth: 350,
                            maxHeight: '80%'
                        }}>
                            {/* 참가자 목록 타이틀 인원수 계산 */}
                            {(() => {
                                const leader = chatMembers.find(m => m.is_host);
                                const memberCount = (leader ? 1 : 0) + chatMembers.filter(m => !leader || m.employee_id !== leader.employee_id).length;
                                return (
                                    <Text style={{
                                        fontSize: 18,
                                        fontWeight: 'bold',
                                        color: currentColors.text,
                                        marginBottom: 16,
                                        textAlign: 'center'
                                    }}>
                                        참가자 목록 ({memberCount}명)
                                    </Text>
                                );
                            })()}
                            
                            {/* 팟장(호스트)만 맨 위에 한 번 표시 */}
                            {(() => {
                                const leader = chatMembers.find(m => m.is_host);
                                if (!leader) return null;
                                return (
                                    <View style={{
                                        flexDirection: 'row',
                                        alignItems: 'center',
                                        paddingVertical: 8,
                                        paddingHorizontal: 12,
                                        backgroundColor: currentColors.background,
                                        borderRadius: 8,
                                        marginBottom: 8
                                    }}>
                                        <View style={{
                                            width: 40,
                                            height: 40,
                                            borderRadius: 20,
                                            backgroundColor: currentColors.yellow,
                                            justifyContent: 'center',
                                            alignItems: 'center',
                                            marginRight: 12
                                        }}>
                                            <Text style={{
                                                color: currentColors.deepBlue,
                                                fontSize: 16,
                                                fontWeight: 'bold'
                                            }}>
                                                {leader.nickname ? leader.nickname.charAt(0) : '?'}
                                            </Text>
                                        </View>
                                        <View style={{ flex: 1 }}>
                                            <Text style={{
                                                fontSize: 16,
                                                fontWeight: '600',
                                                color: currentColors.text
                                            }}>
                                                {leader.nickname || '알 수 없음'}
                                            </Text>
                                        </View>
                                        <View style={{
                                            backgroundColor: currentColors.yellow,
                                            borderRadius: 12,
                                            paddingHorizontal: 8,
                                            paddingVertical: 4
                                        }}>
                                            <Text style={{
                                                fontSize: 10,
                                                fontWeight: 'bold',
                                                color: currentColors.deepBlue
                                            }}>
                                                팟장
                                            </Text>
                                        </View>
                                    </View>
                                );
                            })()}
                            {/* 일반 멤버만 리스트로 표시 (팟장 employee_id와 다른 멤버만) */}
                            <FlatList
                                data={chatMembers.filter(m => {
                                    const leader = chatMembers.find(x => x.is_host);
                                    return !leader || m.employee_id !== leader.employee_id;
                                })}
                                keyExtractor={(item, index) => `member-${item.employee_id}-${index}`}
                                renderItem={({ item }) => (
                                    <View style={{
                                        flexDirection: 'row',
                                        alignItems: 'center',
                                        paddingVertical: 8,
                                        paddingHorizontal: 12,
                                        backgroundColor: currentColors.background,
                                        borderRadius: 8,
                                        marginBottom: 8
                                    }}>
                                        <View style={{
                                            width: 40,
                                            height: 40,
                                            borderRadius: 20,
                                            backgroundColor: currentColors.primary,
                                            justifyContent: 'center',
                                            alignItems: 'center',
                                            marginRight: 12
                                        }}>
                                            <Text style={{
                                                color: '#FFFFFF',
                                                fontSize: 16,
                                                fontWeight: 'bold'
                                            }}>
                                                {item.nickname ? item.nickname.charAt(0) : '?'}
                                            </Text>
                                        </View>
                                        <View style={{ flex: 1 }}>
                                            <Text style={{
                                                fontSize: 16,
                                                fontWeight: '600',
                                                color: currentColors.text
                                            }}>
                                                {item.nickname || '알 수 없음'}
                                            </Text>
                                        </View>
                                    </View>
                                )}
                                showsVerticalScrollIndicator={false}
                            />
                            
                            <TouchableOpacity
                                style={{
                                    backgroundColor: currentColors.primary,
                                    borderRadius: 8,
                                    paddingHorizontal: 16,
                                    paddingVertical: 12,
                                    marginTop: 16
                                }}
                                onPress={() => setIsMembersVisible(false)}
                            >
                                <Text style={{
                                    color: '#FFFFFF',
                                    fontSize: 16,
                                    fontWeight: '600',
                                    textAlign: 'center'
                                }}>
                                    닫기
                                </Text>
                            </TouchableOpacity>
                        </View>
                    </View>
                </Modal>

                {/* 메시지 입력 영역 */}
                <View style={{
                    backgroundColor: currentColors.surface,
                    borderTopWidth: 1,
                    borderTopColor: currentColors.lightGray,
                    paddingHorizontal: 16,
                    paddingVertical: 12,
                    flexDirection: 'row',
                    alignItems: 'flex-end'
                }}>
                    <TouchableOpacity
                        style={{
                            backgroundColor: currentColors.primary,
                            borderRadius: 20,
                            width: 40,
                            height: 40,
                            justifyContent: 'center',
                            alignItems: 'center',
                            marginRight: 8
                        }}
                        onPress={() => setIsImagePickerVisible(true)}
                    >
                        <Ionicons 
                            name="camera" 
                            size={20} 
                            color="#FFFFFF" 
                        />
                    </TouchableOpacity>
                    
                    <TextInput
                        style={{
                            flex: 1,
                            backgroundColor: currentColors.background,
                            borderRadius: 20,
                            paddingHorizontal: 16,
                            paddingVertical: 10,
                            marginRight: 8,
                            fontSize: 16,
                            color: currentColors.text,
                            maxHeight: 100,
                            borderWidth: 1,
                            borderColor: currentColors.lightGray
                        }}
                        value={newMessage}
                        onChangeText={setNewMessage}
                        placeholder="메시지를 입력하세요..."
                        placeholderTextColor={currentColors.textSecondary}
                        multiline
                        maxLength={500}
                    />
                    <TouchableOpacity
                        style={{
                            backgroundColor: !newMessage.trim() ? currentColors.lightGray : currentColors.primary,
                            borderRadius: 20,
                            width: 40,
                            height: 40,
                            justifyContent: 'center',
                            alignItems: 'center'
                        }}
                        onPress={sendMessage}
                        disabled={!newMessage.trim()}
                    >
                        <Ionicons 
                            name="send" 
                            size={20} 
                            color={!newMessage.trim() ? currentColors.textSecondary : '#FFFFFF'} 
                        />
                    </TouchableOpacity>
                </View>

                {/* 연결 상태 표시 (임시로 비활성화) */}
                {false && !isConnected && (
                    <View style={{
                        backgroundColor: currentColors.warning,
                        paddingVertical: 8,
                        paddingHorizontal: 16,
                        alignItems: 'center'
                    }}>
                        <Text style={{color: '#FFFFFF', fontSize: 14, fontWeight: '600'}}>연결 중...</Text>
                    </View>
                )}

                {/* 이미지 선택 모달 */}
                <Modal
                    visible={isImagePickerVisible}
                    transparent={true}
                    animationType="slide"
                    onRequestClose={() => setIsImagePickerVisible(false)}
                >
                    <View style={{
                        flex: 1,
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        justifyContent: 'flex-end'
                    }}>
                        <View style={{
                            backgroundColor: currentColors.surface,
                            borderTopLeftRadius: 20,
                            borderTopRightRadius: 20,
                            padding: 20
                        }}>
                            <Text style={{
                                fontSize: 18,
                                fontWeight: 'bold',
                                color: currentColors.text,
                                marginBottom: 20,
                                textAlign: 'center'
                            }}>
                                이미지 선택
                            </Text>
                            
                            <View style={{
                                flexDirection: 'row',
                                justifyContent: 'space-around',
                                marginBottom: 20
                            }}>
                                <TouchableOpacity
                                    style={{
                                        backgroundColor: currentColors.primary,
                                        borderRadius: 12,
                                        paddingVertical: 12,
                                        paddingHorizontal: 20,
                                        alignItems: 'center',
                                        flex: 1,
                                        marginRight: 10
                                    }}
                                    onPress={() => {
                                        setIsImagePickerVisible(false);
                                        // 카메라로 촬영 (구현 예정)
                                        Alert.alert('카메라', '카메라 기능은 추후 구현 예정입니다.');
                                    }}
                                >
                                    <Ionicons name="camera" size={24} color="#FFFFFF" />
                                    <Text style={{color: '#FFFFFF', marginTop: 4, fontSize: 12}}>카메라</Text>
                                </TouchableOpacity>
                                
                                <TouchableOpacity
                                    style={{
                                        backgroundColor: currentColors.primary,
                                        borderRadius: 12,
                                        paddingVertical: 12,
                                        paddingHorizontal: 20,
                                        alignItems: 'center',
                                        flex: 1,
                                        marginLeft: 10
                                    }}
                                    onPress={() => {
                                        setIsImagePickerVisible(false);
                                        // 갤러리에서 선택 (구현 예정)
                                        Alert.alert('갤러리', '갤러리 선택 기능은 추후 구현 예정입니다.');
                                    }}
                                >
                                    <Ionicons name="images" size={24} color="#FFFFFF" />
                                    <Text style={{color: '#FFFFFF', marginTop: 4, fontSize: 12}}>갤러리</Text>
                                </TouchableOpacity>
                            </View>
                            
                            <TouchableOpacity
                                style={{
                                    backgroundColor: currentColors.gray,
                                    borderRadius: 12,
                                    paddingVertical: 12,
                                    alignItems: 'center'
                                }}
                                onPress={() => setIsImagePickerVisible(false)}
                            >
                                <Text style={{color: currentColors.white, fontSize: 16, fontWeight: '600'}}>취소</Text>
                            </TouchableOpacity>
                        </View>
                    </View>
                </Modal>
            </KeyboardAvoidingView>
        </SafeAreaView>
    );
}


// --- 내 정보 탭 ---
function MyProfileScreen({ navigation }) {
    const [profile, setProfile] = useState(null);
    
    useFocusEffect(useCallback(() => { fetch(`${RENDER_SERVER_URL}/users/${myEmployeeId}`).then(res => res.json()).then(setProfile); }, []));

    useEffect(() => {
        navigation.setOptions({
            headerRight: () => (
                <View style={{ flexDirection: 'row', marginRight: 15 }}>
                    <TouchableOpacity style={{ marginRight: 15 }} onPress={() => navigation.navigate('Settings')}>
                        <Ionicons name="settings-outline" size={26} color={COLORS.primary} />
                    </TouchableOpacity>
                    <TouchableOpacity onPress={() => navigation.navigate('ProfileEdit')}>
                        <Ionicons name="create-outline" size={26} color={COLORS.primary} />
                    </TouchableOpacity>
                </View>
            ),
        });
    }, [navigation]);

    if (!profile) return <View style={styles.centerView}><ActivityIndicator color={COLORS.primary} /></View>;
    
    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={{paddingVertical: 16}}>
                <View style={styles.profileCard}>
                    <View style={styles.profileInfoRow}><Ionicons name="person-circle-outline" size={24} color={COLORS.gray} /><Text style={styles.profileViewText}>{profile.nickname}</Text></View>
                </View>
                <View style={styles.profileCard}><Text style={styles.cardTitle}>점심 성향</Text><Text style={styles.profileViewTags}>{profile.lunch_preference || '미지정'}</Text></View>
                <View style={styles.profileCard}><Text style={styles.cardTitle}>주종목</Text><Text style={styles.profileViewTags}>{profile.main_dish_genre || '미지정'}</Text></View>
                <View style={styles.profileCard}><Text style={styles.cardTitle}>알레르기 정보</Text><Text style={styles.profileViewTags}>{(profile.allergies && profile.allergies.length > 0) ? profile.allergies.join(', ') : '미지정'}</Text></View>
                <View style={styles.profileCard}><Text style={styles.cardTitle}>선호 시간대</Text><Text style={styles.profileViewTags}>{profile.preferred_time || '미지정'}</Text></View>
            </ScrollView>
        </SafeAreaView>
    );
}

function ProfileEditScreen({ navigation }) {
    const [nickname, setNickname] = useState('');
    const [lunchPreference, setLunchPreference] = useState([]);
    const [mainDishGenre, setMainDishGenre] = useState([]);
    const [allergies, setAllergies] = useState([]);
    const [preferredTime, setPreferredTime] = useState('');
    const [notificationPreferences, setNotificationPreferences] = useState([]);
    
    const [isPreferenceModalVisible, setPreferenceModalVisible] = useState(false);
    const [isGenreModalVisible, setGenreModalVisible] = useState(false);
    const [isAllergiesModalVisible, setAllergiesModalVisible] = useState(false);
    const [isTimeModalVisible, setTimeModalVisible] = useState(false);
    const [isNotificationModalVisible, setNotificationModalVisible] = useState(false);
    
    const LUNCH_PREFERENCE_OPTIONS = ['가성비 좋은 곳', '맛집 탐방', '건강한 식사', '빠른 식사', '새로운 메뉴 도전', '친구들과 함께', '혼자 조용히', '분위기 좋은 곳'];
    const MAIN_DISH_GENRE_OPTIONS = ['한식', '중식', '일식', '양식', '분식', '카페', '패스트푸드'];
    const ALLERGIES_OPTIONS = ['없음', '갑각류', '견과류', '우유', '계란', '밀', '대두', '생선'];
    const TIME_OPTIONS = ['11:30', '12:00', '12:30', '13:00', '13:30'];
    const NOTIFICATION_OPTIONS = ['새로운 파티 초대', '친구 요청', '점심 시간 알림', '맛집 추천'];

    useFocusEffect(useCallback(() => { 
        const loadUserData = async () => {
            try {
                const userResponse = await fetch(`${RENDER_SERVER_URL}/users/${myEmployeeId}`);
                const userData = await userResponse.json();
                
                setNickname(userData.nickname || ''); 
                setLunchPreference((userData.lunch_preference || '').split(',').filter(Boolean)); 
                setMainDishGenre((userData.main_dish_genre || '').split(',').filter(Boolean));
                
                const preferencesResponse = await fetch(`${RENDER_SERVER_URL}/users/${myEmployeeId}/preferences`);
                if (preferencesResponse.ok) {
                    const preferencesData = await preferencesResponse.json();
                    setAllergies(preferencesData.allergies || []);
                    setPreferredTime(preferencesData.preferredTime || '');
                    setNotificationPreferences(preferencesData.notifications || []);
                }
            } catch (error) {
                console.error('사용자 정보 로드 실패:', error);
            }
        };
        
        loadUserData();
    }, []));

    const handleSaveProfile = async () => {
        try {
            await fetch(`${RENDER_SERVER_URL}/users/${myEmployeeId}`, { 
                method: 'PUT', 
                headers: { 'Content-Type': 'application/json' }, 
                body: JSON.stringify({ 
                    nickname, 
                    lunch_preference: lunchPreference.join(','), 
                    main_dish_genre: mainDishGenre.join(',') 
                }) 
            });
            
            await fetch(`${RENDER_SERVER_URL}/users/${myEmployeeId}/preferences`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    allergies,
                    preferredTime,
                    frequentAreas: [],
                    notifications: notificationPreferences
                })
            });
            
            Alert.alert("저장 완료", "프로필이 업데이트되었습니다.");
            navigation.goBack();
        } catch (error) {
            console.error('프로필 저장 실패:', error);
            Alert.alert("오류", "프로필 저장에 실패했습니다.");
        }
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView contentContainerStyle={styles.formContainer}>
                <Text style={styles.inputLabel}>닉네임</Text><TextInput style={styles.input} placeholderTextColor={COLORS.gray} value={nickname} onChangeText={setNickname} />
                <Text style={styles.inputLabel}>점심 성향 (최대 3개)</Text><TouchableOpacity style={styles.input} onPress={() => setPreferenceModalVisible(true)}><Text style={lunchPreference.length > 0 ? styles.inputText : styles.placeholderText}>{lunchPreference.length > 0 ? lunchPreference.join(', ') : "점심 성향 선택"}</Text></TouchableOpacity>
                <Text style={styles.inputLabel}>주종목 (최대 3개)</Text><TouchableOpacity style={styles.input} onPress={() => setGenreModalVisible(true)}><Text style={mainDishGenre.length > 0 ? styles.inputText : styles.placeholderText}>{mainDishGenre.length > 0 ? mainDishGenre.join(', ') : "주종목 선택"}</Text></TouchableOpacity>
                
                <Text style={styles.inputLabel}>알레르기 정보 (최대 3개)</Text>
                <TouchableOpacity style={styles.input} onPress={() => setAllergiesModalVisible(true)}>
                    <Text style={allergies.length > 0 ? styles.inputText : styles.placeholderText}>{allergies.length > 0 ? allergies.join(', ') : "알레르기 정보 선택"}</Text>
                </TouchableOpacity>
                
                <Text style={styles.inputLabel}>선호 시간대</Text>
                <TouchableOpacity style={styles.input} onPress={() => setTimeModalVisible(true)}>
                    <Text style={preferredTime ? styles.inputText : styles.placeholderText}>{preferredTime || "선호 시간대 선택"}</Text>
                </TouchableOpacity>
                
                <TouchableOpacity style={styles.submitButton} onPress={handleSaveProfile}><Text style={[styles.submitButtonText, {color: '#FFFFFF'}]}>프로필 저장</Text></TouchableOpacity>
                <SelectionModal visible={isPreferenceModalVisible} title="점심 성향 선택 (최대 3개)" options={LUNCH_PREFERENCE_OPTIONS} selected={lunchPreference} onSelect={setLunchPreference} onClose={() => setPreferenceModalVisible(false)} isMultiSelect={true} styles={styles} />
                <SelectionModal visible={isGenreModalVisible} title="주종목 선택 (최대 3개)" options={MAIN_DISH_GENRE_OPTIONS} selected={mainDishGenre} onSelect={setMainDishGenre} onClose={() => setGenreModalVisible(false)} isMultiSelect={true} styles={styles} />
                <SelectionModal visible={isAllergiesModalVisible} title="알레르기 정보 선택 (최대 3개)" options={ALLERGIES_OPTIONS} selected={allergies} onSelect={setAllergies} onClose={() => setAllergiesModalVisible(false)} isMultiSelect={true} styles={styles} />
                <SelectionModal visible={isTimeModalVisible} title="선호 시간대 선택" options={TIME_OPTIONS} selected={preferredTime} onSelect={setPreferredTime} onClose={() => setTimeModalVisible(false)} styles={styles} />
            </ScrollView>
        </SafeAreaView>
    );
}

// --- 친구 관리 화면들 ---
function FriendListScreen({ navigation }) {
    const [friends, setFriends] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    useFocusEffect(useCallback(() => {
        fetchFriends();
    }, []));

    const fetchFriends = async () => {
        try {
            setIsLoading(true);
            const response = await fetch(`${RENDER_SERVER_URL}/friends?employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                setFriends(data);
            } else {
                Alert.alert('오류', data.message || '친구 목록을 가져오는데 실패했습니다.');
            }
        } catch (error) {
            console.error('친구 목록 조회 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleUnfriend = async (friendId) => {
        Alert.alert(
            '친구 삭제',
            '정말로 이 친구를 삭제하시겠습니까?',
            [
                { text: '취소', style: 'cancel' },
                { 
                    text: '삭제', 
                    style: 'destructive', 
                    onPress: async () => {
                        try {
                            const response = await fetch(`${RENDER_SERVER_URL}/friends/${myEmployeeId}/${friendId}`, {
                                method: 'DELETE'
                            });
                            const data = await response.json();
                            if (response.ok) {
                                Alert.alert('성공', '친구가 삭제되었습니다.');
                                fetchFriends();
                            } else {
                                Alert.alert('오류', data.message || '친구 삭제에 실패했습니다.');
                            }
                        } catch (error) {
                            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
                        }
                    }
                }
            ]
        );
    };

    if (isLoading) {
        return (
            <SafeAreaView style={styles.safeArea}>
                <View style={styles.centerView}>
                    <ActivityIndicator size="large" color={COLORS.primary} />
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.safeArea}>
            <FlatList
                data={friends}
                keyExtractor={(item, index) => `friend-${item.employee_id}-${index}`}
                ListEmptyComponent={<Text style={styles.noDataMessage}>친구가 없습니다.</Text>}
                renderItem={({ item }) => (
                    <TouchableOpacity 
                        style={styles.friendItem}
                        onPress={() => navigation.navigate('FriendProfile', { friend: item })}
                    >
                        <View style={styles.friendInfo}>
                            <Text style={styles.friendName}>{item.nickname}</Text>
                            <Text style={styles.friendDepartment}>{item.department}</Text>
                        </View>
                        <TouchableOpacity
                            style={styles.unfriendButton}
                            onPress={() => handleUnfriend(item.employee_id)}
                        >
                            <Text style={styles.unfriendButtonText}>삭제</Text>
                        </TouchableOpacity>
                    </TouchableOpacity>
                )}
                contentContainerStyle={{paddingTop: 16}}
            />
        </SafeAreaView>
    );
}

function FriendRequestsScreen({ navigation }) {
    const [requests, setRequests] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    useFocusEffect(useCallback(() => {
        fetchRequests();
    }, []));

    const fetchRequests = async () => {
        try {
            setIsLoading(true);
            const response = await fetch(`${RENDER_SERVER_URL}/friends/requests?employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                setRequests(data);
            } else {
                Alert.alert('오류', data.message || '친구 요청을 가져오는데 실패했습니다.');
            }
        } catch (error) {
            console.error('친구 요청 조회 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleAcceptRequest = async (requestId) => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/friends/requests/${requestId}/accept`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ employee_id: myEmployeeId })
            });
            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', '친구 요청을 수락했습니다.');
                fetchRequests();
            } else {
                Alert.alert('오류', data.message || '친구 요청 수락에 실패했습니다.');
            }
        } catch (error) {
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    const handleRejectRequest = async (requestId) => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/friends/requests/${requestId}/reject`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ employee_id: myEmployeeId })
            });
            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', '친구 요청을 거절했습니다.');
                fetchRequests();
            } else {
                Alert.alert('오류', data.message || '친구 요청 거절에 실패했습니다.');
            }
        } catch (error) {
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    if (isLoading) {
        return (
            <SafeAreaView style={styles.safeArea}>
                <View style={styles.centerView}>
                    <ActivityIndicator size="large" color={COLORS.primary} />
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.safeArea}>
            <FlatList
                data={requests}
                keyExtractor={item => item.id.toString()}
                ListEmptyComponent={<Text style={styles.noDataMessage}>친구 요청이 없습니다.</Text>}
                renderItem={({ item }) => (
                    <View style={styles.requestItem}>
                        <View style={styles.requestInfo}>
                            <Text style={styles.requestName}>{item.sender_nickname}</Text>
                            <Text style={styles.requestDepartment}>{item.sender_department}</Text>
                            <Text style={styles.requestDate}>{item.created_at}</Text>
                        </View>
                        <View style={styles.requestActions}>
                            <TouchableOpacity
                                style={[styles.requestButton, styles.acceptButton]}
                                onPress={() => handleAcceptRequest(item.id)}
                            >
                                <Text style={styles.acceptButtonText}>수락</Text>
                            </TouchableOpacity>
                            <TouchableOpacity
                                style={[styles.requestButton, styles.rejectButton]}
                                onPress={() => handleRejectRequest(item.id)}
                            >
                                <Text style={styles.rejectButtonText}>거절</Text>
                            </TouchableOpacity>
                        </View>
                    </View>
                )}
                contentContainerStyle={{paddingTop: 16}}
            />
        </SafeAreaView>
    );
}

function SearchUsersScreen({ navigation }) {
    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isLoading, setIsLoading] = useState(false);

    const handleSearch = async () => {
        if (!searchQuery.trim()) return;

        try {
            setIsLoading(true);
            const response = await fetch(`${RENDER_SERVER_URL}/users/search?query=${encodeURIComponent(searchQuery.trim())}&employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                setSearchResults(data);
            } else {
                Alert.alert('오류', data.message || '검색에 실패했습니다.');
            }
        } catch (error) {
            console.error('사용자 검색 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleSendFriendRequest = async (targetEmployeeId) => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/friends/requests`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    sender_employee_id: myEmployeeId,
                    recipient_employee_id: targetEmployeeId
                })
            });
            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', '친구 요청을 보냈습니다.');
                handleSearch(); // 목록 새로고침
            } else {
                Alert.alert('오류', data.message || '친구 요청 전송에 실패했습니다.');
            }
        } catch (error) {
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <View style={styles.searchContainer}>
                <TextInput
                    style={styles.searchInput}
                    placeholder="이름 또는 부서로 검색..."
                    placeholderTextColor={COLORS.gray}
                    value={searchQuery}
                    onChangeText={setSearchQuery}
                    onSubmitEditing={handleSearch}
                />
                <TouchableOpacity
                    style={styles.searchButton}
                    onPress={handleSearch}
                >
                    <Ionicons name="search" size={20} color={COLORS.white} />
                </TouchableOpacity>
            </View>

            {isLoading ? (
                <View style={styles.centerView}>
                    <ActivityIndicator size="large" color={COLORS.primary} />
                </View>
            ) : (
                <FlatList
                    data={searchResults}
                    keyExtractor={(item, index) => `search-${item.employee_id}-${index}`}
                    ListEmptyComponent={
                        searchQuery.trim() ? (
                            <Text style={styles.noDataMessage}>검색 결과가 없습니다.</Text>
                        ) : (
                            <Text style={styles.noDataMessage}>검색어를 입력해주세요.</Text>
                        )
                    }
                    renderItem={({ item }) => (
                        <View style={styles.searchResultItem}>
                            <View style={styles.searchResultInfo}>
                                <Text style={styles.searchResultName}>{item.nickname}</Text>
                                <Text style={styles.searchResultDepartment}>{item.department}</Text>
                            </View>
                            <TouchableOpacity
                                style={[
                                    styles.addFriendButton,
                                    item.is_friend && styles.addFriendButtonDisabled,
                                    item.request_sent && styles.addFriendButtonPending
                                ]}
                                onPress={() => handleSendFriendRequest(item.employee_id)}
                                disabled={item.is_friend || item.request_sent}
                            >
                                <Text style={[
                                    styles.addFriendButtonText,
                                    item.is_friend && styles.addFriendButtonTextDisabled,
                                    item.request_sent && styles.addFriendButtonTextPending
                                ]}>
                                    {item.is_friend ? '친구' : (item.request_sent ? '요청됨' : '친구 추가')}
                                </Text>
                            </TouchableOpacity>
                        </View>
                    )}
                    contentContainerStyle={{paddingTop: 16}}
                />
            )}
        </SafeAreaView>
    );
}

function CreateChatRoomScreen({ navigation }) {
    const [friends, setFriends] = useState([]);
    const [selectedFriends, setSelectedFriends] = useState(new Set());
    const [chatTitle, setChatTitle] = useState('');
    const [isLoading, setIsLoading] = useState(true);

    useFocusEffect(useCallback(() => {
        fetchFriends();
    }, []));

    const fetchFriends = async () => {
        try {
            setIsLoading(true);
            const response = await fetch(`${RENDER_SERVER_URL}/friends?employee_id=${myEmployeeId}`);
            const data = await response.json();
            if (response.ok) {
                setFriends(data);
            } else {
                Alert.alert('오류', data.message || '친구 목록을 가져오는데 실패했습니다.');
            }
        } catch (error) {
            console.error('친구 목록 조회 오류:', error);
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleCreateChatRoom = async () => {
        if (selectedFriends.size === 0) {
            Alert.alert('알림', '최소 한 명의 친구를 선택해주세요.');
            return;
        }

        if (!chatTitle.trim()) {
            Alert.alert('알림', '채팅방 제목을 입력해주세요.');
            return;
        }

        try {
            const response = await fetch(`${RENDER_SERVER_URL}/chat/create`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    title: chatTitle.trim(),
                    creator_employee_id: myEmployeeId,
                    participant_employee_ids: Array.from(selectedFriends)
                })
            });
            const data = await response.json();
            if (response.ok) {
                Alert.alert('성공', '채팅방이 생성되었습니다.');
                navigation.navigate('ChatRoom', {
                    chatId: data.chat_id,
                    chatType: 'group',
                    chatTitle: chatTitle.trim()
                });
            } else {
                Alert.alert('오류', data.message || '채팅방 생성에 실패했습니다.');
            }
        } catch (error) {
            Alert.alert('오류', '네트워크에 문제가 발생했습니다.');
        }
    };

    const toggleFriendSelection = (friendId) => {
        const newSelected = new Set(selectedFriends);
        if (newSelected.has(friendId)) {
            newSelected.delete(friendId);
        } else {
            newSelected.add(friendId);
        }
        setSelectedFriends(newSelected);
    };

    if (isLoading) {
        return (
            <SafeAreaView style={styles.safeArea}>
                <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
                    <ActivityIndicator size="large" color={currentColors.primary} />
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={styles.safeArea}>
            <ScrollView style={{flex: 1, backgroundColor: currentColors.background}} contentContainerStyle={{padding: 16}}>
                <Text style={{fontSize: 18, fontWeight: 'bold', color: currentColors.text, marginBottom: 8}}>채팅방 제목 *</Text>
                <TextInput
                    style={{
                        backgroundColor: currentColors.surface,
                        borderRadius: 12,
                        paddingHorizontal: 16,
                        paddingVertical: 12,
                        fontSize: 16,
                        color: currentColors.text,
                        borderWidth: 1,
                        borderColor: currentColors.lightGray,
                        marginBottom: 24
                    }}
                    placeholder="채팅방 제목을 입력하세요"
                    placeholderTextColor={currentColors.textSecondary}
                    value={chatTitle}
                    onChangeText={setChatTitle}
                />

                <Text style={{fontSize: 18, fontWeight: 'bold', color: currentColors.text, marginBottom: 12}}>참여할 친구 선택 *</Text>
                <Text style={{fontSize: 14, color: currentColors.textSecondary, marginBottom: 8}}>
                    선택된 친구: {selectedFriends.size}명
                </Text>
                <FlatList
                    data={friends}
                    keyExtractor={(item, index) => `create-chat-${item.employee_id}-${index}`}
                    renderItem={({ item }) => (
                        <TouchableOpacity
                            style={{
                                backgroundColor: selectedFriends.has(item.employee_id) ? currentColors.primaryLight : currentColors.surface,
                                borderRadius: 16,
                                padding: 16,
                                marginBottom: 8,
                                flexDirection: 'row',
                                justifyContent: 'space-between',
                                alignItems: 'center',
                                elevation: 1,
                                shadowColor: currentColors.primary,
                                shadowOffset: { width: 0, height: 1 },
                                shadowOpacity: 0.1,
                                shadowRadius: 2,
                                borderWidth: 1,
                                borderColor: selectedFriends.has(item.employee_id) ? currentColors.primary : currentColors.lightGray
                            }}
                            onPress={() => toggleFriendSelection(item.employee_id)}
                        >
                            <View style={{flex: 1}}>
                                <Text style={{
                                    fontSize: 16,
                                    fontWeight: 'bold',
                                    color: selectedFriends.has(item.employee_id) ? currentColors.primary : currentColors.text,
                                    marginBottom: 4
                                }}>{item.nickname}</Text>
                                <Text style={{
                                    fontSize: 14,
                                    color: selectedFriends.has(item.employee_id) ? currentColors.primary : currentColors.textSecondary
                                }}>{item.department}</Text>
                            </View>
                            {selectedFriends.has(item.employee_id) && (
                                <Ionicons name="checkmark-circle" size={24} color={currentColors.primary} />
                            )}
                        </TouchableOpacity>
                    )}
                    scrollEnabled={false}
                />

                <TouchableOpacity
                    style={{
                        backgroundColor: (selectedFriends.size === 0 || !chatTitle.trim()) ? currentColors.lightGray : currentColors.primary,
                        borderRadius: 12,
                        paddingVertical: 16,
                        paddingHorizontal: 24,
                        alignItems: 'center',
                        marginTop: 24,
                        elevation: 2,
                        shadowColor: currentColors.primary,
                        shadowOffset: { width: 0, height: 2 },
                        shadowOpacity: 0.2,
                        shadowRadius: 4
                    }}
                    onPress={handleCreateChatRoom}
                    disabled={selectedFriends.size === 0 || !chatTitle.trim()}
                >
                    <Text style={{
                        color: (selectedFriends.size === 0 || !chatTitle.trim()) ? currentColors.textSecondary : '#FFFFFF',
                        fontSize: 16,
                        fontWeight: 'bold'
                    }}>채팅방 생성</Text>
                </TouchableOpacity>
            </ScrollView>
        </SafeAreaView>
    );
}

// --- 내비게이션 스택 ---
const commonScreenOptions = {
    headerStyle: { backgroundColor: COLORS.white, elevation: 0, shadowOpacity: 0, borderBottomWidth: 1, borderBottomColor: COLORS.lightGray },
    headerTitleStyle: { fontWeight: 'bold', color: COLORS.black },
    headerBackTitleVisible: false,
    headerTintColor: COLORS.black,
};

const HomeStack = () => <Stack.Navigator><Stack.Screen name="HomeScreen" component={HomeScreen} options={{ headerShown: false }} /></Stack.Navigator>;

const RestaurantsStack = () => (
    <Stack.Navigator screenOptions={commonScreenOptions}>
        <Stack.Screen name="RestaurantsList" component={RestaurantsScreen} options={{ title: '맛집' }} />
        <Stack.Screen name="RestaurantDetail" component={RestaurantDetailScreen} options={{ title: '' }} />
        <Stack.Screen name="AddRestaurant" component={AddRestaurantScreen} options={{ title: '새 맛집 추가' }} />
    </Stack.Navigator>
);

const PartiesStack = () => (
    <Stack.Navigator screenOptions={commonScreenOptions}>
        <Stack.Screen name="PartiesScreen" component={PartiesContainerScreen} options={{ title: '파티' }}/>
        <Stack.Screen name="PartyDetail" component={PartyDetailScreen} options={{ title: '파티 정보' }}/>
        <Stack.Screen name="DangolPotDetail" component={DangolPotDetailScreen} options={{ title: '단골파티 정보' }}/>
        <Stack.Screen name="CreateParty" component={CreatePartyScreen} options={{ title: '새 파티 만들기' }}/>
        <Stack.Screen name="CreateDangolPot" component={CreateDangolPotScreen} options={{ title: '새 단골파티 만들기' }}/>
        <Stack.Screen name="EditDangolPot" component={EditDangolPotScreen} options={{ title: '단골파티 정보 수정' }} />
        <Stack.Screen name="CreatePersonalSchedule" component={CreatePersonalScheduleScreen} options={{ title: '개인 점심 약속 추가' }} />
        <Stack.Screen name="EditPersonalSchedule" component={EditPersonalScheduleScreen} options={{ title: '개인 점심 약속 수정' }} />
        <Stack.Screen name="EditParty" component={EditPartyScreen} options={{ title: '파티 정보 수정' }} />
        <Stack.Screen name="SelectLunchDateScreen" component={SelectLunchDateScreen} options={{ title: '랜덤 런치 날짜 선택' }} />
        <Stack.Screen name="RandomLunch" component={RandomLunchScreen} options={{ title: '랜덤 런치' }} />
        <Stack.Screen name="MyProposalsScreen" component={MyProposalsScreen} options={{ title: '내 제안' }} />
        <Stack.Screen name="IntelligentScheduling" component={IntelligentSchedulingScreen} options={{ title: '지능형 스케줄링' }} />
    </Stack.Navigator>
);

const CommunicationStack = () => (
    <Stack.Navigator screenOptions={commonScreenOptions}>
        <Stack.Screen name="ChatList" component={ChatListScreen} options={{ title: '소통' }}/>
        <Stack.Screen name="ChatRoom" component={ChatRoomScreen} options={({ route }) => ({ title: route.params.chatTitle })}/>
        <Stack.Screen name="CreateChatRoom" component={CreateChatRoomScreen} options={{ title: '채팅방 생성' }}/>
        <Stack.Screen name="FriendList" component={FriendListScreen} options={{ title: '친구 목록' }}/>
        <Stack.Screen name="FriendRequests" component={FriendRequestsScreen} options={{ title: '친구 요청' }}/>
        <Stack.Screen name="SearchUsers" component={SearchUsersScreen} options={{ title: '사용자 검색' }}/>
        <Stack.Screen name="IntelligentScheduling" component={IntelligentSchedulingScreen} options={{ title: '지능형 스케줄링' }}/>
        <Stack.Screen name="Notifications" component={NotificationsScreen} options={{ title: '알림' }}/>
        <Stack.Screen name="ReviewDetail" component={ReviewDetailScreen} options={{ title: '리뷰 상세' }}/>
    </Stack.Navigator>
);

const ProfileStack = () => (
    <Stack.Navigator screenOptions={commonScreenOptions}>
        <Stack.Screen name="MyProfile" component={MyProfileScreen} options={{ title: '내 정보' }}/>
        <Stack.Screen name="ProfileEdit" component={ProfileEditScreen} options={{ title: '내 정보 수정' }}/>
    </Stack.Navigator>
);

// --- 온보딩 화면 ---
function OnboardingScreen({ navigation }) {
    const [currentStep, setCurrentStep] = useState(0);
    const [userPreferences, setUserPreferences] = useState({
        nickname: '',
        foodPreferences: [],
        lunchStyle: [],
        allergies: [],
        preferredTime: ''
    });
    const [nicknameError, setNicknameError] = useState('');
    const [checkingNickname, setCheckingNickname] = useState(false);
    const onboardingSteps = [
        {
            title: '닉네임 설정',
            description: '앱에서 사용할 닉네임을 입력해주세요',
            type: 'input',
            key: 'nickname'
        },
        {
            title: '점심 선호도 설정',
            description: '좋아하는 음식 종류를 선택해주세요',
            type: 'multiSelect',
            options: ['한식', '중식', '일식', '양식', '분식', '카페', '패스트푸드'],
            key: 'foodPreferences'
        },
        {
            title: '점심 성향',
            description: '당신의 점심 스타일을 선택해주세요',
            type: 'multiSelect',
            options: ['가성비 좋은 곳', '맛집 탐방', '건강한 식사', '빠른 식사', '새로운 메뉴 도전', '친구들과 함께', '혼자 조용히', '분위기 좋은 곳'],
            key: 'lunchStyle'
        },
        {
            title: '알레르기 정보',
            description: '알레르기가 있는 음식을 선택해주세요',
            type: 'multiSelect',
            options: ['없음', '갑각류', '견과류', '우유', '계란', '밀', '대두', '생선'],
            key: 'allergies'
        },
        {
            title: '선호 시간대',
            description: '주로 점심을 먹는 시간대를 선택해주세요',
            type: 'singleSelect',
            options: ['11:30', '11:45', '12:00', '12:15', '12:30'],
            key: 'preferredTime'
        }
    ];
    const handleNext = async () => {
        if (onboardingSteps[currentStep].key === 'nickname') {
            // 닉네임 중복 체크
            setCheckingNickname(true);
            setNicknameError('');
            const nickname = userPreferences.nickname.trim();
            if (!nickname) {
                setNicknameError('닉네임을 입력해주세요.');
                setCheckingNickname(false);
                return;
            }
            try {
                const res = await fetch(`${RENDER_SERVER_URL}/users/check-nickname?nickname=${encodeURIComponent(nickname)}`);
                const data = await res.json();
                if (data.exists) {
                    setNicknameError('이미 사용 중인 닉네임입니다. 다른 닉네임을 입력해주세요.');
                    setCheckingNickname(false);
                    return;
                }
            } catch (e) {
                setNicknameError('닉네임 중복 확인 중 오류가 발생했습니다.');
                setCheckingNickname(false);
                return;
            }
            setCheckingNickname(false);
        }
        if (currentStep < onboardingSteps.length - 1) {
            setCurrentStep(currentStep + 1);
        } else {
            // 온보딩 완료, 사용자 설정 저장
            saveUserPreferences();
            navigation.replace('MainApp');
        }
    };
    const handleBack = () => {
        if (currentStep > 0) {
            setCurrentStep(currentStep - 1);
        }
    };
    const handleOptionSelect = (option) => {
        const currentKey = onboardingSteps[currentStep].key;
        const currentStepData = onboardingSteps[currentStep];
        if (currentStepData.type === 'multiSelect') {
            setUserPreferences(prev => ({
                ...prev,
                [currentKey]: prev[currentKey].includes(option)
                    ? prev[currentKey].filter(item => item !== option)
                    : [...prev[currentKey], option]
            }));
        } else {
            setUserPreferences(prev => ({
                ...prev,
                [currentKey]: option
            }));
        }
    };
    const saveUserPreferences = async () => {
        try {
            // 사용자 기본 정보 저장
            const userData = {
                nickname: userPreferences.nickname,
                lunch_preference: userPreferences.lunchStyle?.join(', ') || '',
                main_dish_genre: userPreferences.foodPreferences?.join(', ') || '',
                main_dish: userPreferences.foodPreferences?.join(', ') || '', // 주종목으로 음식 선호도 저장
            };
            await fetch(`${RENDER_SERVER_URL}/users/${myEmployeeId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userData)
            });
            // 사용자 선호도 정보 저장
            const preferencesData = {
                foodPreferences: userPreferences.foodPreferences || [],
                allergies: userPreferences.allergies || [],
                preferredTime: userPreferences.preferredTime || '',
                frequentAreas: []
            };
            await fetch(`${RENDER_SERVER_URL}/users/${myEmployeeId}/preferences`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(preferencesData)
            });
            
            // AsyncStorage에 온보딩 완료 상태 저장
            await AsyncStorage.setItem('onboardingCompleted', 'true');
            global.hasCompletedOnboarding = true;
        } catch (error) {
            console.error('사용자 설정 저장 실패:', error);
        }
    };
    const currentStepData = onboardingSteps[currentStep];
    const selectedOptions = userPreferences[currentStepData.key] || [];
    return (
        <SafeAreaView style={{flex: 1, backgroundColor: COLORS.light.background}}>
            <View style={{padding: 20, alignItems: 'center'}}>
                <View style={{flexDirection: 'row', marginBottom: 20}}>
                    {onboardingSteps.map((_, index) => (
                        <View
                            key={index}
                            style={{
                                width: 8,
                                height: 8,
                                borderRadius: 4,
                                backgroundColor: index <= currentStep ? COLORS.light.primary : COLORS.light.lightGray,
                                marginHorizontal: 4
                            }}
                        />
                    ))}
                </View>
                <Text style={{color: COLORS.light.textSecondary, fontSize: 14}}>
                    {currentStep + 1} / {onboardingSteps.length}
                </Text>
            </View>
            <View style={{flex: 1, padding: 20}}>
                <Text style={{fontSize: 24, fontWeight: 'bold', color: COLORS.light.text, marginBottom: 10, textAlign: 'center'}}>{currentStepData.title}</Text>
                <Text style={{fontSize: 16, color: COLORS.light.textSecondary, marginBottom: 30, textAlign: 'center'}}>{currentStepData.description}</Text>
                {currentStepData.type === 'input' ? (
                    <View style={{alignItems: 'center'}}>
                        <TextInput
                            style={{
                                width: '100%',
                                borderWidth: 1,
                                borderColor: nicknameError ? COLORS.red : COLORS.light.border,
                                borderRadius: 12,
                                padding: 16,
                                fontSize: 18,
                                marginBottom: 8,
                                color: COLORS.light.text,
                                backgroundColor: '#FFFFFF'
                            }}
                            placeholder="닉네임을 입력하세요"
                            placeholderTextColor={COLORS.light.textSecondary}
                            value={userPreferences.nickname}
                            onChangeText={text => setUserPreferences(prev => ({ ...prev, nickname: text }))}
                            editable={!checkingNickname}
                        />
                        {nicknameError ? <Text style={{color: COLORS.red, marginBottom: 8}}>{nicknameError}</Text> : null}
                    </View>
                ) : (
                    <ScrollView style={{flex: 1}} showsVerticalScrollIndicator={false}>
                        {currentStepData.options.map((option) => (
                            <TouchableOpacity
                                key={option}
                                style={{
                                    backgroundColor: selectedOptions.includes(option) ? COLORS.light.primary : COLORS.light.surface,
                                    padding: 16,
                                    borderRadius: 12,
                                    marginBottom: 10,
                                    flexDirection: 'row',
                                    justifyContent: 'space-between',
                                    alignItems: 'center',
                                    borderWidth: 1,
                                    borderColor: selectedOptions.includes(option) ? COLORS.light.primary : COLORS.light.border
                                }}
                                onPress={() => handleOptionSelect(option)}
                            >
                                <Text style={{
                                    fontSize: 16,
                                    color: selectedOptions.includes(option) ? COLORS.light.surface : COLORS.light.text
                                }}>
                                    {option}
                                </Text>
                                {selectedOptions.includes(option) && (
                                    <Ionicons name="checkmark-circle" size={20} color={COLORS.light.surface} />
                                )}
                            </TouchableOpacity>
                        ))}
                    </ScrollView>
                )}
            </View>
            <View style={{flexDirection: 'row', justifyContent: 'space-between', padding: 20, backgroundColor: COLORS.light.surface}}>
                {currentStep > 0 && (
                    <TouchableOpacity style={{padding: 12, borderRadius: 8, borderWidth: 1, borderColor: COLORS.light.border}} onPress={handleBack}>
                        <Text style={{fontSize: 16, color: COLORS.light.textSecondary}}>이전</Text>
                    </TouchableOpacity>
                )}
                <TouchableOpacity style={{padding: 12, borderRadius: 8, backgroundColor: COLORS.light.primary, flex: 1, marginLeft: currentStep > 0 ? 12 : 0, alignItems: 'center'}} onPress={handleNext} disabled={checkingNickname}>
                    <Text style={{fontSize: 16, color: COLORS.light.surface, fontWeight: 'bold'}}>{currentStep === onboardingSteps.length - 1 ? '완료' : '다음'}</Text>
                </TouchableOpacity>
            </View>
        </SafeAreaView>
    );
}

// --- 알림 화면 ---
function NotificationsScreen({ navigation }) {
    const [notifications, setNotifications] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetchNotifications();
    }, []);

    const fetchNotifications = async () => {
        try {
            setLoading(true);
            const response = await fetch(`${API_BASE_URL}/notifications/${myEmployeeId}`);
            if (response.ok) {
                const data = await response.json();
                setNotifications(data);
            } else {
                // 서버 응답이 없을 때는 목업 데이터 사용
                const mockNotifications = [
                    {
                        id: 1,
                        type: 'party_invite',
                        title: '새로운 파티 초대',
                        message: '새로운 파티에 초대되었습니다',
                        data: { partyId: 1, partyTitle: '점심 모임' },
                        timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30분 전
                        read: false
                    },
                    {
                        id: 2,
                        type: 'friend_request',
                        title: '친구 요청',
                        message: '새로운 친구 요청이 있습니다',
                        data: { requesterId: 'USER002', requesterName: '김철수' },
                        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2시간 전
                        read: true
                    }
                ];
                setNotifications(mockNotifications);
            }
        } catch (error) {
            console.error('알림 조회 실패:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleNotificationPress = (notification) => {
        // 알림 타입에 따라 다른 화면으로 이동
        switch (notification.type) {
            case 'party_invite':
                navigation.navigate('파티', { screen: 'PartyDetail', params: { partyId: notification.data.partyId } });
                break;
            case 'friend_request':
                navigation.navigate('내 정보', { screen: 'FriendRequests' });
                break;
            case 'lunch_reminder':
                navigation.navigate('홈');
                break;
            default:
                break;
        }
    };

    const renderNotificationItem = ({ item }) => (
        <TouchableOpacity 
            style={[
                styles.notificationItem,
                !item.read && styles.unreadNotification
            ]}
            onPress={() => handleNotificationPress(item)}
        >
            <View style={styles.notificationIcon}>
                {item.type === 'party_invite' && <Ionicons name="people" size={20} color={currentColors.primary} />}
                {item.type === 'friend_request' && <Ionicons name="person-add" size={20} color={currentColors.secondary} />}
                {item.type === 'lunch_reminder' && <Ionicons name="restaurant" size={20} color={currentColors.accent} />}
            </View>
            <View style={styles.notificationContent}>
                <Text style={styles.notificationMessage}>{item.message}</Text>
                <Text style={styles.notificationTime}>
                    {new Date(item.timestamp).toLocaleString('ko-KR')}
                </Text>
            </View>
            {!item.read && <View style={styles.unreadDot} />}
        </TouchableOpacity>
    );

    return (
        <SafeAreaView style={styles.safeArea}>
            <View style={styles.header}>
                <Text style={styles.headerTitle}>알림</Text>
                <TouchableOpacity onPress={() => setNotifications([])}>
                    <Text style={styles.clearButton}>모두 지우기</Text>
                </TouchableOpacity>
            </View>
            
            {loading ? (
                <ActivityIndicator size="large" style={{marginTop: 20}} color={currentColors.primary} />
            ) : (
                <FlatList
                    data={notifications}
                    keyExtractor={item => item.id.toString()}
                    renderItem={renderNotificationItem}
                    ListEmptyComponent={
                        <View style={styles.emptyContainer}>
                            <Ionicons name="notifications-off" size={64} color={currentColors.gray} />
                            <Text style={styles.emptyText}>새로운 알림이 없습니다</Text>
                        </View>
                    }
                    contentContainerStyle={{paddingTop: 16}}
                />
            )}
        </SafeAreaView>
    );
}

// --- 리뷰 상세 화면 ---
function ReviewDetailScreen({ route, navigation }) {
    const { review } = route.params;
    const [likes, setLikes] = useState(review.likes || 0);
    const [hasLiked, setHasLiked] = useState(false);

    const handleLike = async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/reviews/${review.id}/like`, {
                method: 'POST'
            });
            const data = await response.json();
            setLikes(data.likes);
            setHasLiked(true);
        } catch (error) {
            console.error('좋아요 실패:', error);
        }
    };

    return (
        <SafeAreaView style={styles.container}>
            <View style={styles.header}>
                <TouchableOpacity onPress={() => navigation.goBack()}>
                    <Ionicons name="arrow-back" size={24} color={currentColors.text} />
                </TouchableOpacity>
                <Text style={styles.headerTitle}>리뷰 상세</Text>
                <View style={{width: 24}} />
            </View>
            
            <ScrollView style={styles.reviewDetailContainer}>
                <View style={styles.reviewDetailCard}>
                    <View style={styles.reviewHeader}>
                        <Text style={styles.reviewAuthor}>{review.nickname}</Text>
                        <View style={styles.ratingContainer}>
                            {[1, 2, 3, 4, 5].map(star => (
                                <Ionicons
                                    key={star}
                                    name={star <= review.rating ? "star" : "star-outline"}
                                    size={16}
                                    color={star <= review.rating ? currentColors.yellow : currentColors.gray}
                                />
                            ))}
                        </View>
                    </View>
                    
                    {review.photo_url && (
                        <View style={styles.reviewPhotoContainer}>
                            <Image
                                source={{ uri: review.photo_url }}
                                style={styles.reviewPhoto}
                                resizeMode="cover"
                            />
                        </View>
                    )}
                    
                    {review.tags && (
                        <View style={styles.tagsContainer}>
                            {review.tags.split(',').map((tag, index) => (
                                <View key={index} style={styles.tagItem}>
                                    <Text style={styles.tagText}>{tag.trim()}</Text>
                                </View>
                            ))}
                        </View>
                    )}
                    
                    {review.comment && (
                        <Text style={styles.reviewComment}>{review.comment}</Text>
                    )}
                    
                    <View style={styles.reviewActions}>
                        <TouchableOpacity
                            style={[styles.likeButton, hasLiked && styles.likedButton]}
                            onPress={handleLike}
                            disabled={hasLiked}
                        >
                            <Ionicons
                                name={hasLiked ? "heart" : "heart-outline"}
                                size={20}
                                color={hasLiked ? currentColors.red : currentColors.gray}
                            />
                            <Text style={[styles.likeCount, hasLiked && styles.likedText]}>
                                {likes}
                            </Text>
                        </TouchableOpacity>
                    </View>
                </View>
            </ScrollView>
        </SafeAreaView>
    );
}

// --- 지능형 스케줄링 화면 ---
function IntelligentSchedulingScreen({ navigation, route }) {
    const { chatMembers, chatType, chatId } = route.params || {};
    const [selectedFriends, setSelectedFriends] = useState([]);
    const [friends, setFriends] = useState([]);
    const [suggestedDates, setSuggestedDates] = useState([]);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        if (chatMembers && chatMembers.length > 0) {
            // 채팅방에서 전달받은 참가자 정보 사용
            setFriends(chatMembers);
            setSelectedFriends(chatMembers.map(member => member.employee_id));
        } else {
            // 일반적인 경우 친구 목록 가져오기
            fetchFriends();
        }
    }, [chatMembers]);

    const fetchFriends = async () => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/friends?employee_id=${myEmployeeId}`);
            if (response.ok) {
                const data = await response.json();
                setFriends(data);
            }
        } catch (error) {
            console.error('친구 목록 조회 실패:', error);
        }
    };

    const handleFriendToggle = (friendId) => {
        setSelectedFriends(prev => 
            prev.includes(friendId) 
                ? prev.filter(id => id !== friendId)
                : [...prev, friendId]
        );
    };

    const handleSuggestDates = async () => {
        if (selectedFriends.length < 1) {
            Alert.alert('친구 선택', '최소 1명의 친구를 선택해주세요.');
      return;
    }

        setLoading(true);
        try {
            console.log('선택된 참가자들:', selectedFriends);
            
            const response = await fetch(`${RENDER_SERVER_URL}/intelligent/suggest-dates`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    participant_ids: selectedFriends
                })
    });

            if (response.ok) {
    const data = await response.json();
                console.log('날짜 제안 결과:', data);
                setSuggestedDates(data);
                
                // 성공 메시지 표시
                if (data.type === 'common' && data.dates && data.dates.length > 0) {
                    Alert.alert('성공', `${data.dates.length}개의 공통 가능 날짜를 찾았습니다!`);
                } else if (data.type === 'alternative') {
                    Alert.alert('알림', '완전히 공통된 날짜는 없지만, 대안을 제시합니다.');
                }
            } else {
                const errorData = await response.json();
                console.error('서버 오류:', errorData);
                Alert.alert('오류', errorData.message || '날짜 제안을 가져오는데 실패했습니다.');
            }
            
        } catch (error) {
            console.error('날짜 제안 실패:', error);
            Alert.alert('오류', '네트워크 오류가 발생했습니다.');
        } finally {
            setLoading(false);
        }
    };

    const renderFriendItem = ({ item }) => (
        <TouchableOpacity 
            style={{
                flexDirection: 'row',
                alignItems: 'center',
                paddingVertical: 12,
                paddingHorizontal: 16,
                backgroundColor: selectedFriends.includes(item.employee_id) ? currentColors.primaryLight : 'transparent',
                borderRadius: 12,
                marginBottom: 8,
                borderWidth: 1,
                borderColor: selectedFriends.includes(item.employee_id) ? currentColors.primary : currentColors.lightGray
            }}
            onPress={() => handleFriendToggle(item.employee_id)}
        >
            <View style={{flex: 1}}>
                <Text style={{
                    fontSize: 16,
                    fontWeight: 'bold',
                    color: currentColors.text,
                    marginBottom: 4
                }}>
                    {item.nickname}
                    {item.is_host && (
                        <Text style={{
                            fontSize: 12,
                            color: currentColors.primary,
                            marginLeft: 8
                        }}>
                            (팟장)
                        </Text>
                    )}
                </Text>
                <Text style={{
                    fontSize: 14,
                    color: currentColors.textSecondary
                }}>
                    {item.lunch_preference || '선호도 정보 없음'}
                </Text>
            </View>
            {selectedFriends.includes(item.employee_id) && (
                <Ionicons name="checkmark-circle" size={24} color={currentColors.primary} />
            )}
        </TouchableOpacity>
    );

    const renderDateItem = ({ item }) => (
        <View style={{
            backgroundColor: currentColors.primaryLight,
            borderRadius: 12,
            padding: 16,
            marginBottom: 8,
            borderWidth: 1,
            borderColor: currentColors.primary
        }}>
            <Text style={{
                fontSize: 16,
                fontWeight: 'bold',
                color: currentColors.primary,
                marginBottom: 4
            }}>
                {item.date}
            </Text>
            <Text style={{
                fontSize: 14,
                color: currentColors.textSecondary
            }}>
                {item.available_participants?.length || 0}명 가능
            </Text>
            {item.unavailable_participants && item.unavailable_participants.length > 0 && (
                <Text style={{
                    fontSize: 12,
                    color: currentColors.red,
                    marginTop: 4
                }}>
                    {item.unavailable_participants.length}명 불가
                </Text>
            )}
        </View>
    );

    return (
        <SafeAreaView style={{flex: 1, backgroundColor: currentColors.background}}>
            <ScrollView 
                style={{flex: 1}} 
                contentContainerStyle={{paddingHorizontal: 16, paddingBottom: 20}}
                showsVerticalScrollIndicator={true}
            >
                <View style={{marginTop: 20, marginBottom: 24}}>
                    <Text style={{
                        fontSize: 24,
                        fontWeight: 'bold',
                        color: currentColors.text,
                        marginBottom: 8
                    }}>
                        {chatMembers ? '지능형 약속 잡기' : '친구 선택'}
                    </Text>
                    <Text style={{
                        fontSize: 16,
                        color: currentColors.textSecondary,
                        lineHeight: 22
                    }}>
                        {chatMembers 
                            ? '채팅방 참가자들과 함께 점심을 먹을 수 있는 날짜를 찾아보세요.'
                            : '함께 점심을 먹을 친구들을 선택해주세요.'
                        }
                    </Text>
                </View>

                <View style={{
                    backgroundColor: currentColors.surface,
                    borderRadius: 16,
                    padding: 20,
                    marginBottom: 20,
                    shadowColor: '#000',
                    shadowOffset: { width: 0, height: 2 },
                    shadowOpacity: 0.1,
                    shadowRadius: 8,
                    elevation: 4
                }}>
                    <Text style={{
                        fontSize: 18,
                        fontWeight: 'bold',
                        color: currentColors.text,
                        marginBottom: 16
                    }}>
                        {chatMembers ? '채팅방 참가자' : '친구 목록'}
                    </Text>
                    <FlatList
                        data={friends}
                        renderItem={renderFriendItem}
                        keyExtractor={(item, index) => `intelligent-${item.employee_id}-${index}`}
                        scrollEnabled={false}
                        showsVerticalScrollIndicator={false}
                    />
                </View>

                <TouchableOpacity 
                    style={{
                        backgroundColor: selectedFriends.length === 0 ? currentColors.disabled : currentColors.primary,
                        borderRadius: 16,
                        paddingVertical: 16,
                        paddingHorizontal: 24,
                        alignItems: 'center',
                        marginBottom: 20,
                        shadowColor: currentColors.primary,
                        shadowOffset: { width: 0, height: 4 },
                        shadowOpacity: 0.3,
                        shadowRadius: 8,
                        elevation: 6
                    }}
                    onPress={handleSuggestDates}
                    disabled={selectedFriends.length === 0 || loading}
                >
                    <Text style={{
                        fontSize: 18,
                        fontWeight: 'bold',
                        color: '#FFFFFF'
                    }}>
                        {loading ? '분석 중...' : (chatMembers ? '점심 약속 잡기' : '공통 가능 날짜 찾기')}
                    </Text>
                </TouchableOpacity>

                {suggestedDates && suggestedDates.type && (
                    <View style={{
                        backgroundColor: currentColors.surface,
                        borderRadius: 16,
                        padding: 20,
                        shadowColor: '#000',
                        shadowOffset: { width: 0, height: 2 },
                        shadowOpacity: 0.1,
                        shadowRadius: 8,
                        elevation: 4
                    }}>
                        <Text style={{
                            fontSize: 18,
                            fontWeight: 'bold',
                            color: currentColors.text,
                            marginBottom: 16
                        }}>
                            제안된 날짜
                        </Text>
                        {suggestedDates.type === 'common' && suggestedDates.dates ? (
                            <FlatList
                                data={suggestedDates.dates}
                                renderItem={renderDateItem}
                                keyExtractor={item => item.date}
                                scrollEnabled={false}
                                showsVerticalScrollIndicator={false}
                            />
                        ) : suggestedDates.type === 'alternative' && suggestedDates.best_alternative ? (
                            <View style={{
                                backgroundColor: currentColors.primaryLight,
                                borderRadius: 12,
                                padding: 16,
                                alignItems: 'center'
                            }}>
                                <Text style={{
                                    fontSize: 16,
                                    fontWeight: 'bold',
                                    color: currentColors.primary,
                                    marginBottom: 8
                                }}>
                                    공통 가능 날짜가 없습니다
                                </Text>
                                <Text style={{
                                    fontSize: 14,
                                    color: currentColors.textSecondary,
                                    textAlign: 'center'
                                }}>
                                    대안: {suggestedDates.best_alternative.date} 
                                    ({suggestedDates.best_alternative.available_count}명 가능)
                                </Text>
                            </View>
                        ) : (
                            <Text style={{
                                fontSize: 14,
                                color: currentColors.textSecondary,
                                textAlign: 'center'
                            }}>
                                날짜 정보를 불러오는 중...
                            </Text>
                        )}
                    </View>
                )}
            </ScrollView>
        </SafeAreaView>
    );
}

// --- 메인 앱 ---
export default function App() {
  // 전역 변수를 먼저 설정 (다른 컴포넌트에서 사용하기 위해)
  global.currentColors = COLORS.light;
  global.colors = COLORS.light;
  global.styles = createStyles(COLORS.light);
  global.isDarkMode = false;
  
  const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState(false);
  const [showOnboarding, setShowOnboarding] = useState(true);
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isDarkMode, setIsDarkMode] = useState(false);

  const colors = isDarkMode ? COLORS.dark : COLORS.light;
  const styles = createStyles(colors);
  
  // 전역 변수를 현재 색상으로 업데이트
  global.currentColors = colors;
  global.colors = colors;
  global.styles = styles;
  global.isDarkMode = isDarkMode;

  useEffect(() => {
    // AsyncStorage에서 온보딩 완료 여부 확인
    const checkOnboardingStatus = async () => {
      try {
        const onboardingCompleted = await AsyncStorage.getItem('onboardingCompleted');
        if (onboardingCompleted === 'true' || global.hasCompletedOnboarding) {
          setHasCompletedOnboarding(true);
          setShowOnboarding(false);
        }
      } catch (error) {
        console.error('온보딩 상태 확인 중 오류:', error);
      }
    };
    
    checkOnboardingStatus();
  }, []);

  const handleOnboardingComplete = () => {
    setHasCompletedOnboarding(true);
    setShowOnboarding(false);
  };

  if (showOnboarding && !hasCompletedOnboarding) {
    return <OnboardingScreen navigation={{ replace: handleOnboardingComplete }} />;
  }

  return (
    <NavigationContainer>
      <Tab.Navigator screenOptions={({ route }) => ({
          tabBarIcon: ({ focused, color, size }) => {
            const icons = { '홈': 'home', '맛집': 'restaurant', '파티': 'people', '소통': 'chatbubbles', '내 정보': 'person' };
            const iconName = focused ? icons[route.name] : `${icons[route.name]}-outline`;
            return <Ionicons name={iconName} size={size} color={color} />;
          },
          tabBarActiveTintColor: colors.primary,
          tabBarInactiveTintColor: colors.gray,
          headerShown: false,
          tabBarStyle: { 
              backgroundColor: colors.surface, 
              borderTopColor: colors.lightGray,
              height: 85,
              paddingBottom: 18,
              paddingTop: 10,
              elevation: 8,
              shadowColor: colors.primary,
              shadowOffset: { width: 0, height: -2 },
              shadowOpacity: 0.1,
              shadowRadius: 4
          },
          tabBarLabelStyle: { fontWeight: '600', fontSize: 12, marginTop: 2 },
          tabBarIconStyle: { marginBottom: 4 }
      })}>
        <Tab.Screen name="홈" component={HomeStack} />
        <Tab.Screen name="맛집" component={RestaurantsStack} />
        <Tab.Screen name="파티" component={PartiesStack} />
        <Tab.Screen name="소통" component={CommunicationStack} />
        <Tab.Screen name="내 정보" component={ProfileStack} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

// --- 스타일시트 ---
const createStyles = (colors) => StyleSheet.create({
    safeArea: { flex: 1, backgroundColor: colors.background },
    centerView: { flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20, backgroundColor: colors.background },
    header: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', paddingHorizontal: 16, paddingTop: 10, paddingBottom: 10, backgroundColor: colors.background },
    headerTitle: { fontSize: 32, fontWeight: 'bold', color: colors.primary, textAlign: 'center', width: '100%', letterSpacing: 1 },
    card: { 
        backgroundColor: colors.surface, 
        borderRadius: 20, 
        padding: 20, 
        marginHorizontal: 16, 
        marginBottom: 16, 
        elevation: 3, 
        shadowColor: colors.primary,
        shadowOffset: { width: 0, height: 4 }, 
        shadowOpacity: 0.1, 
        shadowRadius: 8,
        borderWidth: 1,
        borderColor: 'rgba(59, 130, 246, 0.1)'
    },
    profileCard: { 
        backgroundColor: colors.surface, 
        borderRadius: 20, 
        padding: 20, 
        marginHorizontal: 16, 
        marginBottom: 16, 
        elevation: 3, 
        shadowColor: colors.primary,
        shadowOffset: { width: 0, height: 4 }, 
        shadowOpacity: 0.1, 
        shadowRadius: 8 
    },
    cardTitle: { fontSize: 20, fontWeight: 'bold', marginBottom: 12, color: colors.primary },
    homeContainer: { paddingBottom: 20 },
    menuText: { fontSize: 16, color: colors.textSecondary, lineHeight: 24 },
    countdownText: { fontSize: 14, fontWeight: 'bold', color: colors.primaryLight, marginTop: 8 },
    appointmentCard: { 
        backgroundColor: colors.surface, 
        borderRadius: 16, 
        padding: 20, 
        marginHorizontal: 6, 
        width: SCREEN_WIDTH * 0.5, 
        height: 160, 
        borderWidth: 2, 
        borderColor: colors.lightGray, 
        justifyContent: 'flex-start',
        elevation: 2,
        shadowColor: colors.primary,
        shadowOffset: { width: 0, height: 2 }, 
        shadowOpacity: 0.1, 
        shadowRadius: 4
    },
    appointmentDate: { fontWeight: 'bold', marginBottom: 8, color: colors.primary, fontSize: 18 },
    eventItem: { marginTop: 5 },
    eventTitle: { fontWeight: '600', fontSize: 16, color: colors.text },
    eventDetail: { fontSize: 13.5, color: colors.textSecondary, marginTop: 2 },
    noAppointmentText: { fontSize: 14, color: colors.textSecondary, textAlign: 'center' },
    centeredView: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.6)' },
    modalView: { 
        margin: 20, 
        backgroundColor: 'white', 
        borderRadius: 24, 
        padding: 30, 
        alignItems: 'center', 
        width: '90%', 
        shadowColor: '#000', 
        shadowOffset: { width: 0, height: 8 }, 
        shadowOpacity: 0.3, 
        shadowRadius: 12, 
        elevation: 8 
    },
    modalTitle: { fontSize: 22, fontWeight: 'bold', marginBottom: 24, textAlign: 'center', color: colors.primary, letterSpacing: 0.5 },
    modalHeader: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', width: '100%', marginBottom: 20 },
    modalDetailCard: { 
        backgroundColor: colors.background, 
        borderRadius: 16, 
        padding: 18, 
        marginBottom: 12, 
        width: '100%',
        borderWidth: 1,
        borderColor: 'rgba(59, 130, 246, 0.2)'
    },
    modalDetailText: { fontSize: 15, color: colors.text, lineHeight: 22, marginTop: 4 },
    button: { 
        borderRadius: 16, 
        padding: 16, 
        elevation: 3, 
        width: '100%', 
        marginTop: 12,
        shadowColor: colors.primary,
        shadowOffset: { width: 0, height: 2 }, 
        shadowOpacity: 0.2, 
        shadowRadius: 4
    },
    buttonClose: { backgroundColor: colors.lightGray },
    textStyle: { color: colors.surface, fontWeight: 'bold', textAlign: 'center', fontSize: 16 },
    textStyleBlack: { color: colors.text, fontWeight: 'bold', textAlign: 'center', fontSize: 16 },
    formContainer: { padding: 20 },
    inputLabel: { fontSize: 16, fontWeight: '600', color: colors.textSecondary, marginBottom: 8, marginLeft: 4 },
    input: { 
        backgroundColor: colors.surface, 
        borderRadius: 16, 
        padding: 16, 
        marginBottom: 20, 
        fontSize: 16, 
        borderWidth: 2, 
        borderColor: colors.lightGray, 
        color: colors.text 
    },
    inputText: { color: colors.text, fontSize: 16 },
    placeholderText: { color: colors.textSecondary, fontSize: 16 },
    submitButton: { 
        backgroundColor: colors.primary, 
        padding: 16, 
        borderRadius: 16, 
        alignItems: 'center', 
        marginTop: 12,
        shadowColor: colors.primary,
        shadowOffset: { width: 0, height: 4 }, 
        shadowOpacity: 0.3, 
        shadowRadius: 8
    },
    submitButtonText: { color: colors.surface, fontWeight: 'bold', fontSize: 16 },
    searchSortContainer: { backgroundColor: colors.surface, paddingBottom: 10, borderBottomWidth: 1, borderBottomColor: colors.lightGray },
    searchInput: { backgroundColor: colors.background, borderRadius: 16, padding: 14, marginHorizontal: 16, marginTop: 10, fontSize: 16 },
    sortContainer: { flexDirection: 'row', justifyContent: 'space-around', paddingHorizontal: 16, marginTop: 15 },
    sortButton: { flexDirection: 'row', alignItems: 'center', paddingVertical: 10, paddingHorizontal: 14, backgroundColor: colors.background, borderRadius: 24 },
    sortButtonActive: { backgroundColor: colors.primaryLight },
    sortButtonText: { color: colors.text, fontWeight: '600' },
    sortButtonTextActive: { color: colors.primary, fontWeight: 'bold' },
    restaurantName: { fontSize: 18, fontWeight: 'bold' },
    restaurantCategory: { color: colors.textSecondary, marginBottom: 5 },
    restaurantInfo: { flexDirection: 'row', justifyContent: 'flex-end', alignItems: 'center', marginTop: 5 },
    restaurantRating: { color: colors.primary, fontWeight: 'bold', marginRight: 10 },
    restaurantReviews: { color: colors.textSecondary },
    infoCard: { backgroundColor: colors.surface, padding: 20, margin: 16, borderRadius: 20 },
    infoCardTitle: { fontSize: 22, fontWeight: 'bold', color: colors.black, marginBottom: 8, width: '80%' },
    infoCardAddress: { fontSize: 16, color: COLORS.gray, marginBottom: 12 },
    keywordContainer: { flexDirection: 'row', flexWrap: 'wrap', marginTop: 5 },
    keywordChip: { backgroundColor: COLORS.primaryLight, borderRadius: 20, paddingVertical: 8, paddingHorizontal: 14, marginRight: 8, marginBottom: 8 },
    keywordText: { color: COLORS.primary, fontWeight: 'bold' },
    createPartyButton: { padding: 16, borderRadius: 16, marginHorizontal: 16, marginBottom: 10, alignItems: 'center' },
    createPartyButtonText: { color: 'white', fontWeight: 'bold', fontSize: 16, textAlign: 'center' },
    reviewInputContainer: { padding: 16, backgroundColor: 'white', marginHorizontal:16, borderRadius: 20 },
    starContainer: { flexDirection: 'row', marginBottom: 15, justifyContent: 'space-around' },
    reviewCard: { backgroundColor: 'white', padding: 16, marginHorizontal: 16, marginVertical: 6, borderRadius: 16 },
    reviewHeader: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 5 },
    reviewNickname: { fontWeight: 'bold' },
    reviewDate: { color: COLORS.gray, fontSize: 12 },
    starContainerStatic: { flexDirection: 'row', alignItems: 'center', marginVertical: 4 },
    reviewComment: { marginTop: 5, color: COLORS.black, lineHeight: 20 },
    correctionButton: { alignSelf: 'center', padding: 15, marginTop: 20 },
    correctionButtonText: { color: COLORS.gray, textDecorationLine: 'underline' },
    noDataMessage: { fontSize: 16, color: COLORS.gray, textAlign: 'center', marginTop: 50 },
    partyTitle: { fontSize: 18, fontWeight: 'bold' },
    partySubtitle: { fontSize: 14, color: COLORS.gray, marginTop: 4 },
    chatListItem: { backgroundColor: COLORS.white, flexDirection: 'row', padding: 16, alignItems: 'center', marginHorizontal: 16, marginVertical: 6, borderRadius: 16 },
    chatIcon: { width: 50, height: 50, borderRadius: 25, backgroundColor: COLORS.primary, justifyContent: 'center', alignItems: 'center', marginRight: 15 },
    chatTextContainer: { flex: 1 },
    chatListTitle: { fontSize: 16, fontWeight: 'bold' },
    chatListSubtitle: { fontSize: 14, color: COLORS.gray, marginTop: 2 },
    profileViewContainer: { padding: 16 },
    profileInfoRow: { flexDirection: 'row', alignItems: 'center', marginBottom: 20 },
    profileViewText: { fontSize: 18, color: COLORS.black, marginLeft: 15 },
    profileViewTags: { fontSize: 16, color: COLORS.gray, flexWrap: 'wrap', lineHeight: 24 },
    detailContainer: { padding: 20, paddingBottom: 50 },
    title: { fontSize: 24, fontWeight: 'bold', color: COLORS.black, marginBottom: 20 },
    detailInfo: { fontSize: 16, color: COLORS.black, marginBottom: 8, lineHeight: 24 },
    memberList: { width: '100%', marginTop: 20, padding: 20, backgroundColor: COLORS.white, borderRadius: 20 },
    partyFullText: { marginTop: 20, color: COLORS.red, fontSize: 16, textAlign: 'center' },
    chatRoomContainer: { flex: 1, padding: 10, backgroundColor: COLORS.background },
    chatMemberText: { fontSize: 15, marginLeft: 10, marginBottom: 5, lineHeight: 22 },
    chatContentArea: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: COLORS.white, borderRadius: 16, margin: 10, padding: 10 },
    chatButton: { padding: 16, borderRadius: 16, alignItems: 'center', marginHorizontal: 10, marginBottom: 10 },
    chatButtonText: { color: 'white', fontWeight: 'bold', fontSize: 16 },
    matchedMemberCard: { backgroundColor: COLORS.primaryLight, borderRadius: 16, padding: 16, marginBottom: 12, width: '100%' },
    matchedMemberTitle: { fontSize: 16, fontWeight: 'bold', color: COLORS.primary },
    matchedMemberText: { fontSize: 14, color: COLORS.gray, marginTop: 5 },
    optionButton: { padding: 16, borderBottomWidth: 1, borderBottomColor: '#eee' },
    optionButtonSelected: { backgroundColor: COLORS.primaryLight },
    optionButtonText: { textAlign: 'center', fontSize: 16, color: COLORS.black },
    optionButtonTextSelected: { color: COLORS.primary, fontWeight: 'bold' },
    scrollerContainer: { height: 150, alignItems: 'center', justifyContent: 'center', marginBottom: 20 },
    scroller: { width: '100%' },
    scrollerItem: { height: 50, justifyContent: 'center', alignItems: 'center' },
    scrollerItemText: { fontSize: 24, fontWeight: 'bold' },
    scrollerIndicator: { position: 'absolute', top: 50, height: 50, width: '90%', borderWidth: 2, borderColor: COLORS.primary, borderRadius: 10 },
    categoryChip: { backgroundColor: COLORS.primaryLight, borderRadius: 20, paddingVertical: 6, paddingHorizontal: 12, alignSelf: 'flex-start' },
    categoryChipText: { color: COLORS.primary, fontWeight: 'bold', fontSize: 12 },
    dangolpotCard: { 
        backgroundColor: COLORS.white, 
        borderRadius: 16, 
        marginHorizontal: 16, 
        marginBottom: 12, 
        padding: 16, 
        elevation: 2, 
        shadowColor: COLORS.indigo,
        shadowOffset: { width: 0, height: 2 }, 
        shadowOpacity: 0.1, 
        shadowRadius: 4,
        borderWidth: 1,
        borderColor: 'rgba(99, 102, 241, 0.2)'
    },
    myPotCard: { 
        backgroundColor: COLORS.white, 
        borderRadius: 16, 
        padding: 16, 
        marginHorizontal: 6, 
        width: SCREEN_WIDTH * 0.5, 
        height: 160, 
        borderWidth: 2, 
        borderColor: COLORS.lightGray, 
        justifyContent: 'flex-start',
        elevation: 2,
        shadowColor: COLORS.indigo,
        shadowOffset: { width: 0, height: 2 }, 
        shadowOpacity: 0.1, 
        shadowRadius: 4
    },
    containerTitle: { fontSize: 22, fontWeight: 'bold', color: COLORS.black, marginHorizontal: 16, marginTop: 20, marginBottom: 12 },
    myPotTitle: { fontSize: 16, fontWeight: 'bold', color: COLORS.primary, marginBottom: 8 },
    myPotSubtitle: { fontSize: 13, color: COLORS.gray, marginTop: 4, lineHeight: 18 },
    myPotMemberCount: { fontSize: 12, color: COLORS.primary, fontWeight: 'bold' },
    myPotDate: { fontSize: 11, color: COLORS.gray },
    myPartyCard: { 
        backgroundColor: COLORS.white, 
        borderRadius: 16, 
        padding: 16, 
        marginHorizontal: 6, 
        width: SCREEN_WIDTH * 0.5, 
        height: 160, 
        borderWidth: 2, 
        borderColor: COLORS.lightGray, 
        justifyContent: 'flex-start',
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 }, 
        shadowOpacity: 0.1, 
        shadowRadius: 4
    },
    myPartyTitle: { fontSize: 16, fontWeight: 'bold', color: COLORS.primary, marginBottom: 8 },
    myPartySubtitle: { fontSize: 13, color: COLORS.gray, marginTop: 4, lineHeight: 18 },
    myPartyMemberCount: { fontSize: 12, color: COLORS.primary, fontWeight: 'bold' },
    myPartyRestaurant: { fontSize: 11, color: COLORS.gray, flex: 1, marginLeft: 8 },
    // 채팅 관련 스타일
    chatContainer: { flex: 1, backgroundColor: COLORS.background },
    messagesList: { flex: 1 },
    messagesContainer: { padding: 10 },
    messageContainer: { marginBottom: 15 },
    myMessage: { alignItems: 'flex-end' },
    otherMessage: { alignItems: 'flex-start' },
    messageSender: { fontSize: 12, color: COLORS.gray, marginBottom: 4, marginLeft: 10 },
    messageBubble: { maxWidth: '80%', padding: 12, borderRadius: 20 },
    myMessageBubble: { backgroundColor: COLORS.primary, borderBottomRightRadius: 6 },
    otherMessageBubble: { backgroundColor: COLORS.white, borderBottomLeftRadius: 6 },
    messageText: { fontSize: 16, lineHeight: 20 },
    myMessageText: { color: COLORS.white },
    otherMessageText: { color: COLORS.black },
    messageTime: { fontSize: 10, color: COLORS.gray, marginTop: 4, marginHorizontal: 10 },
    inputContainer: { 
        flexDirection: 'row', 
        padding: 12, 
        backgroundColor: COLORS.white, 
        borderTopWidth: 1, 
        borderTopColor: COLORS.lightGray,
        alignItems: 'flex-end'
    },
    messageInput: { 
        flex: 1, 
        backgroundColor: COLORS.background, 
        borderRadius: 24, 
        paddingHorizontal: 16,
        paddingVertical: 12, 
        marginRight: 8, 
        fontSize: 16, 
        maxHeight: 100
    },
    sendButton: {
        backgroundColor: COLORS.primary,
        borderRadius: 24,
        width: 44,
        height: 44,
        justifyContent: 'center',
        alignItems: 'center'
    },
    sendButtonDisabled: {
        backgroundColor: COLORS.lightGray
    },
    // 친구 관리 관련 스타일
    friendItem: {
        backgroundColor: COLORS.white,
        flexDirection: 'row',
        padding: 16,
        alignItems: 'center',
        marginHorizontal: 16,
        marginVertical: 6,
        borderRadius: 16,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4
    },
    friendInfo: {
        flex: 1
    },
    friendName: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black
    },
    friendDepartment: {
        fontSize: 14,
        color: COLORS.gray,
        marginTop: 2
    },
    unfriendButton: {
        backgroundColor: COLORS.red,
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderRadius: 12
    },
    unfriendButtonText: {
        color: COLORS.white,
        fontSize: 12,
        fontWeight: 'bold'
    },
    requestItem: {
        backgroundColor: COLORS.white,
        padding: 16,
        marginHorizontal: 16,
        marginVertical: 6,
        borderRadius: 16,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4
    },
    requestInfo: {
        marginBottom: 12
    },
    requestName: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black
    },
    requestDepartment: {
        fontSize: 14,
        color: COLORS.gray,
        marginTop: 2
    },
    requestDate: {
        fontSize: 12,
        color: COLORS.gray,
        marginTop: 4
    },
    requestActions: {
        flexDirection: 'row',
        justifyContent: 'space-between'
    },
    requestButton: {
        flex: 1,
        paddingVertical: 8,
        borderRadius: 12,
        alignItems: 'center',
        marginHorizontal: 4
    },
    acceptButton: {
        backgroundColor: COLORS.primary
    },
    rejectButton: {
        backgroundColor: COLORS.red
    },
    acceptButtonText: {
        color: COLORS.white,
        fontSize: 14,
        fontWeight: 'bold'
    },
    rejectButtonText: {
        color: COLORS.white,
        fontSize: 14,
        fontWeight: 'bold'
    },
    searchContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingVertical: 12,
        backgroundColor: COLORS.white,
        borderBottomWidth: 1,
        borderBottomColor: COLORS.lightGray
    },
    searchButton: {
        backgroundColor: COLORS.primary,
        padding: 12,
        borderRadius: 12,
        marginLeft: 8
    },
    searchResultItem: {
        backgroundColor: COLORS.white,
        flexDirection: 'row',
        padding: 16,
        alignItems: 'center',
        marginHorizontal: 16,
        marginVertical: 6,
        borderRadius: 16,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4
    },
    searchResultInfo: {
        flex: 1
    },
    searchResultName: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black
    },
    searchResultDepartment: {
        fontSize: 14,
        color: COLORS.gray,
        marginTop: 2
    },
    addFriendButton: {
        backgroundColor: COLORS.primary,
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderRadius: 12
    },
    addFriendButtonDisabled: {
        backgroundColor: COLORS.lightGray
    },
    addFriendButtonPending: {
        backgroundColor: COLORS.yellow
    },
    addFriendButtonText: {
        color: COLORS.white,
        fontSize: 12,
        fontWeight: 'bold'
    },
    addFriendButtonTextDisabled: {
        color: COLORS.gray
    },
    addFriendButtonTextPending: {
        color: COLORS.deepBlue
    },
    friendSelectItem: {
        backgroundColor: COLORS.white,
        flexDirection: 'row',
        padding: 16,
        alignItems: 'center',
        marginBottom: 8,
        borderRadius: 12,
        borderWidth: 2,
        borderColor: COLORS.lightGray
    },
    friendSelectItemSelected: {
        borderColor: COLORS.primary,
        backgroundColor: COLORS.primaryLight
    },
    friendSelectInfo: {
        flex: 1
    },
    friendSelectName: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black
    },
    friendSelectDepartment: {
        fontSize: 14,
        color: COLORS.gray,
        marginTop: 2
    },
    submitButtonDisabled: {
        backgroundColor: COLORS.lightGray
    },
    sendButton: { 
        backgroundColor: COLORS.primary, 
        width: 44, 
        height: 44, 
        borderRadius: 22, 
        justifyContent: 'center', 
        alignItems: 'center' 
    },
    sendButtonDisabled: { 
        backgroundColor: COLORS.lightGray 
    },
    connectionStatus: { 
        position: 'absolute', 
        top: 10, 
        right: 10, 
        backgroundColor: COLORS.red, 
        paddingHorizontal: 12, 
        paddingVertical: 6, 
        borderRadius: 20 
    },
    connectionStatusText: { 
        color: COLORS.white, 
        fontSize: 12, 
        fontWeight: 'bold' 
    },
    addRestaurantButton: { 
        backgroundColor: COLORS.primary, 
        padding: 16, 
        borderRadius: 16, 
        marginHorizontal: 16, 
        marginBottom: 10, 
        alignItems: 'center',
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 }, 
        shadowOpacity: 0.3, 
        shadowRadius: 8
    },
    addRestaurantButtonText: { 
        color: COLORS.white, 
        fontWeight: 'bold', 
        fontSize: 16 
    },
    // 새로운 랜덤 런치 시스템 스타일
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: COLORS.background
    },
    // 성사된 랜덤런치 그룹 카드 스타일
    confirmedGroupCard: {
        backgroundColor: COLORS.white,
        borderRadius: 16,
        padding: 16,
        marginRight: 12,
        width: 200,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        elevation: 3
    },
    confirmedGroupHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'flex-start',
        marginBottom: 8
    },
    confirmedGroupTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black,
        flex: 1
    },
    confirmedGroupMembers: {
        fontSize: 14,
        color: COLORS.primary,
        marginBottom: 4
    },
    confirmedGroupRestaurant: {
        fontSize: 12,
        color: COLORS.gray
    },
    memberItem: {
        marginBottom: 12,
        paddingLeft: 8
    },
    memberName: {
        fontSize: 15,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 4
    },
    memberDetail: {
        fontSize: 13,
        color: COLORS.gray,
        marginLeft: 16,
        marginBottom: 2
    },
    loadingText: {
        marginTop: 16,
        fontSize: 16,
        color: COLORS.gray,
        textAlign: 'center'
    },
    backButton: {
        padding: 8
    },
    container: {
        flex: 1,
        paddingHorizontal: 16
    },
    cardDescription: {
        fontSize: 14,
        color: COLORS.gray,
        lineHeight: 20
    },
    dateGrid: {
        paddingVertical: 10
    },
    dateButton: {
        flex: 1,
        backgroundColor: COLORS.white,
        borderRadius: 16,
        padding: 20,
        margin: 6,
        alignItems: 'center',
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        borderWidth: 1,
        borderColor: COLORS.lightGray
    },
    todayButton: {
        backgroundColor: COLORS.yellow,
        borderColor: COLORS.yellow
    },
    dateButtonText: {
        fontSize: 18,
        fontWeight: 'bold',
        color: COLORS.black
    },
    todayButtonText: {
        color: COLORS.black
    },
    dateButtonSubText: {
        fontSize: 14,
        color: COLORS.gray,
        marginTop: 4
    },
    todayLabel: {
        fontSize: 12,
        fontWeight: 'bold',
        color: COLORS.black,
        marginTop: 4
    },
    userCard: {
        backgroundColor: COLORS.white,
        borderRadius: 16,
        padding: 12,
        marginBottom: 8,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        borderWidth: 1,
        borderColor: COLORS.lightGray
    },
    userCardHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 8
    },
    userNickname: {
        fontSize: 18,
        fontWeight: 'bold',
        color: COLORS.black
    },
    userBadge: {
        backgroundColor: COLORS.yellow,
        borderRadius: 12,
        paddingHorizontal: 8,
        paddingVertical: 4
    },
    userBadgeText: {
        fontSize: 12,
        fontWeight: 'bold',
        color: COLORS.black
    },
    userDetail: {
        fontSize: 14,
        color: COLORS.gray,
        marginTop: 4
    },
    emptyState: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20
    },
    emptyStateText: {
        fontSize: 16,
        color: COLORS.gray,
        textAlign: 'center',
        lineHeight: 24
    },
    section: {
        marginBottom: 24
    },
    sectionTitle: {
        fontSize: 20,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 12,
        marginHorizontal: 16
    },
    proposalCard: {
        backgroundColor: COLORS.white,
        borderRadius: 16,
        padding: 16,
        marginHorizontal: 16,
        marginBottom: 12,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        borderWidth: 1,
        borderColor: COLORS.lightGray
    },
    proposalHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 8
    },
    proposalHeaderRight: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 8
    },
    proposalDetails: {
        marginTop: 8,
        paddingTop: 8,
        borderTopWidth: 1,
        borderTopColor: COLORS.lightGray
    },
    proposalDate: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black
    },
    statusBadge: {
        backgroundColor: COLORS.primary,
        borderRadius: 12,
        paddingHorizontal: 8,
        paddingVertical: 4
    },
    statusConfirmed: {
        backgroundColor: COLORS.secondary
    },
    statusCancelled: {
        backgroundColor: COLORS.red
    },
    statusExpired: {
        backgroundColor: COLORS.gray
    },
    statusText: {
        fontSize: 12,
        fontWeight: 'bold',
        color: COLORS.white
    },
    acceptedText: {
        fontSize: 14,
        color: COLORS.gray,
        marginTop: 8
    },
    proposalActions: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginTop: 12
    },
    actionButton: {
        flex: 1,
        borderRadius: 12,
        padding: 12,
        alignItems: 'center',
        marginHorizontal: 4
    },
    actionButtonText: {
        fontSize: 14,
        fontWeight: 'bold',
        color: COLORS.white
    },
    groupInfo: {
        marginBottom: 12
    },
    groupInfoTitle: {
        fontSize: 14,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 8
    },
    groupMember: {
        fontSize: 12,
        color: COLORS.gray,
        marginLeft: 8,
        marginBottom: 4
    },
    memberInfo: {
        marginBottom: 8,
        marginLeft: 8
    },
    memberName: {
        fontSize: 14,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 2
    },
    memberDetail: {
        fontSize: 12,
        color: COLORS.gray,
        marginLeft: 8,
        marginBottom: 2
    },
    emptyText: {
        fontSize: 16,
        color: COLORS.gray,
        textAlign: 'center',
        marginTop: 20
    },
    // 그룹 스와이프 관련 스타일
    groupCard: {
        backgroundColor: COLORS.white,
        borderRadius: 20,
        padding: 16,
        marginHorizontal: 16,
        elevation: 3,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.1,
        shadowRadius: 8,
        borderWidth: 1,
        borderColor: 'rgba(59, 130, 246, 0.1)',
        width: 310
    },
    usersScrollView: {
        maxHeight: 200,
        marginVertical: 10
    },
    groupListContainer: {
        paddingHorizontal: 0
    },
    groupHeader: {
        marginBottom: 8,
        alignItems: 'center'
    },
    groupTitle: {
        fontSize: 22,
        fontWeight: 'bold',
        color: COLORS.primary,
        marginBottom: 4
    },
    groupSubtitle: {
        fontSize: 14,
        color: COLORS.gray,
        textAlign: 'center'
    },
    paginationContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 20,
        marginBottom: 20
    },
    paginationDot: {
        width: 8,
        height: 8,
        borderRadius: 4,
        backgroundColor: COLORS.lightGray,
        marginHorizontal: 4
    },
    paginationDotActive: {
        backgroundColor: COLORS.primary,
        width: 12,
        height: 12,
        borderRadius: 6
    },
    titleInputContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        borderBottomWidth: 1,
        borderBottomColor: COLORS.lightGray,
        paddingBottom: 8,
        marginBottom: 16
    },
    aiSuggestButton: {
        marginLeft: 8,
        padding: 8,
        borderRadius: 16,
        backgroundColor: COLORS.primary,
        justifyContent: 'center',
        alignItems: 'center'
    },
    suggestionsContainer: {
        marginTop: 16,
        padding: 16,
        backgroundColor: COLORS.white,
        borderRadius: 16,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4
    },
    suggestionsTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 12
    },
    suggestionItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 8,
        borderBottomWidth: 1,
        borderBottomColor: COLORS.lightGray
    },
    suggestionText: {
        fontSize: 16,
        color: COLORS.black
    },
    schedulingHeader: {
        marginBottom: 20,
        paddingHorizontal: 16,
        paddingVertical: 12,
        backgroundColor: COLORS.white,
        borderRadius: 16,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        borderWidth: 1,
        borderColor: 'rgba(59, 130, 246, 0.1)'
    },
    schedulingTitle: {
        fontSize: 22,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 12
    },
    schedulingSubtitle: {
        fontSize: 16,
        color: COLORS.gray,
        marginBottom: 16
    },
    scheduleSuggestionItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 12,
        borderBottomWidth: 1,
        borderBottomColor: COLORS.lightGray
    },
    scheduleSuggestionInfo: {
        flex: 1
    },
    scheduleSuggestionDate: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black
    },
    scheduleSuggestionLocation: {
        fontSize: 14,
        color: COLORS.gray,
        marginTop: 4
    },
    scheduleSuggestionReason: {
        fontSize: 12,
        color: COLORS.gray,
        marginTop: 4
    },
    settingsContainer: {
        padding: 20
    },
    settingsSection: {
        marginBottom: 20
    },
    settingsSectionTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 10
    },
    settingItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 10
    },
    settingInfo: {
        flex: 1
    },
    settingTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black
    },
    settingDescription: {
        fontSize: 14,
        color: COLORS.gray
    },
    // AI 제안 관련 스타일
    titleInputContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 20
    },
    // 지능형 스케줄링 관련 스타일
    friendItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 16,
        backgroundColor: COLORS.white,
        borderRadius: 12,
        marginBottom: 8,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        borderWidth: 1,
        borderColor: COLORS.lightGray
    },
    selectedFriendItem: {
        borderColor: COLORS.primary,
        backgroundColor: 'rgba(59, 130, 246, 0.05)'
    },
    friendInfo: {
        flex: 1
    },
    friendName: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 4
    },
    friendPreference: {
        fontSize: 14,
        color: COLORS.gray
    },
    dateItem: {
        padding: 16,
        backgroundColor: COLORS.white,
        borderRadius: 12,
        marginBottom: 8,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        borderWidth: 1,
        borderColor: COLORS.lightGray
    },
    dateText: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 4
    },
    dateDescription: {
        fontSize: 14,
        color: COLORS.gray
    },
    alternativeContainer: {
        padding: 16,
        backgroundColor: COLORS.white,
        borderRadius: 12,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        borderWidth: 1,
        borderColor: COLORS.lightGray
    },
    alternativeTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.red,
        marginBottom: 8
    },
    alternativeDescription: {
        fontSize: 14,
        color: COLORS.gray
    },
    disabledButton: {
        backgroundColor: COLORS.lightGray,
        opacity: 0.6
    },
    // 온보딩 관련 스타일
    onboardingContainer: {
        flex: 1,
        backgroundColor: currentColors.background,
    },
    onboardingHeader: {
        padding: 20,
        alignItems: 'center',
    },
    progressBar: {
        flexDirection: 'row',
        marginBottom: 10,
    },
    progressDot: {
        width: 8,
        height: 8,
        borderRadius: 4,
        backgroundColor: currentColors.lightGray,
        marginHorizontal: 4,
    },
    progressDotActive: {
        backgroundColor: currentColors.primary,
        width: 12,
        height: 12,
        borderRadius: 6,
    },
    stepIndicator: {
        fontSize: 14,
        color: currentColors.textSecondary,
    },
    onboardingContent: {
        flex: 1,
        padding: 20,
    },
    onboardingTitle: {
        fontSize: 24,
        fontWeight: 'bold',
        color: currentColors.text,
        marginBottom: 10,
        textAlign: 'center',
    },
    onboardingDescription: {
        fontSize: 16,
        color: currentColors.textSecondary,
        marginBottom: 30,
        textAlign: 'center',
    },
    optionsContainer: {
        flex: 1,
    },
    optionCard: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 16,
        backgroundColor: currentColors.surface,
        borderRadius: 12,
        marginBottom: 12,
        borderWidth: 1,
        borderColor: currentColors.border,
    },
    optionCardSelected: {
        borderColor: currentColors.primary,
        backgroundColor: currentColors.primaryLight,
    },
    optionText: {
        fontSize: 16,
        color: currentColors.text,
    },
    optionTextSelected: {
        color: currentColors.primary,
        fontWeight: 'bold',
    },
    onboardingFooter: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        padding: 20,
        backgroundColor: currentColors.surface,
    },
    backButton: {
        padding: 12,
        borderRadius: 8,
        borderWidth: 1,
        borderColor: currentColors.border,
    },
    backButtonText: {
        fontSize: 16,
        color: currentColors.textSecondary,
    },
    nextButton: {
        padding: 12,
        borderRadius: 8,
        backgroundColor: currentColors.primary,
        flex: 1,
        marginLeft: 12,
        alignItems: 'center',
    },
    nextButtonDisabled: {
        backgroundColor: currentColors.disabled,
    },
    nextButtonText: {
        fontSize: 16,
        color: currentColors.surface,
        fontWeight: 'bold',
    },
    // 탭 네비게이션 스타일
    tabContainer: {
        flexDirection: 'row',
        backgroundColor: currentColors.surface,
        paddingHorizontal: 16,
        paddingVertical: 8,
        borderBottomWidth: 1,
        borderBottomColor: currentColors.border,
    },
    tabButton: {
        flex: 1,
        paddingVertical: 8,
        paddingHorizontal: 12,
        alignItems: 'center',
        borderRadius: 8,
        marginHorizontal: 4,
    },
    tabButtonActive: {
        backgroundColor: currentColors.primaryLight,
    },
    tabButtonText: {
        fontSize: 14,
        color: currentColors.textSecondary,
        fontWeight: '500',
    },
    tabButtonTextActive: {
        color: currentColors.primary,
        fontWeight: 'bold',
    },
    // 추천 배지 스타일
    recommendationBadge: {
        position: 'absolute',
        top: 8,
        right: 8,
        backgroundColor: currentColors.primary,
        paddingHorizontal: 8,
        paddingVertical: 4,
        borderRadius: 12,
    },
    recommendationText: {
        fontSize: 12,
        color: currentColors.surface,
        fontWeight: 'bold',
    },
    // 알림 관련 스타일
    notificationItem: {
        flexDirection: 'row',
        alignItems: 'center',
        padding: 16,
        backgroundColor: currentColors.surface,
        marginHorizontal: 16,
        marginBottom: 8,
        borderRadius: 12,
        borderWidth: 1,
        borderColor: currentColors.border,
    },
    unreadNotification: {
        backgroundColor: currentColors.primaryLight,
        borderColor: currentColors.primary,
    },
    notificationIcon: {
        width: 40,
        height: 40,
        borderRadius: 20,
        backgroundColor: currentColors.primaryLight,
        justifyContent: 'center',
        alignItems: 'center',
        marginRight: 12,
    },
    notificationContent: {
        flex: 1,
    },
    notificationMessage: {
        fontSize: 16,
        color: currentColors.text,
        marginBottom: 4,
    },
    notificationTime: {
        fontSize: 12,
        color: currentColors.textSecondary,
    },
    unreadDot: {
        width: 8,
        height: 8,
        borderRadius: 4,
        backgroundColor: currentColors.primary,
        marginLeft: 8,
    },
    
    // 리뷰 상세 스타일
    reviewDetailContainer: {
        flex: 1,
        padding: 16,
    },
    reviewDetailCard: {
        backgroundColor: currentColors.surface,
        borderRadius: 16,
        padding: 20,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.1,
        shadowRadius: 8,
        elevation: 5,
    },
    reviewHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 16,
    },
    reviewAuthor: {
        fontSize: 18,
        fontWeight: '600',
        color: currentColors.text,
    },
    ratingContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    reviewPhotoContainer: {
        marginVertical: 16,
        borderRadius: 12,
        overflow: 'hidden',
    },
    reviewPhoto: {
        width: '100%',
        height: 200,
        borderRadius: 12,
    },
    tagsContainer: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        marginVertical: 12,
    },
    tagItem: {
        backgroundColor: currentColors.primaryLight,
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderRadius: 16,
        marginRight: 8,
        marginBottom: 8,
    },
    tagText: {
        fontSize: 12,
        color: currentColors.primary,
        fontWeight: '500',
    },
    reviewComment: {
        fontSize: 16,
        lineHeight: 24,
        color: currentColors.text,
        marginVertical: 12,
    },
    reviewActions: {
        flexDirection: 'row',
        justifyContent: 'flex-end',
        marginTop: 16,
        paddingTop: 16,
        borderTopWidth: 1,
        borderTopColor: currentColors.border,
    },
    likeButton: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingVertical: 8,
        borderRadius: 20,
        backgroundColor: currentColors.lightGray,
    },
    likedButton: {
        backgroundColor: currentColors.red + '20',
    },
    likeCount: {
        marginLeft: 6,
        fontSize: 14,
        color: currentColors.textSecondary,
        fontWeight: '500',
    },
    likedText: {
        color: currentColors.red,
    },
    header: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 16,
        borderBottomWidth: 1,
        borderBottomColor: currentColors.border,
    },
    headerTitle: {
        fontSize: 20,
        fontWeight: 'bold',
        color: currentColors.text,
    },
    clearButton: {
        fontSize: 14,
        color: currentColors.primary,
    },
    emptyContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingVertical: 60,
    },
    emptyText: {
        fontSize: 16,
        color: currentColors.textSecondary,
        marginTop: 16,
    },
    // AA 계산기 스타일
    aaContainer: {
        padding: 16,
    },
    aaTitle: {
        fontSize: 24,
        fontWeight: 'bold',
        color: currentColors.text,
        textAlign: 'center',
        marginBottom: 20,
    },
    inputSection: {
        marginBottom: 20,
    },
    sectionTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        color: currentColors.text,
        marginBottom: 12,
    },
    inputRow: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 8,
    },
    input: {
        flex: 1,
        borderWidth: 1,
        borderColor: currentColors.border,
        borderRadius: 8,
        padding: 12,
        fontSize: 16,
        color: currentColors.text,
        backgroundColor: currentColors.surface,
    },
    addButton: {
        backgroundColor: currentColors.primary,
        width: 44,
        height: 44,
        borderRadius: 22,
        justifyContent: 'center',
        alignItems: 'center',
    },
    expensesSection: {
        marginBottom: 20,
    },
    expenseItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 12,
        backgroundColor: currentColors.surface,
        borderRadius: 8,
        marginBottom: 8,
        borderWidth: 1,
        borderColor: currentColors.border,
    },
    expenseInfo: {
        flex: 1,
    },
    expenseUser: {
        fontSize: 16,
        fontWeight: 'bold',
        color: currentColors.text,
    },
    expenseAmount: {
        fontSize: 14,
        color: currentColors.textSecondary,
        marginTop: 4,
    },
    removeButton: {
        padding: 4,
    },
    calculateButton: {
        backgroundColor: currentColors.primary,
        padding: 16,
        borderRadius: 8,
        alignItems: 'center',
        marginTop: 16,
    },
    calculateButtonText: {
        fontSize: 16,
        fontWeight: 'bold',
        color: currentColors.surface,
    },
    resultSection: {
        marginTop: 20,
    },
    summaryCard: {
        backgroundColor: currentColors.primaryLight,
        padding: 16,
        borderRadius: 8,
        marginBottom: 16,
    },
    summaryText: {
        fontSize: 16,
        color: currentColors.text,
        marginBottom: 4,
    },
    settlementItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 12,
        backgroundColor: currentColors.surface,
        borderRadius: 8,
        marginBottom: 8,
        borderWidth: 1,
        borderColor: currentColors.border,
    },
    receiveItem: {
        borderColor: currentColors.secondary,
        backgroundColor: 'rgba(16, 185, 129, 0.1)',
    },
    payItem: {
        borderColor: currentColors.red,
        backgroundColor: 'rgba(239, 68, 68, 0.1)',
    },
    settlementUser: {
        fontSize: 16,
        fontWeight: 'bold',
        color: currentColors.text,
    },
    settlementAmount: {
        fontSize: 16,
        fontWeight: 'bold',
        color: currentColors.text,
    },
    settlementStatus: {
        fontSize: 12,
        color: currentColors.textSecondary,
    },
    aiSuggestButton: {
        backgroundColor: COLORS.primaryLight,
        padding: 12,
        borderRadius: 12,
        marginLeft: 8
    },
    suggestionsContainer: {
        backgroundColor: COLORS.white,
        borderRadius: 16,
        padding: 16,
        marginBottom: 20,
        elevation: 2,
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4
    },
    suggestionsTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        color: COLORS.black,
        marginBottom: 12
    },
    suggestionItem: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 12,
        borderBottomWidth: 1,
        borderBottomColor: COLORS.lightGray
    },
    suggestionText: {
        fontSize: 14,
        color: COLORS.black,
        flex: 1
    },
    // 채팅 필터 스타일
    chatFilterContainer: {
        backgroundColor: COLORS.white,
        paddingVertical: 12,
        borderBottomWidth: 1,
        borderBottomColor: COLORS.lightGray
    },
    chatFilterButton: {
        paddingHorizontal: 16,
        paddingVertical: 8,
        marginHorizontal: 6,
        borderRadius: 20,
        backgroundColor: COLORS.background
    },
    chatFilterButtonActive: {
        backgroundColor: COLORS.primary
    },
    chatFilterText: {
        fontSize: 14,
        fontWeight: '600',
        color: COLORS.gray
    },
    chatFilterTextActive: {
        color: COLORS.white
    }
});

