import React, { useState, useEffect, useCallback } from 'react';
import {
    View, SafeAreaView, ScrollView, 
    ActivityIndicator, Alert, TouchableOpacity, Text, StyleSheet
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useFocusEffect } from '@react-navigation/native';
import { COLORS } from '../../utils/commonStyles';
import appService from '../services/AppService';
import{ createFormStyles } from '../../components/common/FormStyles';
// Í∞ÄÏÉÅ Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ import Ï†úÍ±∞

// ÏÉàÎ°úÏö¥ Ïª¥Ìè¨ÎÑåÌä∏Îì§;
import
importUserProfileHeader from '../../components/profile/UserProfileHeader';
import UserActivitySection from '../../components/profile/UserActivitySection';
import UserInfoSection from '../../components/profile/UserInfoSection';
import UserActionButtons from '../../components/profile/UserActionButtons';

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    scrollView: {
        flex: 1,
        paddingHorizontal: 0, // Ï¢åÏö∞ Ìå®Îî© Ï†úÍ±∞
        paddingTop: 16,
    },
    scrollContainer: {
        flexGrow: 1,
        paddingBottom: 40,
    },
});

const UserProfileScreen = ({ route, navigation }) => {
    const { 
        friend, 
        employeeId, 
        isFriend, 
        fromPersonalSchedule, 
        fromRandomLunch, 
        returnToHome, 
        returnToSchedule, 
        scheduleDate, 
        scheduleEvent 
    } = route.params || {};
    
    const [userData, setUserData] = useState(friend || null);
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingProfile, setIsLoadingProfile] = useState(!friend && employeeId);
    const [isFriendStatus, setIsFriendStatus] = useState(isFriend);
    

    const [pointsData, setPointsData] = useState(null);
    const [badges, setBadges] = useState([]);
    const [lastLunchTogether, setLastLunchTogether] = useState(null);
    const [activityStats, setActivityStats] = useState(null);
    
    const currentColors = global.currentColors || COLORS.light;
    const formStyles = createFormStyles(currentColors);
    
    const isMyProfile = userData?.employee_id === global.myEmployeeId || 
                       employeeId === global.myEmployeeId || 
                       (friend?.employee_id === global.myEmployeeId);

    // üö® Ï§ëÏöî: Ïä§ÏôÄÏù¥ÌîÑ Îí§Î°úÍ∞ÄÍ∏∞ Ï≤òÎ¶¨
    const handleGoBack = () => {
        if (returnToHome && returnToSchedule) {
            navigation.navigate('Ìôà', {
                screen: 'HomeScreen',
                params: {
                    showScheduleModal: true,
                    scheduleDate: scheduleDate,
                    scheduleEvent: scheduleEvent
                }
            });
        } else if (fromPersonalSchedule) {
            // AsyncStorageÏóê Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎØÄÎ°ú Îã®ÏàúÌûà Îí§Î°úÍ∞ÄÍ∏∞Îßå ÌïòÎ©¥ Îê®
            navigation.goBack();
        } else if (fromRandomLunch) {
            navigation.goBack();
        } else {
            navigation.goBack();
        }
    };

    // Îí§Î°úÍ∞ÄÍ∏∞ Ï≤òÎ¶¨ ÏÑ§Ï†ï
    useFocusEffect(
        useCallback(() => {
            if (returnToHome && returnToSchedule) {
                navigation.setOptions({
                    headerLeft: () => (
                        <TouchableOpacity
                            onPress={handleGoBack}
                            style={{ marginLeft: 16 }}
                        >
                            <Ionicons name="arrow-back" size={24} color={currentColors.text} />
                        </TouchableOpacity>
                    ),
                });
            } else if (fromPersonalSchedule) {
                navigation.setOptions({
                    headerLeft: () => (
                        <TouchableOpacity
                            onPress={handleGoBack}
                            style={{ marginLeft: 16 }}
                        >
                            <Ionicons name="arrow-back" size={24} color={currentColors.text} />
                        </TouchableOpacity>
                    ),
                });
            } else if (fromRandomLunch) {
                navigation.setOptions({
                    headerLeft: () => (
                        <TouchableOpacity
                            onPress={handleGoBack}
                            style={{ marginLeft: 16 }}
                        >
                            <Ionicons name="arrow-back" size={24} color={currentColors.text} />
                        </TouchableOpacity>
                    ),
                });
            }
        }, [route.params, fromPersonalSchedule, fromRandomLunch, navigation])
    );

    // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchUserProfile = async () => {
        try {
            setIsLoadingProfile(true);
            
            // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå ÏãúÏûë
            
            // Ïã§Ï†ú ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå
            const response = await fetch(`${RENDER_SERVER_URL}/api/users/${employeeId}`);
            if (response.ok) {
                const userData = await response.json();
                setUserData(userData);
                
                // Ìè¨Ïù∏Ìä∏, Î∞∞ÏßÄ, ÎßàÏßÄÎßâ Ï†êÏã¨ Ï†ïÎ≥¥ÎèÑ Í∞ÄÏ†∏Ïò§Í∏∞
                fetchPointsData(employeeId);
                fetchBadgesData(employeeId);
                fetchLastLunchTogether(employeeId);
                fetchActivityStats(employeeId);
            } else {
                console.error('üîç [ÌîÑÎ°úÌïÑ] ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïã§Ìå®:', response.status);
                Alert.alert('Ïò§Î•ò', 'ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
            }
        } catch (error) {
            console.error('üîç [ÌîÑÎ°úÌïÑ] ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïò§Î•ò:', error);
            Alert.alert('Ïò§Î•ò', 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setIsLoadingProfile(false);
        }
    };

    // Ìè¨Ïù∏Ìä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchPointsData = async (userId) => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/dev/users/${userId}/points`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            
            if (response.ok) {
                const data = await response.json();
                setPointsData(data);
            }
        } catch (error) {
            console.error('Ìè¨Ïù∏Ìä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
            // Í∏∞Î≥∏ Ìè¨Ïù∏Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
            setPointsData({
                totalPoints: Math.floor(Math.random() * 5000) + 1000,
                currentLevel: Math.floor(Math.random() * 5) + 1,
                levelTitle: 'Ï†êÏã¨ Î£®ÌÇ§',
                nextLevelPoints: 1000
            });
        }
    };

    // Î∞∞ÏßÄ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchBadgesData = async (userId) => {
        try {
            const response = await fetch(`${RENDER_SERVER_URL}/dev/users/${userId}/badges`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            
            if (response.ok) {
                const data = await response.json();
                setBadges(data);
            } else {
                // Í∏∞Î≥∏ Î∞∞ÏßÄ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
                setBadges([
                    { id: 1, name: 'Ï≤´ Ï†êÏã¨', icon: 'üçΩÔ∏è', description: 'Ï≤´ Î≤àÏß∏ Ï†êÏã¨ ÏïΩÏÜç Ï∞∏Ïó¨' },
                    { id: 2, name: 'ÏπúÍµ¨ ÏÇ¨Îûë', icon: 'üë•', description: 'ÏπúÍµ¨ 5Î™Ö Ï∂îÍ∞Ä' },
                    { id: 3, name: 'ÎßõÏßë ÌÉêÌóòÍ∞Ä', icon: 'üîç', description: '10Í∞ú ÏãùÎãπ Î∞©Î¨∏' }
                ]);
            }
        } catch (error) {
            console.error('Î∞∞ÏßÄ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
            // Í∏∞Î≥∏ Î∞∞ÏßÄ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
            setBadges([
                { id: 1, name: 'Ï≤´ Ï†êÏã¨', icon: 'üçΩÔ∏è', description: 'Ï≤´ Î≤àÏß∏ Ï†êÏã¨ ÏïΩÏÜç Ï∞∏Ïó¨' },
                { id: 2, name: 'ÏπúÍµ¨ ÏÇ¨Îûë', icon: 'üë•', description: 'ÏπúÍµ¨ 5Î™Ö Ï∂îÍ∞Ä' },
                { id: 3, name: 'ÎßõÏßë ÌÉêÌóòÍ∞Ä', icon: 'üîç', description: '10Í∞ú ÏãùÎãπ Î∞©Î¨∏' }
            ]);
        }
    };

    // ÎßàÏßÄÎßâ Ï†êÏã¨ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchLastLunchTogether = async (userId) => {
        try {
            if (!global.myEmployeeId) return;
            
            // Ïã§Ï†ú APIÏóêÏÑú ÎßàÏßÄÎßâ Ï†êÏã¨ Ï†ïÎ≥¥ Ï°∞Ìöå
            const response = await fetch(`${RENDER_SERVER_URL}/api/users/${userId}/last-lunch/${global.myEmployeeId}`);
            if (response.ok) {
                const data = await response.json();
                setLastLunchTogether(data);
            } else {
                // API Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
                setLastLunchTogether(null);
            }
        } catch (error) {
            console.error('ÎßàÏßÄÎßâ Ï†êÏã¨ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
            setLastLunchTogether(null);
        }
    };

    // ÌôúÎèô ÌÜµÍ≥Ñ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchActivityStats = async (userId) => {
        try {
            // Ïã§Ï†ú APIÏóêÏÑúÎäî ÏÇ¨Ïö©Ïûê ÌôúÎèô ÌÜµÍ≥ÑÎ•º Í∞ÄÏ†∏ÏôÄÏïº Ìï®
            // Ïó¨Í∏∞ÏÑúÎäî Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
            setActivityStats({
                consecutiveLogin: Math.floor(Math.random() * 30) + 1,
                totalVisits: Math.floor(Math.random() * 50) + 10,
                totalReviews: Math.floor(Math.random() * 20) + 5
            });
        } catch (error) {
            console.error('ÌôúÎèô ÌÜµÍ≥Ñ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
            // Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
            setActivityStats({
                consecutiveLogin: 7,
                totalVisits: 25,
                totalReviews: 12
            });
        }
    };

    // ÏπúÍµ¨ Ï∂îÍ∞Ä
    const handleAddFriend = async () => {
        try {
            console.log('üîç [ÌîÑÎ°úÌïÑ] ÏπúÍµ¨ Ï∂îÍ∞Ä ÏãúÏûë:', {
                myEmployeeId: global.myEmployeeId,
                targetEmployeeId: userData.employee_id,
                targetNickname: userData.nickname,
                currentFriendStatus: isFriendStatus
            });
            
            setIsLoading(true);
            
            // ÏπúÍµ¨ Ï∂îÍ∞Ä ÏãúÎèÑ
            const requestBody = {
                user_id: global.myEmployeeId || '1',
                friend_id: userData.employee_id
            };
            
            console.log('üîç [ÌîÑÎ°úÌïÑ] ÏπúÍµ¨ Ï∂îÍ∞Ä ÏöîÏ≤≠:', {
                url: `${RENDER_SERVER_URL}/friends/add`,
                method: 'POST',
                body: requestBody
            });
            
            const response = await fetch(`${RENDER_SERVER_URL}/friends/add`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody)
            });
            
            const data = await response.json();
            console.log('üîç [ÌîÑÎ°úÌïÑ] ÏπúÍµ¨ Ï∂îÍ∞Ä API ÏùëÎãµ:', {
                status: response.status,
                statusText: response.statusText,
                data: data
            });
            
            // API ÏùëÎãµ ÌôïÏù∏
            if (response.ok) {
                // ÏπúÍµ¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                setIsFriendStatus(true);
                console.log('üîç [ÌîÑÎ°úÌïÑ] ÏπúÍµ¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏Îê®: true');
                
                // Ï†ÑÏó≠ ÏπúÍµ¨ Ï∂îÍ∞Ä ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï
                if (typeof global !== 'undefined') {
                    global.friendAdded = true;
                    global.lastFriendAddedTime = Date.now();
                    global.forceRefreshFriends = true;
                    console.log('üîç [ÌîÑÎ°úÌïÑ] Ï†ÑÏó≠ ÌîåÎûòÍ∑∏ ÏÑ§Ï†ïÎê®:', {
                        friendAdded: global.friendAdded,
                        forceRefreshFriends: global.forceRefreshFriends
                    });
                }
                
                Alert.alert('ÏÑ±Í≥µ', `${userData.nickname}ÎãòÏùÑ ÏπúÍµ¨Î°ú Ï∂îÍ∞ÄÌñàÏäµÎãàÎã§!`);
                
                // ÏπúÍµ¨ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®ÏùÑ ÏúÑÌï¥ ÏπúÍµ¨ ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
                navigation.navigate('ÏπúÍµ¨');
            } else {
                if (response.status === 400 && data.message === 'Ïù¥ÎØ∏ ÏπúÍµ¨Î°ú Ï∂îÍ∞ÄÎêòÏñ¥ ÏûàÏäµÎãàÎã§.') {
                    // Ïù¥ÎØ∏ ÏπúÍµ¨Ïù∏ Í≤ΩÏö∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                    console.log('üîç [ÌîÑÎ°úÌïÑ] Ïù¥ÎØ∏ ÏπúÍµ¨Î°ú Ï∂îÍ∞ÄÎêòÏñ¥ ÏûàÏùå, ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏');
                    setIsFriendStatus(true);
                    Alert.alert('ÏïåÎ¶º', 'Ïù¥ÎØ∏ ÏπúÍµ¨Î°ú Ï∂îÍ∞ÄÎêòÏñ¥ ÏûàÏäµÎãàÎã§.');
                } else {
                    console.error('üîç [ÌîÑÎ°úÌïÑ] ÏπúÍµ¨ Ï∂îÍ∞Ä Ïã§Ìå®:', {
                        status: response.status,
                        message: data.message
                    });
                    Alert.alert('Ïò§Î•ò', data.message || 'ÏπúÍµ¨ Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                }
            }
        } catch (error) {
            console.error('üîç [ÌîÑÎ°úÌïÑ] ÏπúÍµ¨ Ï∂îÍ∞Ä Ïò§Î•ò:', error);
            Alert.alert('Ïò§Î•ò', 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setIsLoading(false);
        }
    };

    // ÏπúÍµ¨ ÏÇ≠Ï†ú
    const handleRemoveFriend = async () => {
        Alert.alert(
            'ÏπúÍµ¨ ÏÇ≠Ï†ú',
            'Ï†ïÎßêÎ°ú Ïù¥ ÏπúÍµ¨Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
            [
                { text: 'Ï∑®ÏÜå', style: 'cancel' },
                {
                    text: 'ÏÇ≠Ï†ú',
                    style: 'destructive',
                    onPress: async () => {
                        try {
                            setIsLoading(true);
                            
                            const response = await fetch(`${RENDER_SERVER_URL}/friends/remove`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    user_id: global.myEmployeeId || '1',
                                    friend_id: userData.employee_id
                                })
                            });
                            
                            if (response.ok) {
                                setIsFriendStatus(false);
                                Alert.alert('ÏÑ±Í≥µ', 'ÏπúÍµ¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                            } else {
                                Alert.alert('Ïò§Î•ò', 'ÏπúÍµ¨ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                            }
                        } catch (error) {
                            console.error('ÏπúÍµ¨ ÏÇ≠Ï†ú Ïò§Î•ò:', error);
                            Alert.alert('Ïò§Î•ò', 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                        } finally {
                            setIsLoading(false);
                        }
                    }
                }
            ]
        );
    };

    // Ï±ÑÌåÖ ÏãúÏûë
    const handleStartChat = async () => {
        try {
            setIsLoading(true);
            
            // Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ÏãúÏûë
            
            // 1:1 Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ÎòêÎäî Í∏∞Ï°¥ Ï±ÑÌåÖÎ∞© Ï∞æÍ∏∞
            const response = await fetch(`${RENDER_SERVER_URL}/chats/friends`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    user_ids: [global.myEmployeeId, userData.employee_id]
                })
            });
            
            // API ÏùëÎãµ ÌôïÏù∏
            
            if (response.ok) {
                const data = await response.json();
                // Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ÏÑ±Í≥µ
                
                navigation.navigate('ÏÜåÌÜµ', {
                    screen: 'ChatRoom',
                    params: {
                        chatId: data.room_id,
                        chatType: 'friend',
                        chatTitle: `${userData.nickname}ÎãòÍ≥ºÏùò Ï±ÑÌåÖ`
                    }
                });
            } else {
                const errorData = await response.json().catch(() => ({}));
                console.error('üîç [Ï±ÑÌåÖ] API ÏùëÎãµ Ïò§Î•ò:', errorData);
                
                if (response.status === 400) {
                    Alert.alert('Ïò§Î•ò', errorData.message || 'ÏûòÎ™ªÎêú ÏöîÏ≤≠ÏûÖÎãàÎã§.');
                } else if (response.status === 500) {
                    Alert.alert('Ïò§Î•ò', 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
                } else {
                    Alert.alert('Ïò§Î•ò', `Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. (${response.status})`);
                }
            }
        } catch (error) {
            console.error('üîç [Ï±ÑÌåÖ] Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Ïò§Î•ò:', error);
            
            if (error.message.includes('Network request failed')) {
                Alert.alert(
                    'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò', 
                    'ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ±∞ÎÇò Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
                    [{ text: 'ÌôïÏù∏' }]
                );
            } else {
                Alert.alert('Ïò§Î•ò', 'Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            }
        } finally {
            setIsLoading(false);
        }
    };

    // ÏÜê ÌùîÎì§Í∏∞
    const handlePoke = () => {
        Alert.alert('ÏÜê ÌùîÎì§Í∏∞', `${userData.nickname}ÎãòÏóêÍ≤å ÏÜêÏùÑ ÌùîÎì§ÏóàÏäµÎãàÎã§! üëã`);
    };

    // ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏
    const checkFriendStatus = async () => {
        try {
            console.log('üîç [ÌîÑÎ°úÌïÑ] ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ ÏãúÏûë:', {
                userData: userData?.employee_id,
                myEmployeeId: global.myEmployeeId,
                isFriendParam: isFriend
            });
            
            if (!userData?.employee_id || !global.myEmployeeId) {
                console.log('üîç [ÌîÑÎ°úÌïÑ] ÌïÑÏàò Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå, ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ Í±¥ÎÑàÎúÄ');
                return;
            }
            
            // üö® ÎîîÎ≤ÑÍπÖ: ÌòÑÏû¨ ÏπúÍµ¨ ÏÉÅÌÉú Î°úÍ∑∏
            console.log('üîç [ÌîÑÎ°úÌïÑ] ÌòÑÏû¨ ÏπúÍµ¨ ÏÉÅÌÉú:', {
                isFriendStatus,
                isFriendParam: isFriend,
                routeParams: route.params
            });
            
            // 1. Î®ºÏ†Ä route.paramsÏùò isFriend Í∞í ÌôïÏù∏
            if (route.params?.isFriend === true) {
                console.log('üîç [ÌîÑÎ°úÌïÑ] route.paramsÏóêÏÑú ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏Îê®');
                setIsFriendStatus(true);
                return;
            }
            
            // 2. Ïã§Ï†ú ÏπúÍµ¨ Í¥ÄÍ≥Ñ APIÏóêÏÑú ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏
            try {
                const realFriendsResponse = await fetch(`${RENDER_SERVER_URL}/api/friends/${global.myEmployeeId}`);
                if (realFriendsResponse.ok) {
                    const realFriendsData = await realFriendsResponse.json();
                    const isAlreadyFriend = realFriendsData.some(friend => 
                        friend.employee_id === userData.employee_id
                    );
                    
                    console.log('üîç [ÌîÑÎ°úÌïÑ] Ïã§Ï†ú ÏπúÍµ¨ API Í≤∞Í≥º:', {
                        totalFriends: realFriendsData.length,
                        isAlreadyFriend,
                        searchedId: userData.employee_id
                    });
                    
                    if (isAlreadyFriend) {
                        setIsFriendStatus(true);
                        return;
                    }
                } else {
                    console.log('üîç [ÌîÑÎ°úÌïÑ] Ïã§Ï†ú ÏπúÍµ¨ API ÏùëÎãµ Ïò§Î•ò:', realFriendsResponse.status);
                }
            } catch (error) {
                console.log('üîç [ÌîÑÎ°úÌïÑ] Ïã§Ï†ú ÏπúÍµ¨ API Ìò∏Ï∂ú Ïã§Ìå®:', error.message);
            }
            
            // 3. Í∞ÄÏÉÅ ÏπúÍµ¨ Í¥ÄÍ≥Ñ APIÏóêÏÑú ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ (Í∞úÎ∞ú ÌôòÍ≤ΩÏö©)
            const response = await fetch(`${RENDER_SERVER_URL}/dev/friends/${global.myEmployeeId || '1'}`);
            if (response.ok) {
                const friendsData = await response.json();
                const isAlreadyFriend = friendsData.some(friend => 
                    friend.employee_id === userData.employee_id
                );
                
                console.log('üîç [ÌîÑÎ°úÌïÑ] Í∞ÄÏÉÅ ÏπúÍµ¨ API Í≤∞Í≥º:', {
                    totalFriends: friendsData.length,
                    isAlreadyFriend,
                    searchedId: userData.employee_id,
                    allFriendIds: friendsData.map(f => f.employee_id)
                });
                
                if (isAlreadyFriend) {
                    setIsFriendStatus(true);
                }
            }
        } catch (error) {
            console.error('üîç [ÌîÑÎ°úÌïÑ] ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ Ïò§Î•ò:', error);
        }
    };

    // ÌîÑÎ°úÌïÑ ÏàòÏ†ï
    const handleEditProfile = () => {
        navigation.navigate('ProfileEdit', { userData });
    };

    // Í∞ÄÏÉÅ Ïú†Ï†Ä Í¥ÄÎ†® Ìï®ÏàòÎì§ Ï†úÍ±∞ - Ïã§Ï†ú APIÎßå ÏÇ¨Ïö©

    useEffect(() => {
        if (employeeId && !friend) {
            fetchUserProfile();
        } else if (friend) {
            setUserData(friend);
            fetchPointsData(friend.employee_id);
            fetchBadgesData(friend.employee_id);
            fetchLastLunchTogether(friend.employee_id);
            fetchActivityStats(friend.employee_id);
        }
    }, [employeeId, friend]);
    
    // üö® ÎîîÎ≤ÑÍπÖ: ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ÏùÑ ÏúÑÌïú useEffect Ï∂îÍ∞Ä
    useEffect(() => {
        if (userData?.employee_id) {
            console.log('üîç [ÌîÑÎ°úÌïÑ] userData Î≥ÄÍ≤ΩÎê®, ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ ÏãúÏûë:', {
                userData: userData.employee_id,
                isFriendParam: isFriend,
                routeParams: route.params
            });
            
            // ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ Î°úÍ∑∏ Ï∂úÎ†•
            console.log('üîç [ÌîÑÎ°úÌïÑ] ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥:', {
                routeParams: route.params,
                isFriendParam: isFriend,
                myEmployeeId: global.myEmployeeId,
                userEmployeeId: userData.employee_id
            });
            
            // ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏
            checkFriendStatus();
        }
    }, [userData?.employee_id, isFriend, route.params]);

    if (isLoadingProfile) {
        return (
            <SafeAreaView style={formStyles.safeArea}>
                <View style={formStyles.loadingContainer}>
                    <ActivityIndicator size="large" color={currentColors.primary} />
                    <Text style={{ 
                        marginTop: 16, 
                        fontSize: 16, 
                        color: currentColors.textSecondary 
                    }}>
                        ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
                    </Text>
                </View>
            </SafeAreaView>
        );
    }

    if (!userData) {
        return (
            <SafeAreaView style={formStyles.safeArea}>
                <View style={formStyles.loadingContainer}>
                    <Ionicons 
                        name="person-circle-outline" 
                        size={64} 
                        color={currentColors.textSecondary} 
                        style={{ marginBottom: 16 }}
                    />
                    <Text style={{ 
                        fontSize: 18, 
                        color: currentColors.text, 
                        textAlign: 'center',
                        marginBottom: 8
                    }}>
                        ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§
                    </Text>
                    <Text style={{ 
                        fontSize: 14, 
                        color: currentColors.textSecondary, 
                        textAlign: 'center',
                        marginBottom: 24
                    }}>
                        ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî
                    </Text>
                    <TouchableOpacity
                        style={[formStyles.button, formStyles.buttonPrimary]}
                        onPress={fetchUserProfile}
                    >
                        <Text style={formStyles.buttonText}>
                            Îã§Ïãú ÏãúÎèÑ
                        </Text>
                    </TouchableOpacity>
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={[formStyles.container, { backgroundColor: currentColors.background }]}>
            <ScrollView 
                style={formStyles.scrollView} 
                contentContainerStyle={formStyles.scrollContainer}
                showsVerticalScrollIndicator={false}
            >
                {/* ÌîÑÎ°úÌïÑ Ìó§Îçî */}
                <UserProfileHeader
                    userData={userData}
                    pointsData={pointsData}
                    isMyProfile={isMyProfile}
                    isFriend={isFriend}
                    onPoke={handlePoke}
                    currentColors={currentColors}
                />

                {/* ÌôúÎèô Ï†ïÎ≥¥ ÏÑπÏÖò */}
                <UserActivitySection
                    lastLunchTogether={lastLunchTogether}
                    badges={badges}
                    isMyProfile={isMyProfile} // ÎÇ¥ ÌîÑÎ°úÌïÑ Ïó¨Î∂Ä Ï†ÑÎã¨
                    currentColors={currentColors}
                />

                {/* ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑπÏÖò */}
                <UserInfoSection
                    userData={userData}
                    currentColors={currentColors}
                />

                {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
                <UserActionButtons
                    isMyProfile={isMyProfile}
                    isFriend={isFriendStatus}
                    isLoading={isLoading}
                    onEditProfile={handleEditProfile}
                    onAddFriend={handleAddFriend}
                    onRemoveFriend={handleRemoveFriend}
                    onStartChat={handleStartChat}
                    currentColors={currentColors}
                />
                

            </ScrollView>
        </SafeAreaView>
    );
};

export default UserProfileScreen;
