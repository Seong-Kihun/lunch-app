import React, { useState, useEffect, useCallback } from 'react';
import {
    Text,
    View,
    StyleSheet,
    TouchableOpacity,
    SafeAreaView,
    ScrollView,
    ActivityIndicator,
    Alert,
    FlatList
} from 'react-native';
import { useFocusEffect } from '@react-navigation/native';
import Ionicons from 'react-native-vector-icons/Ionicons';
import { unifiedApiClient } from '../../../services/UnifiedApiClient';

// ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú Î°úÍ∑∏
console.log('üîß [SuggestGroupScreen] unifiedApiClient ÏÇ¨Ïö©');

// Ïª®ÌÖçÏä§Ìä∏
import { useAuth } from '../../../contexts/AuthContext';

export default function SuggestGroupScreen({ navigation, route, currentColors, currentUser }) {
    const { user } = useAuth();
    const { selectedDate } = route?.params || {};
    const [suggestedGroups, setSuggestedGroups] = useState([]);
    const [loading, setLoading] = useState(true);
    const [currentGroupIndex, setCurrentGroupIndex] = useState(0);
    const [proposedGroups, setProposedGroups] = useState(new Set());
    
    // ÎûúÎç§Îü∞Ïπò ÌÉ≠ÏóêÏÑú ÏÇ¨Ïö©Îê† Îïå Í∏∞Î≥∏ ÎÇ†Ïßú ÏÑ§Ï†ï
    const defaultDate = selectedDate || new Date();
    const [currentDate, setCurrentDate] = useState(defaultDate);

    useEffect(() => {
        fetchSuggestedGroups();
    }, [currentDate]);

    useEffect(() => {
        if (suggestedGroups.length > 0) {
            fetchMyProposals();
        }
    }, [suggestedGroups]);

    // ÌôîÎ©¥Ïù¥ Ìè¨Ïª§Ïä§Îê† ÎïåÎßàÎã§ Ï†úÏïà ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®
    useFocusEffect(
        useCallback(() => {
            fetchMyProposals();
        }, [])
    );

    const fetchMyProposals = async () => {
        try {
            const response = await unifiedApiClient.get(`/proposals/mine?employee_id=${currentUser?.employee_id || '1'}`);
            const data = response;
            if (response.success) {
                const sentProposals = data.sent_proposals || [];
                const pendingProposals = sentProposals.filter(p => p.status === 'pending');
                const proposedGroupKeys = new Set();
                pendingProposals.forEach(proposal => {
                    if (proposal.recipient_ids) {
                        // Ïó¨Í∏∞ Îëê Ï§ÑÏù¥ Ï§ëÏöî!
                        const ids = parseRecipientIds(proposal.recipient_ids);
                        const groupKey = getGroupKeyFromIds(ids);
                        proposedGroupKeys.add(groupKey);
                    }
                });
                setProposedGroups(proposedGroupKeys);
            }
        } catch (error) {
            console.error('Ï†úÏïà ÏÉÅÌÉú Ï°∞Ìöå Ïò§Î•ò:', error);
        }
    };

    const fetchSuggestedGroups = async () => {
        try {
            setLoading(true);
            // Í∞ÄÏÉÅ Í∑∏Î£π Îß§Ïπ≠ API ÏÇ¨Ïö© - Ïó¨Îü¨ Í∑∏Î£π ÏßÄÏõê
            const response = await unifiedApiClient.get(`/dev/random-lunch/${user.employee_id || '1'}`);
            const groupsData = response;
            
            if (response.success && groupsData && Array.isArray(groupsData)) {
                // APIÍ∞Ä Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïòÎØÄÎ°ú Í∞Å Í∑∏Î£πÏùÑ Î≥ÄÌôò
                const virtualGroups = groupsData.map(data => ({
                    id: data.id,
                    date: data.date,
                    members: data.members,
                    status: data.status,
                    created_at: data.created_at,
                    score: data.score || 0,
                    // ÌôîÎ©¥ ÌëúÏãúÏö© Ï∂îÍ∞Ä ÌïÑÎìú
                    title: `üçΩÔ∏è ${data.date} Ï†êÏã¨ Î™®ÏûÑ`,
                    current_members: data.current_members || data.members.length,
                    max_members: data.max_members || 4,
                    restaurant_name: 'Ï∂îÏ≤ú ÏãùÎãπ',
                    party_date: data.date,
                    party_time: '12:00',
                    users: data.members.map(memberId => {
                        // Ïã§Ï†ú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ÎãâÎÑ§ÏûÑ Í∞ÄÏ†∏Ïò§Í∏∞
                        const getNickname = (employeeId) => {
                            const user = data.users.find(u => u.employee_id === employeeId);
                            return user ? user.nickname : `ÏÇ¨Ïö©Ïûê${employeeId}`;
                        };
                        return {
                            employee_id: memberId,
                            nickname: getNickname(memberId),
                            profile_image: null
                        };
                    })
                }));
                
                setSuggestedGroups(virtualGroups);
                console.log('‚úÖ [ÎûúÎç§Îü∞Ïπò]', virtualGroups.length, 'Í∞ú Í∑∏Î£π Îß§Ïπ≠ ÏôÑÎ£å');
            } else {
                setSuggestedGroups([]);
                console.log('‚ö†Ô∏è [ÎûúÎç§Îü∞Ïπò] Í∑∏Î£π Îß§Ïπ≠ Í≤∞Í≥º ÏóÜÏùå');
            }
        } catch (error) {
            console.error('ÎûúÎç§Îü∞Ïπò Í∑∏Î£π Ï°∞Ìöå Ïò§Î•ò:', error);
            Alert.alert('Ïò§Î•ò', 'Í∑∏Î£π Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };

    const handlePropose = async (group) => {
        try {
            const recipientIds = group.users
                .filter(u => u.employee_id !== (currentUser?.employee_id || '1'))
                .map(u => u.employee_id);
            
            if (recipientIds.length === 0) {
                Alert.alert('Ïò§Î•ò', 'Ï†úÏïàÌï† Ïàò ÏûàÎäî ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§.');
                return;
            }

            const response = await unifiedApiClient.post(`/proposals`, {
                sender_id: currentUser?.employee_id || '1',
                recipient_ids: recipientIds,
                message: `${group.date} Ï†êÏã¨ Î™®ÏûÑÏóê Ìï®ÍªòÌïòÏãúÍ≤†Ïñ¥Ïöî?`,
                type: 'random_lunch',
                group_data: {
                    date: group.date,
                    members: group.users.map(u => u.employee_id),
                    restaurant: group.restaurant_name
                }
            });

            if (response.success) {
                Alert.alert('ÏÑ±Í≥µ', 'Ï†êÏã¨ Î™®ÏûÑ Ï†úÏïàÏùÑ Î≥¥ÎÉàÏäµÎãàÎã§!');
                fetchMyProposals(); // Ï†úÏïà ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®
            } else {
                Alert.alert('Ïò§Î•ò', response.message || 'Ï†úÏïà Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }
        } catch (error) {
            console.error('Ï†úÏïà Ï†ÑÏÜ° Ïò§Î•ò:', error);
            Alert.alert('Ïò§Î•ò', 'ÎÑ§Ìä∏ÏõåÌÅ¨Ïóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    const handleGroupSelect = (group) => {
        navigation.navigate('PartyDetail', { 
            partyId: group.id,
            partyData: group
        });
    };

    const renderGroupCard = ({ item: group, index }) => {
        const isProposed = proposedGroups.has(getGroupKeyFromIds(group.users.map(u => u.employee_id)));
        
        return (
            <View style={[styles.groupCard, { backgroundColor: currentColors.surface }]}>
                <View style={styles.groupHeader}>
                    <Text style={[styles.groupTitle, { color: currentColors.text }]}>
                        {group.title}
                    </Text>
                    <View style={[styles.scoreBadge, { backgroundColor: currentColors.primaryLight }]}>
                        <Text style={[styles.scoreText, { color: currentColors.primary }]}>
                            {group.score}Ï†ê
                        </Text>
                    </View>
                </View>
                
                <View style={styles.groupInfo}>
                    <Text style={[styles.infoText, { color: currentColors.textSecondary }]}>
                        üìÖ {group.date} ‚Ä¢ üïê {group.party_time}
                    </Text>
                    <Text style={[styles.infoText, { color: currentColors.textSecondary }]}>
                        üçΩÔ∏è {group.restaurant_name}
                    </Text>
                    <Text style={[styles.infoText, { color: currentColors.textSecondary }]}>
                        üë• {group.current_members}/{group.max_members}Î™Ö
                    </Text>
                </View>
                
                <View style={styles.membersSection}>
                    <Text style={[styles.sectionTitle, { color: currentColors.text }]}>
                        Î©§Î≤Ñ
                    </Text>
                    <View style={styles.membersList}>
                        {group.users.map((user, idx) => (
                            <View key={idx} style={styles.memberItem}>
                                <View style={[styles.avatar, { backgroundColor: currentColors.primaryLight }]}>
                                    <Text style={[styles.avatarText, { color: currentColors.primary }]}>
                                        {user.nickname.charAt(0)}
                                    </Text>
                                </View>
                                <Text style={[styles.memberName, { color: currentColors.text }]}>
                                    {user.nickname}
                                </Text>
                            </View>
                        ))}
                    </View>
                </View>
                
                <View style={styles.actionButtons}>
                    <TouchableOpacity
                        style={[styles.actionButton, { backgroundColor: currentColors.surfaceVariant }]}
                        onPress={() => handleGroupSelect(group)}
                    >
                        <Text style={[styles.actionButtonText, { color: currentColors.onSurfaceVariant }]}>
                            ÏÉÅÏÑ∏Î≥¥Í∏∞
                        </Text>
                    </TouchableOpacity>
                    
                    {!isProposed ? (
                        <TouchableOpacity
                            style={[styles.actionButton, { backgroundColor: currentColors.primary }]}
                            onPress={() => handlePropose(group)}
                        >
                            <Text style={[styles.actionButtonText, { color: currentColors.onPrimary }]}>
                                Ï†úÏïàÌïòÍ∏∞
                            </Text>
                        </TouchableOpacity>
                    ) : (
                        <View style={[styles.proposedBadge, { backgroundColor: currentColors.success }]}>
                            <Text style={[styles.proposedText, { color: currentColors.onSuccess }]}>
                                Ï†úÏïàÎê®
                            </Text>
                        </View>
                    )}
                </View>
            </View>
        );
    };

    if (loading) {
        return (
            <SafeAreaView style={[styles.safeArea, { backgroundColor: currentColors.background }]}>
                <View style={styles.loadingContainer}>
                    <ActivityIndicator size="large" color={currentColors.primary} />
                    <Text style={[styles.loadingText, { color: currentColors.textSecondary }]}>
                        Í∑∏Î£πÏùÑ Ï∞æÎäî Ï§ë...
                    </Text>
                </View>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView style={[styles.safeArea, { backgroundColor: currentColors.background }]}>
            <ScrollView style={styles.container}>
                <View style={styles.header}>
                    <Text style={[styles.headerTitle, { color: currentColors.text }]}>
                        Ï∂îÏ≤ú Í∑∏Î£π
                    </Text>
                    <Text style={[styles.headerSubtitle, { color: currentColors.textSecondary }]}>
                        {suggestedGroups.length}Í∞úÏùò Í∑∏Î£πÏùÑ Ï∞æÏïòÏäµÎãàÎã§
                    </Text>
                </View>
                
                {suggestedGroups.length === 0 ? (
                    <View style={styles.emptyContainer}>
                        <Ionicons name="people-outline" size={64} color={currentColors.textSecondary} />
                        <Text style={[styles.emptyText, { color: currentColors.textSecondary }]}>
                            Ï∂îÏ≤úÌï† Í∑∏Î£πÏù¥ ÏóÜÏäµÎãàÎã§
                        </Text>
                        <Text style={[styles.emptySubtext, { color: currentColors.textSecondary }]}>
                            Îã§Î•∏ ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌï¥Î≥¥ÏÑ∏Ïöî
                        </Text>
                    </View>
                ) : (
                    <FlatList
                        data={suggestedGroups}
                        renderItem={renderGroupCard}
                        keyExtractor={(item, index) => `group-${index}`}
                        scrollEnabled={false}
                        contentContainerStyle={styles.groupsList}
                    />
                )}
            </ScrollView>
        </SafeAreaView>
    );
}

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const parseRecipientIds = (recipientIds) => {
    if (typeof recipientIds === 'string') {
        return recipientIds.split(',').map(id => id.trim());
    }
    return recipientIds || [];
};

const getGroupKeyFromIds = (ids) => {
    return ids.sort().join(',');
};

const styles = StyleSheet.create({
    safeArea: {
        flex: 1,
    },
    container: {
        flex: 1,
    },
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    loadingText: {
        fontSize: 16,
        marginTop: 16,
    },
    header: {
        padding: 20,
        alignItems: 'center',
    },
    headerTitle: {
        fontSize: 24,
        fontWeight: 'bold',
        marginBottom: 8,
    },
    headerSubtitle: {
        fontSize: 16,
    },
    emptyContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingVertical: 60,
    },
    emptyText: {
        fontSize: 18,
        fontWeight: '600',
        marginTop: 16,
        marginBottom: 8,
    },
    emptySubtext: {
        fontSize: 14,
    },
    groupsList: {
        padding: 20,
        gap: 16,
    },
    groupCard: {
        borderRadius: 16,
        padding: 20,
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
    },
    groupHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 12,
    },
    groupTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        flex: 1,
    },
    scoreBadge: {
        paddingHorizontal: 8,
        paddingVertical: 4,
        borderRadius: 12,
    },
    scoreText: {
        fontSize: 12,
        fontWeight: '600',
    },
    groupInfo: {
        marginBottom: 16,
        gap: 4,
    },
    infoText: {
        fontSize: 14,
    },
    membersSection: {
        marginBottom: 16,
    },
    sectionTitle: {
        fontSize: 16,
        fontWeight: '600',
        marginBottom: 8,
    },
    membersList: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        gap: 8,
    },
    memberItem: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 6,
    },
    avatar: {
        width: 24,
        height: 24,
        borderRadius: 12,
        justifyContent: 'center',
        alignItems: 'center',
    },
    avatarText: {
        fontSize: 12,
        fontWeight: '600',
    },
    memberName: {
        fontSize: 14,
    },
    actionButtons: {
        flexDirection: 'row',
        gap: 12,
    },
    actionButton: {
        flex: 1,
        paddingVertical: 12,
        borderRadius: 8,
        alignItems: 'center',
    },
    actionButtonText: {
        fontSize: 14,
        fontWeight: '600',
    },
    proposedBadge: {
        flex: 1,
        paddingVertical: 12,
        borderRadius: 8,
        alignItems: 'center',
        justifyContent: 'center',
    },
    proposedText: {
        fontSize: 14,
        fontWeight: '600',
    },
});
